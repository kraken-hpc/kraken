// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Node.proto

package proto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	github_com_kraken_hpc_kraken_core_proto_customtypes "github.com/kraken-hpc/kraken/core/proto/customtypes"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Node_RunState int32

const (
	Node_UNKNOWN Node_RunState = 0
	Node_INIT    Node_RunState = 1
	Node_SYNC    Node_RunState = 2
	Node_ERROR   Node_RunState = 3
)

var Node_RunState_name = map[int32]string{
	0: "UNKNOWN",
	1: "INIT",
	2: "SYNC",
	3: "ERROR",
}

var Node_RunState_value = map[string]int32{
	"UNKNOWN": 0,
	"INIT":    1,
	"SYNC":    2,
	"ERROR":   3,
}

func (x Node_RunState) String() string {
	return proto.EnumName(Node_RunState_name, int32(x))
}

func (Node_RunState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ade4b1ea954e8f8c, []int{1, 0}
}

type Node_PhysState int32

const (
	Node_PHYS_UNKNOWN Node_PhysState = 0
	Node_POWER_OFF    Node_PhysState = 1
	Node_POWER_ON     Node_PhysState = 2
	Node_POWER_CYCLE  Node_PhysState = 3
	Node_PHYS_HANG    Node_PhysState = 4
	Node_PHYS_ERROR   Node_PhysState = 5
)

var Node_PhysState_name = map[int32]string{
	0: "PHYS_UNKNOWN",
	1: "POWER_OFF",
	2: "POWER_ON",
	3: "POWER_CYCLE",
	4: "PHYS_HANG",
	5: "PHYS_ERROR",
}

var Node_PhysState_value = map[string]int32{
	"PHYS_UNKNOWN": 0,
	"POWER_OFF":    1,
	"POWER_ON":     2,
	"POWER_CYCLE":  3,
	"PHYS_HANG":    4,
	"PHYS_ERROR":   5,
}

func (x Node_PhysState) String() string {
	return proto.EnumName(Node_PhysState_name, int32(x))
}

func (Node_PhysState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ade4b1ea954e8f8c, []int{1, 1}
}

type Node_FreeBusy int32

const (
	Node_FREE Node_FreeBusy = 0
	Node_BUSY Node_FreeBusy = 1
)

var Node_FreeBusy_name = map[int32]string{
	0: "FREE",
	1: "BUSY",
}

var Node_FreeBusy_value = map[string]int32{
	"FREE": 0,
	"BUSY": 1,
}

func (x Node_FreeBusy) String() string {
	return proto.EnumName(Node_FreeBusy_name, int32(x))
}

func (Node_FreeBusy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ade4b1ea954e8f8c, []int{1, 2}
}

type NodeList struct {
	Nodes                []*Node  `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeList) Reset()         { *m = NodeList{} }
func (m *NodeList) String() string { return proto.CompactTextString(m) }
func (*NodeList) ProtoMessage()    {}
func (*NodeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade4b1ea954e8f8c, []int{0}
}
func (m *NodeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeList.Merge(m, src)
}
func (m *NodeList) XXX_Size() int {
	return m.Size()
}
func (m *NodeList) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeList.DiscardUnknown(m)
}

var xxx_messageInfo_NodeList proto.InternalMessageInfo

func (m *NodeList) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (*NodeList) XXX_MessageName() string {
	return "proto.NodeList"
}

type Node struct {
	Id                   *github_com_kraken_hpc_kraken_core_proto_customtypes.NodeID `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/kraken-hpc/kraken/core/proto/customtypes.NodeID" json:"id,omitempty"`
	Nodename             string                                                      `protobuf:"bytes,2,opt,name=nodename,proto3" json:"nodename,omitempty"`
	RunState             Node_RunState                                               `protobuf:"varint,3,opt,name=run_state,json=runState,proto3,enum=proto.Node_RunState" json:"run_state,omitempty"`
	PhysState            Node_PhysState                                              `protobuf:"varint,4,opt,name=phys_state,json=physState,proto3,enum=proto.Node_PhysState" json:"phys_state,omitempty"`
	Arch                 string                                                      `protobuf:"bytes,5,opt,name=arch,proto3" json:"arch,omitempty"`
	Platform             string                                                      `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	ParentId             *github_com_kraken_hpc_kraken_core_proto_customtypes.NodeID `protobuf:"bytes,7,opt,name=parent_id,json=parentId,proto3,customtype=github.com/kraken-hpc/kraken/core/proto/customtypes.NodeID" json:"parent_id,omitempty"`
	Busy                 Node_FreeBusy                                               `protobuf:"varint,8,opt,name=busy,proto3,enum=proto.Node_FreeBusy" json:"busy,omitempty"`
	Services             []*ServiceInstance                                          `protobuf:"bytes,14,rep,name=services,proto3" json:"services,omitempty"`
	Extensions           []*types.Any                                                `protobuf:"bytes,15,rep,name=extensions,proto3" json:"extensions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                                    `json:"-"`
	XXX_unrecognized     []byte                                                      `json:"-"`
	XXX_sizecache        int32                                                       `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade4b1ea954e8f8c, []int{1}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *Node) GetRunState() Node_RunState {
	if m != nil {
		return m.RunState
	}
	return Node_UNKNOWN
}

func (m *Node) GetPhysState() Node_PhysState {
	if m != nil {
		return m.PhysState
	}
	return Node_PHYS_UNKNOWN
}

func (m *Node) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *Node) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Node) GetBusy() Node_FreeBusy {
	if m != nil {
		return m.Busy
	}
	return Node_FREE
}

func (m *Node) GetServices() []*ServiceInstance {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *Node) GetExtensions() []*types.Any {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (*Node) XXX_MessageName() string {
	return "proto.Node"
}
func init() {
	proto.RegisterEnum("proto.Node_RunState", Node_RunState_name, Node_RunState_value)
	golang_proto.RegisterEnum("proto.Node_RunState", Node_RunState_name, Node_RunState_value)
	proto.RegisterEnum("proto.Node_PhysState", Node_PhysState_name, Node_PhysState_value)
	golang_proto.RegisterEnum("proto.Node_PhysState", Node_PhysState_name, Node_PhysState_value)
	proto.RegisterEnum("proto.Node_FreeBusy", Node_FreeBusy_name, Node_FreeBusy_value)
	golang_proto.RegisterEnum("proto.Node_FreeBusy", Node_FreeBusy_name, Node_FreeBusy_value)
	proto.RegisterType((*NodeList)(nil), "proto.NodeList")
	golang_proto.RegisterType((*NodeList)(nil), "proto.NodeList")
	proto.RegisterType((*Node)(nil), "proto.Node")
	golang_proto.RegisterType((*Node)(nil), "proto.Node")
}

func init() { proto.RegisterFile("Node.proto", fileDescriptor_ade4b1ea954e8f8c) }
func init() { golang_proto.RegisterFile("Node.proto", fileDescriptor_ade4b1ea954e8f8c) }

var fileDescriptor_ade4b1ea954e8f8c = []byte{
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x65, 0x13, 0xbb, 0xb5, 0x27, 0x25, 0xb5, 0x56, 0x2d, 0x32, 0x91, 0x30, 0x21, 0xa7, 0x5c,
	0xea, 0x88, 0x82, 0x38, 0x80, 0x84, 0xd4, 0x94, 0x84, 0x06, 0x2a, 0xa7, 0xda, 0x50, 0x55, 0x81,
	0x43, 0xe4, 0xd8, 0xdb, 0xc4, 0xb4, 0xd9, 0xb5, 0xbc, 0x36, 0xc2, 0x7f, 0xc7, 0x09, 0xf5, 0xc8,
	0x99, 0x03, 0x42, 0xe9, 0x8f, 0x20, 0xef, 0x3a, 0x69, 0x04, 0x57, 0x4e, 0x7e, 0x4f, 0xf3, 0xde,
	0xce, 0x9b, 0xf1, 0x00, 0x78, 0x3c, 0xa4, 0x6e, 0x9c, 0xf0, 0x94, 0x63, 0x5d, 0x7e, 0x1a, 0x0f,
	0x67, 0x9c, 0xcf, 0xae, 0x69, 0x47, 0xb2, 0x69, 0x76, 0xd9, 0xf1, 0x59, 0xae, 0x14, 0x8d, 0xfd,
	0x11, 0x4d, 0xbe, 0x44, 0x01, 0x1d, 0x30, 0x91, 0xfa, 0x2c, 0x28, 0x8d, 0x8d, 0x83, 0x59, 0x94,
	0xce, 0xb3, 0xa9, 0x1b, 0xf0, 0x45, 0x67, 0xc6, 0x67, 0xfc, 0xce, 0x5a, 0x30, 0x49, 0x24, 0x52,
	0xf2, 0xd6, 0x01, 0x18, 0x45, 0xd7, 0xd3, 0x48, 0xa4, 0xf8, 0x09, 0xe8, 0x8c, 0x87, 0x54, 0xd8,
	0xa8, 0x59, 0x6d, 0xd7, 0x0e, 0x6b, 0x4a, 0xe2, 0x16, 0x75, 0xa2, 0x2a, 0xad, 0xef, 0x3a, 0x68,
	0x05, 0xc7, 0x1e, 0x54, 0xa2, 0xd0, 0x46, 0x4d, 0xd4, 0xde, 0xe9, 0xbe, 0xfe, 0xf9, 0xeb, 0xf1,
	0xcb, 0x8d, 0xb6, 0x57, 0x89, 0x7f, 0x45, 0xd9, 0xc1, 0x3c, 0x0e, 0x4a, 0xd8, 0x09, 0x78, 0x52,
	0xce, 0xd0, 0x09, 0x32, 0x91, 0xf2, 0x45, 0x9a, 0xc7, 0x54, 0xc8, 0x97, 0x07, 0x6f, 0x48, 0x25,
	0x0a, 0x71, 0x03, 0x8c, 0xa2, 0x03, 0xf3, 0x17, 0xd4, 0xae, 0x34, 0x51, 0xdb, 0x24, 0x6b, 0x8e,
	0x9f, 0x82, 0x99, 0x64, 0x6c, 0x22, 0x52, 0x3f, 0xa5, 0x76, 0xb5, 0x89, 0xda, 0xf5, 0xc3, 0xbd,
	0x8d, 0x6c, 0x2e, 0xc9, 0xd8, 0xa8, 0xa8, 0x11, 0x23, 0x29, 0x11, 0x7e, 0x0e, 0x10, 0xcf, 0x73,
	0x51, 0x7a, 0x34, 0xe9, 0xd9, 0xdf, 0xf4, 0x9c, 0xcd, 0x73, 0xa1, 0x4c, 0x66, 0xbc, 0x82, 0x18,
	0x83, 0xe6, 0x27, 0xc1, 0xdc, 0xd6, 0x65, 0x00, 0x89, 0x8b, 0x60, 0xf1, 0xb5, 0x9f, 0x5e, 0xf2,
	0x64, 0x61, 0x6f, 0xa9, 0x60, 0x2b, 0x8e, 0x3f, 0x81, 0x19, 0xfb, 0x09, 0x65, 0xe9, 0x24, 0x0a,
	0xed, 0xed, 0xff, 0xb2, 0x0b, 0x43, 0x3d, 0x38, 0x08, 0x71, 0x1b, 0xb4, 0x69, 0x26, 0x72, 0xdb,
	0xf8, 0x77, 0xe0, 0x7e, 0x42, 0x69, 0x37, 0x13, 0x39, 0x91, 0x0a, 0x7c, 0x08, 0x86, 0x50, 0xb7,
	0x20, 0xec, 0xba, 0xfc, 0x75, 0x0f, 0x4a, 0xf5, 0x5f, 0x27, 0x42, 0xd6, 0xba, 0x62, 0x41, 0xf4,
	0x6b, 0x4a, 0x99, 0x88, 0x38, 0x13, 0xf6, 0xae, 0x74, 0xed, 0xb9, 0xea, 0xda, 0xdc, 0xd5, 0xc9,
	0xb8, 0x47, 0x2c, 0x27, 0x1b, 0xba, 0xd6, 0x0b, 0x30, 0x56, 0xcb, 0xc6, 0x35, 0xd8, 0x3e, 0xf7,
	0xde, 0x7b, 0xc3, 0x0b, 0xcf, 0xba, 0x87, 0x0d, 0xd0, 0x06, 0xde, 0xe0, 0x83, 0x85, 0x0a, 0x34,
	0x1a, 0x7b, 0xc7, 0x56, 0x05, 0x9b, 0xa0, 0xf7, 0x08, 0x19, 0x12, 0xab, 0xda, 0xfa, 0x0c, 0xe6,
	0x7a, 0xe1, 0xd8, 0x82, 0x9d, 0xb3, 0x93, 0xf1, 0x68, 0x72, 0xe7, 0xbe, 0x0f, 0xe6, 0xd9, 0xf0,
	0xa2, 0x47, 0x26, 0xc3, 0x7e, 0xdf, 0x42, 0x78, 0x07, 0x8c, 0x92, 0x7a, 0x56, 0x05, 0xef, 0x42,
	0x4d, 0xb1, 0xe3, 0xf1, 0xf1, 0x69, 0xcf, 0xaa, 0x4a, 0x75, 0xe1, 0x3f, 0x39, 0xf2, 0xde, 0x5a,
	0x1a, 0xae, 0x03, 0x48, 0xaa, 0x7a, 0xe9, 0x2d, 0x07, 0x8c, 0xd5, 0x7e, 0x8a, 0x30, 0x7d, 0xd2,
	0xeb, 0xa9, 0x80, 0xdd, 0xf3, 0xd1, 0xd8, 0x42, 0xef, 0x34, 0xc3, 0xb4, 0xea, 0xdd, 0x47, 0x37,
	0x4b, 0x07, 0xfd, 0x58, 0x3a, 0xe8, 0xf7, 0xd2, 0x41, 0xdf, 0x6e, 0x1d, 0x74, 0x73, 0xeb, 0xa0,
	0x8f, 0xdb, 0xee, 0x2b, 0x35, 0xfb, 0x96, 0xfc, 0x3c, 0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0xd0,
	0xe2, 0x5d, 0x3d, 0x93, 0x03, 0x00, 0x00,
}

func (m *NodeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extensions) > 0 {
		for iNdEx := len(m.Extensions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Extensions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNode(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.Busy != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Busy))
		i--
		dAtA[i] = 0x40
	}
	if m.ParentId != nil {
		{
			size := m.ParentId.Size()
			i -= size
			if _, err := m.ParentId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Arch) > 0 {
		i -= len(m.Arch)
		copy(dAtA[i:], m.Arch)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Arch)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PhysState != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.PhysState))
		i--
		dAtA[i] = 0x20
	}
	if m.RunState != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.RunState))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nodename) > 0 {
		i -= len(m.Nodename)
		copy(dAtA[i:], m.Nodename)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Nodename)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size := m.Id.Size()
			i -= size
			if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NodeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovNode(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Nodename)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.RunState != 0 {
		n += 1 + sovNode(uint64(m.RunState))
	}
	if m.PhysState != 0 {
		n += 1 + sovNode(uint64(m.PhysState))
	}
	l = len(m.Arch)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.ParentId != nil {
		l = m.ParentId.Size()
		n += 1 + l + sovNode(uint64(l))
	}
	if m.Busy != 0 {
		n += 1 + sovNode(uint64(m.Busy))
	}
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovNode(uint64(l))
		}
	}
	if len(m.Extensions) > 0 {
		for _, e := range m.Extensions {
			l = e.Size()
			n += 1 + l + sovNode(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNode(x uint64) (n int) {
	return sovNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NodeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_kraken_hpc_kraken_core_proto_customtypes.NodeID
			m.Id = &v
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunState", wireType)
			}
			m.RunState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunState |= Node_RunState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhysState", wireType)
			}
			m.PhysState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhysState |= Node_PhysState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_kraken_hpc_kraken_core_proto_customtypes.NodeID
			m.ParentId = &v
			if err := m.ParentId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Busy", wireType)
			}
			m.Busy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Busy |= Node_FreeBusy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &ServiceInstance{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = append(m.Extensions, &types.Any{})
			if err := m.Extensions[len(m.Extensions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNode = fmt.Errorf("proto: unexpected end of group")
)
