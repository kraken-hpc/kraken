// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ModuleAPI.proto

package proto

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ServiceControl_Command int32

const (
	ServiceControl_STOP   ServiceControl_Command = 0
	ServiceControl_UPDATE ServiceControl_Command = 1
	ServiceControl_INIT   ServiceControl_Command = 2
)

var ServiceControl_Command_name = map[int32]string{
	0: "STOP",
	1: "UPDATE",
	2: "INIT",
}

var ServiceControl_Command_value = map[string]int32{
	"STOP":   0,
	"UPDATE": 1,
	"INIT":   2,
}

func (x ServiceControl_Command) String() string {
	return proto.EnumName(ServiceControl_Command_name, int32(x))
}

func (ServiceControl_Command) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{3, 0}
}

type MutationControl_Type int32

const (
	MutationControl_MUTATE    MutationControl_Type = 0
	MutationControl_INTERRUPT MutationControl_Type = 1
)

var MutationControl_Type_name = map[int32]string{
	0: "MUTATE",
	1: "INTERRUPT",
}

var MutationControl_Type_value = map[string]int32{
	"MUTATE":    0,
	"INTERRUPT": 1,
}

func (x MutationControl_Type) String() string {
	return proto.EnumName(MutationControl_Type_name, int32(x))
}

func (MutationControl_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{4, 0}
}

type StateChangeControl_Type int32

const (
	StateChangeControl_CREATE     StateChangeControl_Type = 0
	StateChangeControl_READ       StateChangeControl_Type = 1
	StateChangeControl_UPDATE     StateChangeControl_Type = 2
	StateChangeControl_DELETE     StateChangeControl_Type = 3
	StateChangeControl_CFG_READ   StateChangeControl_Type = 4
	StateChangeControl_CFG_UPDATE StateChangeControl_Type = 5
)

var StateChangeControl_Type_name = map[int32]string{
	0: "CREATE",
	1: "READ",
	2: "UPDATE",
	3: "DELETE",
	4: "CFG_READ",
	5: "CFG_UPDATE",
}

var StateChangeControl_Type_value = map[string]int32{
	"CREATE":     0,
	"READ":       1,
	"UPDATE":     2,
	"DELETE":     3,
	"CFG_READ":   4,
	"CFG_UPDATE": 5,
}

func (x StateChangeControl_Type) String() string {
	return proto.EnumName(StateChangeControl_Type_name, int32(x))
}

func (StateChangeControl_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{5, 0}
}

type EventControl_Type int32

const (
	EventControl_StateChange EventControl_Type = 0
	EventControl_Mutation    EventControl_Type = 1
	EventControl_Discovery   EventControl_Type = 2
)

var EventControl_Type_name = map[int32]string{
	0: "StateChange",
	1: "Mutation",
	2: "Discovery",
}

var EventControl_Type_value = map[string]int32{
	"StateChange": 0,
	"Mutation":    1,
	"Discovery":   2,
}

func (x EventControl_Type) String() string {
	return proto.EnumName(EventControl_Type_name, int32(x))
}

func (EventControl_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{6, 0}
}

type Query struct {
	URL string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*Query_Node
	//	*Query_Text
	//	*Query_Bool
	//	*Query_MutationNodeList
	//	*Query_MutationEdgeList
	//	*Query_MutationPath
	Payload              isQuery_Payload `protobuf_oneof:"payload"`
	Filter               []string        `protobuf:"bytes,8,rep,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{0}
}
func (m *Query) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Query.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return m.Size()
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

type isQuery_Payload interface {
	isQuery_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Query_Node struct {
	Node *Node `protobuf:"bytes,2,opt,name=node,proto3,oneof" json:"node,omitempty"`
}
type Query_Text struct {
	Text string `protobuf:"bytes,3,opt,name=text,proto3,oneof" json:"text,omitempty"`
}
type Query_Bool struct {
	Bool bool `protobuf:"varint,4,opt,name=bool,proto3,oneof" json:"bool,omitempty"`
}
type Query_MutationNodeList struct {
	MutationNodeList *MutationNodeList `protobuf:"bytes,5,opt,name=mutationNodeList,proto3,oneof" json:"mutationNodeList,omitempty"`
}
type Query_MutationEdgeList struct {
	MutationEdgeList *MutationEdgeList `protobuf:"bytes,6,opt,name=mutationEdgeList,proto3,oneof" json:"mutationEdgeList,omitempty"`
}
type Query_MutationPath struct {
	MutationPath *MutationPath `protobuf:"bytes,7,opt,name=mutationPath,proto3,oneof" json:"mutationPath,omitempty"`
}

func (*Query_Node) isQuery_Payload()             {}
func (*Query_Text) isQuery_Payload()             {}
func (*Query_Bool) isQuery_Payload()             {}
func (*Query_MutationNodeList) isQuery_Payload() {}
func (*Query_MutationEdgeList) isQuery_Payload() {}
func (*Query_MutationPath) isQuery_Payload()     {}

func (m *Query) GetPayload() isQuery_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Query) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Query) GetNode() *Node {
	if x, ok := m.GetPayload().(*Query_Node); ok {
		return x.Node
	}
	return nil
}

func (m *Query) GetText() string {
	if x, ok := m.GetPayload().(*Query_Text); ok {
		return x.Text
	}
	return ""
}

func (m *Query) GetBool() bool {
	if x, ok := m.GetPayload().(*Query_Bool); ok {
		return x.Bool
	}
	return false
}

func (m *Query) GetMutationNodeList() *MutationNodeList {
	if x, ok := m.GetPayload().(*Query_MutationNodeList); ok {
		return x.MutationNodeList
	}
	return nil
}

func (m *Query) GetMutationEdgeList() *MutationEdgeList {
	if x, ok := m.GetPayload().(*Query_MutationEdgeList); ok {
		return x.MutationEdgeList
	}
	return nil
}

func (m *Query) GetMutationPath() *MutationPath {
	if x, ok := m.GetPayload().(*Query_MutationPath); ok {
		return x.MutationPath
	}
	return nil
}

func (m *Query) GetFilter() []string {
	if m != nil {
		return m.Filter
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Query) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Query_Node)(nil),
		(*Query_Text)(nil),
		(*Query_Bool)(nil),
		(*Query_MutationNodeList)(nil),
		(*Query_MutationEdgeList)(nil),
		(*Query_MutationPath)(nil),
	}
}

func (*Query) XXX_MessageName() string {
	return "proto.Query"
}

type QueryMulti struct {
	Queries              []*Query `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryMulti) Reset()         { *m = QueryMulti{} }
func (m *QueryMulti) String() string { return proto.CompactTextString(m) }
func (*QueryMulti) ProtoMessage()    {}
func (*QueryMulti) Descriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{1}
}
func (m *QueryMulti) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMulti) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMulti.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMulti) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMulti.Merge(m, src)
}
func (m *QueryMulti) XXX_Size() int {
	return m.Size()
}
func (m *QueryMulti) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMulti.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMulti proto.InternalMessageInfo

func (m *QueryMulti) GetQueries() []*Query {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (*QueryMulti) XXX_MessageName() string {
	return "proto.QueryMulti"
}

type ServiceInitRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Module               string   `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceInitRequest) Reset()         { *m = ServiceInitRequest{} }
func (m *ServiceInitRequest) String() string { return proto.CompactTextString(m) }
func (*ServiceInitRequest) ProtoMessage()    {}
func (*ServiceInitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{2}
}
func (m *ServiceInitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceInitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceInitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceInitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceInitRequest.Merge(m, src)
}
func (m *ServiceInitRequest) XXX_Size() int {
	return m.Size()
}
func (m *ServiceInitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceInitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceInitRequest proto.InternalMessageInfo

func (m *ServiceInitRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ServiceInitRequest) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (*ServiceInitRequest) XXX_MessageName() string {
	return "proto.ServiceInitRequest"
}

type ServiceControl struct {
	Command              ServiceControl_Command `protobuf:"varint,1,opt,name=command,proto3,enum=proto.ServiceControl_Command" json:"command,omitempty"`
	Config               *types.Any             `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ServiceControl) Reset()         { *m = ServiceControl{} }
func (m *ServiceControl) String() string { return proto.CompactTextString(m) }
func (*ServiceControl) ProtoMessage()    {}
func (*ServiceControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{3}
}
func (m *ServiceControl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceControl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceControl.Merge(m, src)
}
func (m *ServiceControl) XXX_Size() int {
	return m.Size()
}
func (m *ServiceControl) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceControl.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceControl proto.InternalMessageInfo

func (m *ServiceControl) GetCommand() ServiceControl_Command {
	if m != nil {
		return m.Command
	}
	return ServiceControl_STOP
}

func (m *ServiceControl) GetConfig() *types.Any {
	if m != nil {
		return m.Config
	}
	return nil
}

func (*ServiceControl) XXX_MessageName() string {
	return "proto.ServiceControl"
}

type MutationControl struct {
	Module               string               `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Id                   string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Type                 MutationControl_Type `protobuf:"varint,3,opt,name=type,proto3,enum=proto.MutationControl_Type" json:"type,omitempty"`
	Cfg                  *Node                `protobuf:"bytes,4,opt,name=cfg,proto3" json:"cfg,omitempty"`
	Dsc                  *Node                `protobuf:"bytes,5,opt,name=dsc,proto3" json:"dsc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MutationControl) Reset()         { *m = MutationControl{} }
func (m *MutationControl) String() string { return proto.CompactTextString(m) }
func (*MutationControl) ProtoMessage()    {}
func (*MutationControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{4}
}
func (m *MutationControl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MutationControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MutationControl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MutationControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MutationControl.Merge(m, src)
}
func (m *MutationControl) XXX_Size() int {
	return m.Size()
}
func (m *MutationControl) XXX_DiscardUnknown() {
	xxx_messageInfo_MutationControl.DiscardUnknown(m)
}

var xxx_messageInfo_MutationControl proto.InternalMessageInfo

func (m *MutationControl) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *MutationControl) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MutationControl) GetType() MutationControl_Type {
	if m != nil {
		return m.Type
	}
	return MutationControl_MUTATE
}

func (m *MutationControl) GetCfg() *Node {
	if m != nil {
		return m.Cfg
	}
	return nil
}

func (m *MutationControl) GetDsc() *Node {
	if m != nil {
		return m.Dsc
	}
	return nil
}

func (*MutationControl) XXX_MessageName() string {
	return "proto.MutationControl"
}

type StateChangeControl struct {
	Type                 StateChangeControl_Type `protobuf:"varint,1,opt,name=type,proto3,enum=proto.StateChangeControl_Type" json:"type,omitempty"`
	Url                  string                  `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Value                string                  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *StateChangeControl) Reset()         { *m = StateChangeControl{} }
func (m *StateChangeControl) String() string { return proto.CompactTextString(m) }
func (*StateChangeControl) ProtoMessage()    {}
func (*StateChangeControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{5}
}
func (m *StateChangeControl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateChangeControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateChangeControl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateChangeControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateChangeControl.Merge(m, src)
}
func (m *StateChangeControl) XXX_Size() int {
	return m.Size()
}
func (m *StateChangeControl) XXX_DiscardUnknown() {
	xxx_messageInfo_StateChangeControl.DiscardUnknown(m)
}

var xxx_messageInfo_StateChangeControl proto.InternalMessageInfo

func (m *StateChangeControl) GetType() StateChangeControl_Type {
	if m != nil {
		return m.Type
	}
	return StateChangeControl_CREATE
}

func (m *StateChangeControl) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *StateChangeControl) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (*StateChangeControl) XXX_MessageName() string {
	return "proto.StateChangeControl"
}

type EventControl struct {
	Type EventControl_Type `protobuf:"varint,1,opt,name=type,proto3,enum=proto.EventControl_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*EventControl_StateChangeControl
	//	*EventControl_MutationControl
	//	*EventControl_DiscoveryEvent
	Event                isEventControl_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EventControl) Reset()         { *m = EventControl{} }
func (m *EventControl) String() string { return proto.CompactTextString(m) }
func (*EventControl) ProtoMessage()    {}
func (*EventControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{6}
}
func (m *EventControl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventControl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventControl.Merge(m, src)
}
func (m *EventControl) XXX_Size() int {
	return m.Size()
}
func (m *EventControl) XXX_DiscardUnknown() {
	xxx_messageInfo_EventControl.DiscardUnknown(m)
}

var xxx_messageInfo_EventControl proto.InternalMessageInfo

type isEventControl_Event interface {
	isEventControl_Event()
	MarshalTo([]byte) (int, error)
	Size() int
}

type EventControl_StateChangeControl struct {
	StateChangeControl *StateChangeControl `protobuf:"bytes,2,opt,name=stateChangeControl,proto3,oneof" json:"stateChangeControl,omitempty"`
}
type EventControl_MutationControl struct {
	MutationControl *MutationControl `protobuf:"bytes,3,opt,name=mutationControl,proto3,oneof" json:"mutationControl,omitempty"`
}
type EventControl_DiscoveryEvent struct {
	DiscoveryEvent *DiscoveryEvent `protobuf:"bytes,4,opt,name=discoveryEvent,proto3,oneof" json:"discoveryEvent,omitempty"`
}

func (*EventControl_StateChangeControl) isEventControl_Event() {}
func (*EventControl_MutationControl) isEventControl_Event()    {}
func (*EventControl_DiscoveryEvent) isEventControl_Event()     {}

func (m *EventControl) GetEvent() isEventControl_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *EventControl) GetType() EventControl_Type {
	if m != nil {
		return m.Type
	}
	return EventControl_StateChange
}

func (m *EventControl) GetStateChangeControl() *StateChangeControl {
	if x, ok := m.GetEvent().(*EventControl_StateChangeControl); ok {
		return x.StateChangeControl
	}
	return nil
}

func (m *EventControl) GetMutationControl() *MutationControl {
	if x, ok := m.GetEvent().(*EventControl_MutationControl); ok {
		return x.MutationControl
	}
	return nil
}

func (m *EventControl) GetDiscoveryEvent() *DiscoveryEvent {
	if x, ok := m.GetEvent().(*EventControl_DiscoveryEvent); ok {
		return x.DiscoveryEvent
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EventControl) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EventControl_StateChangeControl)(nil),
		(*EventControl_MutationControl)(nil),
		(*EventControl_DiscoveryEvent)(nil),
	}
}

func (*EventControl) XXX_MessageName() string {
	return "proto.EventControl"
}

type DiscoveryEvent struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	ValueId              string   `protobuf:"bytes,3,opt,name=value_id,json=valueId,proto3" json:"value_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoveryEvent) Reset()         { *m = DiscoveryEvent{} }
func (m *DiscoveryEvent) String() string { return proto.CompactTextString(m) }
func (*DiscoveryEvent) ProtoMessage()    {}
func (*DiscoveryEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{7}
}
func (m *DiscoveryEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoveryEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoveryEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoveryEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveryEvent.Merge(m, src)
}
func (m *DiscoveryEvent) XXX_Size() int {
	return m.Size()
}
func (m *DiscoveryEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveryEvent.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveryEvent proto.InternalMessageInfo

func (m *DiscoveryEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DiscoveryEvent) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *DiscoveryEvent) GetValueId() string {
	if m != nil {
		return m.ValueId
	}
	return ""
}

func (*DiscoveryEvent) XXX_MessageName() string {
	return "proto.DiscoveryEvent"
}

type MutationNodeList struct {
	MutationNodeList     []*MutationNode `protobuf:"bytes,1,rep,name=MutationNodeList,proto3" json:"MutationNodeList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MutationNodeList) Reset()         { *m = MutationNodeList{} }
func (m *MutationNodeList) String() string { return proto.CompactTextString(m) }
func (*MutationNodeList) ProtoMessage()    {}
func (*MutationNodeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{8}
}
func (m *MutationNodeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MutationNodeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MutationNodeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MutationNodeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MutationNodeList.Merge(m, src)
}
func (m *MutationNodeList) XXX_Size() int {
	return m.Size()
}
func (m *MutationNodeList) XXX_DiscardUnknown() {
	xxx_messageInfo_MutationNodeList.DiscardUnknown(m)
}

var xxx_messageInfo_MutationNodeList proto.InternalMessageInfo

func (m *MutationNodeList) GetMutationNodeList() []*MutationNode {
	if m != nil {
		return m.MutationNodeList
	}
	return nil
}

func (*MutationNodeList) XXX_MessageName() string {
	return "proto.MutationNodeList"
}

type MutationEdgeList struct {
	MutationEdgeList     []*MutationEdge `protobuf:"bytes,1,rep,name=MutationEdgeList,proto3" json:"MutationEdgeList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MutationEdgeList) Reset()         { *m = MutationEdgeList{} }
func (m *MutationEdgeList) String() string { return proto.CompactTextString(m) }
func (*MutationEdgeList) ProtoMessage()    {}
func (*MutationEdgeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{9}
}
func (m *MutationEdgeList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MutationEdgeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MutationEdgeList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MutationEdgeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MutationEdgeList.Merge(m, src)
}
func (m *MutationEdgeList) XXX_Size() int {
	return m.Size()
}
func (m *MutationEdgeList) XXX_DiscardUnknown() {
	xxx_messageInfo_MutationEdgeList.DiscardUnknown(m)
}

var xxx_messageInfo_MutationEdgeList proto.InternalMessageInfo

func (m *MutationEdgeList) GetMutationEdgeList() []*MutationEdge {
	if m != nil {
		return m.MutationEdgeList
	}
	return nil
}

func (*MutationEdgeList) XXX_MessageName() string {
	return "proto.MutationEdgeList"
}

type MutationPath struct {
	Cur                  int64           `protobuf:"varint,1,opt,name=cur,proto3" json:"cur,omitempty"`
	Cmplt                bool            `protobuf:"varint,2,opt,name=cmplt,proto3" json:"cmplt,omitempty"`
	Chain                []*MutationEdge `protobuf:"bytes,3,rep,name=chain,proto3" json:"chain,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MutationPath) Reset()         { *m = MutationPath{} }
func (m *MutationPath) String() string { return proto.CompactTextString(m) }
func (*MutationPath) ProtoMessage()    {}
func (*MutationPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{10}
}
func (m *MutationPath) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MutationPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MutationPath.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MutationPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MutationPath.Merge(m, src)
}
func (m *MutationPath) XXX_Size() int {
	return m.Size()
}
func (m *MutationPath) XXX_DiscardUnknown() {
	xxx_messageInfo_MutationPath.DiscardUnknown(m)
}

var xxx_messageInfo_MutationPath proto.InternalMessageInfo

func (m *MutationPath) GetCur() int64 {
	if m != nil {
		return m.Cur
	}
	return 0
}

func (m *MutationPath) GetCmplt() bool {
	if m != nil {
		return m.Cmplt
	}
	return false
}

func (m *MutationPath) GetChain() []*MutationEdge {
	if m != nil {
		return m.Chain
	}
	return nil
}

func (*MutationPath) XXX_MessageName() string {
	return "proto.MutationPath"
}

type MutationNode struct {
	Label                string     `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Id                   string     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Color                *NodeColor `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MutationNode) Reset()         { *m = MutationNode{} }
func (m *MutationNode) String() string { return proto.CompactTextString(m) }
func (*MutationNode) ProtoMessage()    {}
func (*MutationNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{11}
}
func (m *MutationNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MutationNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MutationNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MutationNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MutationNode.Merge(m, src)
}
func (m *MutationNode) XXX_Size() int {
	return m.Size()
}
func (m *MutationNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MutationNode.DiscardUnknown(m)
}

var xxx_messageInfo_MutationNode proto.InternalMessageInfo

func (m *MutationNode) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *MutationNode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MutationNode) GetColor() *NodeColor {
	if m != nil {
		return m.Color
	}
	return nil
}

func (*MutationNode) XXX_MessageName() string {
	return "proto.MutationNode"
}

type MutationEdge struct {
	From                 string     `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   string     `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Id                   string     `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Color                *EdgeColor `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MutationEdge) Reset()         { *m = MutationEdge{} }
func (m *MutationEdge) String() string { return proto.CompactTextString(m) }
func (*MutationEdge) ProtoMessage()    {}
func (*MutationEdge) Descriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{12}
}
func (m *MutationEdge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MutationEdge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MutationEdge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MutationEdge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MutationEdge.Merge(m, src)
}
func (m *MutationEdge) XXX_Size() int {
	return m.Size()
}
func (m *MutationEdge) XXX_DiscardUnknown() {
	xxx_messageInfo_MutationEdge.DiscardUnknown(m)
}

var xxx_messageInfo_MutationEdge proto.InternalMessageInfo

func (m *MutationEdge) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MutationEdge) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *MutationEdge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MutationEdge) GetColor() *EdgeColor {
	if m != nil {
		return m.Color
	}
	return nil
}

func (*MutationEdge) XXX_MessageName() string {
	return "proto.MutationEdge"
}

// This is only nessessary for the json mutation edge color to output in the correct format for the dashboard
type EdgeColor struct {
	Color                string   `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
	Highlight            string   `protobuf:"bytes,2,opt,name=highlight,proto3" json:"highlight,omitempty"`
	Inherit              bool     `protobuf:"varint,3,opt,name=inherit,proto3" json:"inherit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EdgeColor) Reset()         { *m = EdgeColor{} }
func (m *EdgeColor) String() string { return proto.CompactTextString(m) }
func (*EdgeColor) ProtoMessage()    {}
func (*EdgeColor) Descriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{13}
}
func (m *EdgeColor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EdgeColor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EdgeColor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EdgeColor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeColor.Merge(m, src)
}
func (m *EdgeColor) XXX_Size() int {
	return m.Size()
}
func (m *EdgeColor) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeColor.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeColor proto.InternalMessageInfo

func (m *EdgeColor) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *EdgeColor) GetHighlight() string {
	if m != nil {
		return m.Highlight
	}
	return ""
}

func (m *EdgeColor) GetInherit() bool {
	if m != nil {
		return m.Inherit
	}
	return false
}

func (*EdgeColor) XXX_MessageName() string {
	return "proto.EdgeColor"
}

// This is only nessessary for the json mutation node color to output in the correct format for the dashboard
type NodeColor struct {
	Border               string   `protobuf:"bytes,1,opt,name=border,proto3" json:"border,omitempty"`
	Background           string   `protobuf:"bytes,2,opt,name=background,proto3" json:"background,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeColor) Reset()         { *m = NodeColor{} }
func (m *NodeColor) String() string { return proto.CompactTextString(m) }
func (*NodeColor) ProtoMessage()    {}
func (*NodeColor) Descriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{14}
}
func (m *NodeColor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeColor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeColor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeColor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeColor.Merge(m, src)
}
func (m *NodeColor) XXX_Size() int {
	return m.Size()
}
func (m *NodeColor) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeColor.DiscardUnknown(m)
}

var xxx_messageInfo_NodeColor proto.InternalMessageInfo

func (m *NodeColor) GetBorder() string {
	if m != nil {
		return m.Border
	}
	return ""
}

func (m *NodeColor) GetBackground() string {
	if m != nil {
		return m.Background
	}
	return ""
}

func (*NodeColor) XXX_MessageName() string {
	return "proto.NodeColor"
}

type LogMessage struct {
	Origin               string   `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Level                uint32   `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Msg                  string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogMessage) Reset()         { *m = LogMessage{} }
func (m *LogMessage) String() string { return proto.CompactTextString(m) }
func (*LogMessage) ProtoMessage()    {}
func (*LogMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0480c644eb8bb9b4, []int{15}
}
func (m *LogMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogMessage.Merge(m, src)
}
func (m *LogMessage) XXX_Size() int {
	return m.Size()
}
func (m *LogMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LogMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LogMessage proto.InternalMessageInfo

func (m *LogMessage) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *LogMessage) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *LogMessage) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (*LogMessage) XXX_MessageName() string {
	return "proto.LogMessage"
}
func init() {
	proto.RegisterEnum("proto.ServiceControl_Command", ServiceControl_Command_name, ServiceControl_Command_value)
	golang_proto.RegisterEnum("proto.ServiceControl_Command", ServiceControl_Command_name, ServiceControl_Command_value)
	proto.RegisterEnum("proto.MutationControl_Type", MutationControl_Type_name, MutationControl_Type_value)
	golang_proto.RegisterEnum("proto.MutationControl_Type", MutationControl_Type_name, MutationControl_Type_value)
	proto.RegisterEnum("proto.StateChangeControl_Type", StateChangeControl_Type_name, StateChangeControl_Type_value)
	golang_proto.RegisterEnum("proto.StateChangeControl_Type", StateChangeControl_Type_name, StateChangeControl_Type_value)
	proto.RegisterEnum("proto.EventControl_Type", EventControl_Type_name, EventControl_Type_value)
	golang_proto.RegisterEnum("proto.EventControl_Type", EventControl_Type_name, EventControl_Type_value)
	proto.RegisterType((*Query)(nil), "proto.Query")
	golang_proto.RegisterType((*Query)(nil), "proto.Query")
	proto.RegisterType((*QueryMulti)(nil), "proto.QueryMulti")
	golang_proto.RegisterType((*QueryMulti)(nil), "proto.QueryMulti")
	proto.RegisterType((*ServiceInitRequest)(nil), "proto.ServiceInitRequest")
	golang_proto.RegisterType((*ServiceInitRequest)(nil), "proto.ServiceInitRequest")
	proto.RegisterType((*ServiceControl)(nil), "proto.ServiceControl")
	golang_proto.RegisterType((*ServiceControl)(nil), "proto.ServiceControl")
	proto.RegisterType((*MutationControl)(nil), "proto.MutationControl")
	golang_proto.RegisterType((*MutationControl)(nil), "proto.MutationControl")
	proto.RegisterType((*StateChangeControl)(nil), "proto.StateChangeControl")
	golang_proto.RegisterType((*StateChangeControl)(nil), "proto.StateChangeControl")
	proto.RegisterType((*EventControl)(nil), "proto.EventControl")
	golang_proto.RegisterType((*EventControl)(nil), "proto.EventControl")
	proto.RegisterType((*DiscoveryEvent)(nil), "proto.DiscoveryEvent")
	golang_proto.RegisterType((*DiscoveryEvent)(nil), "proto.DiscoveryEvent")
	proto.RegisterType((*MutationNodeList)(nil), "proto.MutationNodeList")
	golang_proto.RegisterType((*MutationNodeList)(nil), "proto.MutationNodeList")
	proto.RegisterType((*MutationEdgeList)(nil), "proto.MutationEdgeList")
	golang_proto.RegisterType((*MutationEdgeList)(nil), "proto.MutationEdgeList")
	proto.RegisterType((*MutationPath)(nil), "proto.MutationPath")
	golang_proto.RegisterType((*MutationPath)(nil), "proto.MutationPath")
	proto.RegisterType((*MutationNode)(nil), "proto.MutationNode")
	golang_proto.RegisterType((*MutationNode)(nil), "proto.MutationNode")
	proto.RegisterType((*MutationEdge)(nil), "proto.MutationEdge")
	golang_proto.RegisterType((*MutationEdge)(nil), "proto.MutationEdge")
	proto.RegisterType((*EdgeColor)(nil), "proto.EdgeColor")
	golang_proto.RegisterType((*EdgeColor)(nil), "proto.EdgeColor")
	proto.RegisterType((*NodeColor)(nil), "proto.NodeColor")
	golang_proto.RegisterType((*NodeColor)(nil), "proto.NodeColor")
	proto.RegisterType((*LogMessage)(nil), "proto.LogMessage")
	golang_proto.RegisterType((*LogMessage)(nil), "proto.LogMessage")
}

func init() { proto.RegisterFile("ModuleAPI.proto", fileDescriptor_0480c644eb8bb9b4) }
func init() { golang_proto.RegisterFile("ModuleAPI.proto", fileDescriptor_0480c644eb8bb9b4) }

var fileDescriptor_0480c644eb8bb9b4 = []byte{
	// 1293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x5b, 0x6f, 0xdb, 0x54,
	0x1c, 0xb7, 0x73, 0x69, 0xe2, 0x7f, 0xba, 0xd4, 0x9c, 0x6d, 0x25, 0xed, 0x58, 0xd4, 0xf9, 0x61,
	0xea, 0xc4, 0x48, 0x51, 0xb6, 0x81, 0xd0, 0x06, 0x55, 0x9b, 0x7a, 0xb4, 0xa2, 0x2d, 0xe5, 0x34,
	0x7d, 0x00, 0x21, 0x4d, 0xae, 0x7d, 0xea, 0x18, 0x1c, 0x9f, 0xcc, 0x97, 0x42, 0xf6, 0x71, 0xf8,
	0x24, 0x3c, 0xf0, 0x30, 0x09, 0x21, 0xf1, 0xc0, 0x07, 0x40, 0xdd, 0x23, 0x5f, 0x02, 0x9d, 0x8b,
	0x13, 0x3b, 0x4e, 0x2f, 0x7b, 0xf2, 0xf9, 0xdf, 0x7e, 0xff, 0xab, 0xff, 0xe7, 0xc0, 0xd2, 0x01,
	0x75, 0x12, 0x9f, 0x6c, 0x1d, 0xed, 0x75, 0x46, 0x21, 0x8d, 0x29, 0xaa, 0xf2, 0xcf, 0x2a, 0x1c,
	0x52, 0x87, 0x08, 0xd6, 0xea, 0x8a, 0x4b, 0xa9, 0xeb, 0x93, 0x0d, 0x4e, 0x9d, 0x26, 0x67, 0x1b,
	0x56, 0x30, 0x96, 0xa2, 0x7b, 0xb3, 0x22, 0x32, 0x1c, 0xc5, 0xa9, 0xf0, 0x13, 0xd7, 0x8b, 0x07,
	0xc9, 0x69, 0xc7, 0xa6, 0xc3, 0x0d, 0x97, 0xba, 0x74, 0xaa, 0xc5, 0x28, 0x4e, 0xf0, 0x93, 0x50,
	0x37, 0xfe, 0x29, 0x41, 0xf5, 0xbb, 0x84, 0x84, 0x63, 0xa4, 0x43, 0xf9, 0x04, 0xef, 0xb7, 0xd4,
	0x35, 0x75, 0x5d, 0xc3, 0xec, 0x88, 0x1e, 0x40, 0x25, 0xa0, 0x0e, 0x69, 0x95, 0xd6, 0xd4, 0xf5,
	0x46, 0xb7, 0x21, 0x2c, 0x3a, 0x2c, 0xc6, 0x5d, 0x05, 0x73, 0x11, 0xba, 0x03, 0x95, 0x98, 0xfc,
	0x1a, 0xb7, 0xca, 0xcc, 0x8a, 0x71, 0x19, 0xc5, 0xb8, 0xa7, 0x94, 0xfa, 0xad, 0xca, 0x9a, 0xba,
	0x5e, 0x67, 0x5c, 0x46, 0x21, 0x13, 0xf4, 0x61, 0x12, 0x5b, 0xb1, 0x47, 0x03, 0x86, 0xb1, 0xef,
	0x45, 0x71, 0xab, 0xca, 0xa1, 0x3f, 0x94, 0xd0, 0x07, 0x33, 0xe2, 0x5d, 0x05, 0x17, 0x4c, 0xb2,
	0x30, 0xa6, 0xe3, 0x0a, 0x98, 0x85, 0xb9, 0x30, 0xa9, 0x38, 0x0b, 0x93, 0xf2, 0xd0, 0x17, 0xb0,
	0x98, 0xf2, 0x8e, 0xac, 0x78, 0xd0, 0xaa, 0x71, 0x88, 0xdb, 0x33, 0x10, 0x4c, 0xb4, 0xab, 0xe0,
	0x9c, 0x2a, 0x5a, 0x86, 0x85, 0x33, 0xcf, 0x8f, 0x49, 0xd8, 0xaa, 0xaf, 0x95, 0xd7, 0x35, 0x2c,
	0xa9, 0x6d, 0x0d, 0x6a, 0x23, 0x6b, 0xec, 0x53, 0xcb, 0x31, 0x9e, 0x02, 0xf0, 0xaa, 0x1e, 0x24,
	0x7e, 0xec, 0xa1, 0x87, 0x50, 0x7b, 0x9d, 0x90, 0xd0, 0x23, 0x51, 0x4b, 0x5d, 0x2b, 0xaf, 0x37,
	0xba, 0x8b, 0xd2, 0x0d, 0xd7, 0xc1, 0xa9, 0xd0, 0x78, 0x01, 0xe8, 0x98, 0x84, 0xe7, 0x9e, 0x4d,
	0xf6, 0x02, 0x2f, 0xc6, 0xe4, 0x75, 0x42, 0xa2, 0x18, 0x35, 0xa1, 0xe4, 0x39, 0xb2, 0x2f, 0x25,
	0xcf, 0x61, 0xee, 0x87, 0x7c, 0x7e, 0x78, 0x63, 0x34, 0x2c, 0x29, 0xe3, 0x37, 0x15, 0x9a, 0xd2,
	0xbc, 0x47, 0x83, 0x38, 0xa4, 0x3e, 0xfa, 0x1c, 0x6a, 0x36, 0x1d, 0x0e, 0xad, 0x40, 0xd8, 0x37,
	0xbb, 0xf7, 0xa5, 0xe3, 0xbc, 0x5e, 0xa7, 0x27, 0x94, 0x70, 0xaa, 0x8d, 0x1e, 0xc3, 0x82, 0x4d,
	0x83, 0x33, 0xcf, 0x95, 0xcd, 0xbf, 0xd3, 0x11, 0x33, 0xd7, 0x49, 0xa7, 0xa9, 0xb3, 0x15, 0x8c,
	0xb1, 0xd4, 0x31, 0x1e, 0x41, 0x4d, 0x22, 0xa0, 0x3a, 0x54, 0x8e, 0xfb, 0xdf, 0x1e, 0xe9, 0x0a,
	0x02, 0x58, 0x38, 0x39, 0xda, 0xd9, 0xea, 0x9b, 0xba, 0xca, 0xb8, 0x7b, 0x87, 0x7b, 0x7d, 0xbd,
	0x64, 0xfc, 0xa9, 0xc2, 0x52, 0x5a, 0xdc, 0x34, 0xca, 0x69, 0x42, 0x6a, 0x36, 0x21, 0x99, 0x78,
	0x69, 0x92, 0xf8, 0x06, 0x54, 0xe2, 0xf1, 0x88, 0xf0, 0x61, 0x6b, 0x76, 0xef, 0xcd, 0xb4, 0x2a,
	0xcd, 0xa5, 0x3f, 0x1e, 0x11, 0xcc, 0x15, 0xd1, 0x7d, 0x28, 0xdb, 0x67, 0x2e, 0x1f, 0xc3, 0xfc,
	0xfc, 0x62, 0xc6, 0x67, 0x62, 0x27, 0xb2, 0xe5, 0x0c, 0xe6, 0xc5, 0x4e, 0x64, 0x1b, 0x0f, 0xa0,
	0xc2, 0xb0, 0x58, 0x22, 0x07, 0x27, 0x7d, 0x96, 0x88, 0x82, 0x6e, 0x81, 0xb6, 0x77, 0xd8, 0x37,
	0x31, 0x3e, 0x39, 0xea, 0xeb, 0xaa, 0xf1, 0x87, 0x0a, 0xe8, 0x38, 0xb6, 0x62, 0xd2, 0x1b, 0x58,
	0x81, 0x3b, 0x29, 0x7b, 0x57, 0x06, 0x2a, 0x6a, 0xde, 0x4e, 0x6b, 0x5e, 0x50, 0xcc, 0xc6, 0xaa,
	0x43, 0x39, 0x09, 0x7d, 0x99, 0x2d, 0x3b, 0xa2, 0x3b, 0x50, 0x3d, 0xb7, 0xfc, 0x44, 0xe4, 0xab,
	0x61, 0x41, 0x18, 0x78, 0x1a, 0x55, 0x0f, 0x9b, 0x22, 0xaa, 0x3a, 0x54, 0xb0, 0xb9, 0xb5, 0xa3,
	0xab, 0x99, 0xa2, 0x97, 0xd8, 0x79, 0xc7, 0xdc, 0x37, 0xfb, 0xa6, 0x5e, 0x46, 0x8b, 0x50, 0xef,
	0xbd, 0xfc, 0xfa, 0x15, 0xd7, 0xaa, 0xa0, 0x26, 0x00, 0xa3, 0xa4, 0x66, 0xd5, 0xf8, 0xab, 0x04,
	0x8b, 0xe6, 0x39, 0x09, 0xe2, 0x34, 0x81, 0xc7, 0xb9, 0x04, 0x5a, 0x32, 0x81, 0xac, 0x4a, 0x36,
	0xf4, 0x6f, 0x00, 0x45, 0x85, 0xdc, 0xe4, 0xe0, 0xac, 0x5c, 0x9a, 0xfc, 0xae, 0x82, 0xe7, 0x98,
	0xa1, 0x6d, 0x58, 0x1a, 0xe6, 0x3b, 0xca, 0xf3, 0x6f, 0x74, 0x97, 0xe7, 0xf7, 0x7b, 0x57, 0xc1,
	0xb3, 0x06, 0x68, 0x13, 0x9a, 0x8e, 0x17, 0xd9, 0xf4, 0x9c, 0x84, 0x63, 0x1e, 0xb4, 0x1c, 0x81,
	0xbb, 0x12, 0x62, 0x27, 0x27, 0xdc, 0x55, 0xf0, 0x8c, 0xba, 0xf1, 0x54, 0x16, 0x79, 0x09, 0x1a,
	0x99, 0xc0, 0x75, 0x85, 0xd5, 0x31, 0xf5, 0xaf, 0xab, 0x6c, 0x1a, 0x26, 0x50, 0x7a, 0x69, 0xbb,
	0x06, 0x55, 0xc2, 0xcd, 0x0f, 0xa0, 0x99, 0x77, 0x51, 0xf8, 0x87, 0x8b, 0xdd, 0x5e, 0x81, 0x3a,
	0x6f, 0xf0, 0x2b, 0xcf, 0x91, 0x0d, 0xaf, 0x71, 0x7a, 0xcf, 0x31, 0x8e, 0x41, 0x9f, 0xdd, 0x8c,
	0x68, 0xb3, 0xc8, 0x93, 0xbb, 0xe5, 0xf6, 0x9c, 0x65, 0x8a, 0x0b, 0xca, 0x59, 0xd0, 0xc9, 0x4e,
	0xdc, 0x2c, 0xf2, 0x2e, 0x01, 0x65, 0x62, 0x5c, 0x50, 0x36, 0x2c, 0x58, 0xcc, 0x6e, 0x4e, 0x96,
	0xa6, 0x9d, 0x84, 0x3c, 0xef, 0x32, 0x66, 0x47, 0x36, 0xd4, 0xf6, 0x70, 0xe4, 0xc7, 0x3c, 0xf5,
	0x3a, 0x16, 0x04, 0x7a, 0x04, 0x55, 0x7b, 0x60, 0x79, 0x41, 0xab, 0x7c, 0xb9, 0x37, 0xa1, 0x61,
	0xfc, 0x38, 0x75, 0x71, 0x28, 0x6e, 0xa0, 0xaa, 0x6f, 0x9d, 0x12, 0x5f, 0x16, 0x57, 0x10, 0x85,
	0xd5, 0xf1, 0x10, 0xaa, 0x36, 0xf5, 0x69, 0x28, 0x67, 0x49, 0xcf, 0xfc, 0xec, 0x3d, 0xc6, 0xc7,
	0x42, 0x6c, 0xfc, 0x34, 0x45, 0x67, 0x4e, 0x11, 0x82, 0xca, 0x59, 0x48, 0x87, 0x12, 0x9c, 0x9f,
	0x19, 0x76, 0x4c, 0x53, 0xec, 0x98, 0x4a, 0x5f, 0xe5, 0xa2, 0xaf, 0x4a, 0xce, 0x17, 0xc3, 0xcb,
	0xf9, 0xfa, 0x1e, 0xb4, 0x09, 0x8f, 0xd7, 0x85, 0x1b, 0xc9, 0x34, 0x38, 0x81, 0x3e, 0x02, 0x6d,
	0xe0, 0xb9, 0x03, 0xdf, 0x73, 0x07, 0xb1, 0xf4, 0x38, 0x65, 0xa0, 0x16, 0xd4, 0xbc, 0x60, 0x40,
	0x42, 0x4f, 0xdc, 0xbf, 0x75, 0x9c, 0x92, 0x46, 0x0f, 0xb4, 0x49, 0x6a, 0x6c, 0xbd, 0x9e, 0xd2,
	0xd0, 0x21, 0x29, 0xb6, 0xa4, 0x50, 0x1b, 0xe0, 0xd4, 0xb2, 0x7f, 0x76, 0x43, 0x9a, 0x04, 0x69,
	0xad, 0x32, 0x1c, 0x63, 0x1f, 0x60, 0x9f, 0xba, 0x07, 0x24, 0x8a, 0x2c, 0x97, 0x30, 0x14, 0x1a,
	0x7a, 0xae, 0x17, 0xa4, 0x28, 0x82, 0xe2, 0xf5, 0x27, 0xe7, 0x44, 0xcc, 0xf2, 0x2d, 0x2c, 0x08,
	0xd6, 0xf8, 0x61, 0xe4, 0xca, 0xa2, 0xb0, 0x63, 0xf7, 0x3f, 0x0d, 0xb4, 0xc9, 0xb3, 0x07, 0x7d,
	0x0c, 0x0d, 0x7e, 0xf7, 0xf5, 0x42, 0x62, 0xc5, 0x04, 0xe5, 0xee, 0xc3, 0xd5, 0x1c, 0x65, 0x28,
	0xe8, 0x11, 0x68, 0xe2, 0xa2, 0x24, 0x96, 0x73, 0x8d, 0xea, 0x63, 0x58, 0x9c, 0xa8, 0xee, 0x44,
	0xf6, 0x35, 0xda, 0x69, 0x14, 0x27, 0x23, 0xe7, 0xfa, 0x28, 0x3a, 0xd0, 0xcc, 0x28, 0xdf, 0x1c,
	0x7c, 0x87, 0xf8, 0xe4, 0x5a, 0xf0, 0xe7, 0x99, 0xb8, 0xb7, 0x7c, 0x1f, 0x2d, 0x17, 0xee, 0x5b,
	0x93, 0xbd, 0xf1, 0x56, 0x3f, 0xc8, 0xda, 0xf1, 0xc7, 0x85, 0xa1, 0xa0, 0xaf, 0x60, 0x29, 0x6b,
	0xcc, 0x42, 0x7b, 0x2f, 0xfb, 0x17, 0x80, 0x24, 0x3d, 0xfd, 0xaf, 0xa2, 0x4b, 0x21, 0x66, 0x43,
	0x9f, 0xb5, 0x66, 0x33, 0x7d, 0x73, 0xeb, 0xcf, 0x60, 0x99, 0x1f, 0x99, 0xcf, 0xbc, 0xff, 0xab,
	0x0b, 0x36, 0xcf, 0x4e, 0x78, 0xbe, 0xda, 0xee, 0x19, 0xdc, 0x2d, 0xd8, 0xf1, 0x55, 0x75, 0xb5,
	0xd9, 0x97, 0xb2, 0xf9, 0xa2, 0x99, 0xef, 0xdd, 0xa1, 0x67, 0x72, 0x16, 0x5e, 0x86, 0x84, 0xbc,
	0x21, 0x37, 0x2e, 0xce, 0x13, 0x39, 0xf8, 0xfd, 0x81, 0xf5, 0xcb, 0x8d, 0x8d, 0xa6, 0xbe, 0xe8,
	0x1b, 0x12, 0xdc, 0xd8, 0xac, 0x07, 0x8d, 0xcc, 0xdb, 0x13, 0xad, 0xe4, 0x1f, 0x8a, 0x99, 0xf7,
	0xe8, 0xea, 0xdd, 0xb9, 0x6f, 0x48, 0x43, 0xf9, 0x54, 0x45, 0xe6, 0x74, 0x7d, 0x5e, 0x87, 0x72,
	0xc9, 0x75, 0xce, 0x61, 0x36, 0x41, 0xe3, 0xd7, 0xe6, 0x75, 0x18, 0xb7, 0xe7, 0x3c, 0x4c, 0x38,
	0xc0, 0x36, 0xdc, 0x9a, 0x5c, 0xc0, 0x1c, 0x64, 0xfe, 0xcd, 0xbf, 0x7a, 0x49, 0x71, 0x0c, 0x65,
	0x5d, 0x45, 0xcf, 0xf9, 0xfa, 0x73, 0x49, 0xc8, 0x01, 0xd2, 0xb6, 0x4e, 0x37, 0xe2, 0x55, 0xc6,
	0xdb, 0xf7, 0xdf, 0x5e, 0xb4, 0xd5, 0xbf, 0x2f, 0xda, 0xea, 0xbf, 0x17, 0x6d, 0xf5, 0xf7, 0x77,
	0x6d, 0xf5, 0xed, 0xbb, 0xb6, 0xfa, 0x43, 0xad, 0xf3, 0x5c, 0xe8, 0x2e, 0xf0, 0xcf, 0x93, 0xff,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x29, 0xed, 0xfc, 0x94, 0x09, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ModuleAPIClient is the client API for ModuleAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ModuleAPIClient interface {
	// Query language
	// TODO: create API for bulk CRUD operations
	QueryCreate(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error)
	QueryRead(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error)
	QueryReadDsc(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error)
	QueryUpdate(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error)
	QueryUpdateDsc(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error)
	QueryDelete(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error)
	QueryReadAll(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*QueryMulti, error)
	QueryReadAllDsc(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*QueryMulti, error)
	QueryMutationNodes(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Query, error)
	QueryMutationEdges(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Query, error)
	QueryNodeMutationNodes(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error)
	QueryNodeMutationEdges(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error)
	QueryNodeMutationPath(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error)
	QueryDeleteAll(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*QueryMulti, error)
	QueryFreeze(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Query, error)
	QueryThaw(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Query, error)
	QueryFrozen(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Query, error)
	// Service management
	ServiceInit(ctx context.Context, in *ServiceInitRequest, opts ...grpc.CallOption) (ModuleAPI_ServiceInitClient, error)
	// Mutation/Discover management
	MutationInit(ctx context.Context, in *ServiceInitRequest, opts ...grpc.CallOption) (ModuleAPI_MutationInitClient, error)
	// Event management
	EventInit(ctx context.Context, in *ServiceInitRequest, opts ...grpc.CallOption) (ModuleAPI_EventInitClient, error)
	// Discovery management
	DiscoveryInit(ctx context.Context, opts ...grpc.CallOption) (ModuleAPI_DiscoveryInitClient, error)
	// Logging
	LoggerInit(ctx context.Context, opts ...grpc.CallOption) (ModuleAPI_LoggerInitClient, error)
}

type moduleAPIClient struct {
	cc *grpc.ClientConn
}

func NewModuleAPIClient(cc *grpc.ClientConn) ModuleAPIClient {
	return &moduleAPIClient{cc}
}

func (c *moduleAPIClient) QueryCreate(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/proto.ModuleAPI/QueryCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleAPIClient) QueryRead(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/proto.ModuleAPI/QueryRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleAPIClient) QueryReadDsc(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/proto.ModuleAPI/QueryReadDsc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleAPIClient) QueryUpdate(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/proto.ModuleAPI/QueryUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleAPIClient) QueryUpdateDsc(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/proto.ModuleAPI/QueryUpdateDsc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleAPIClient) QueryDelete(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/proto.ModuleAPI/QueryDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleAPIClient) QueryReadAll(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*QueryMulti, error) {
	out := new(QueryMulti)
	err := c.cc.Invoke(ctx, "/proto.ModuleAPI/QueryReadAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleAPIClient) QueryReadAllDsc(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*QueryMulti, error) {
	out := new(QueryMulti)
	err := c.cc.Invoke(ctx, "/proto.ModuleAPI/QueryReadAllDsc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleAPIClient) QueryMutationNodes(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/proto.ModuleAPI/QueryMutationNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleAPIClient) QueryMutationEdges(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/proto.ModuleAPI/QueryMutationEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleAPIClient) QueryNodeMutationNodes(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/proto.ModuleAPI/QueryNodeMutationNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleAPIClient) QueryNodeMutationEdges(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/proto.ModuleAPI/QueryNodeMutationEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleAPIClient) QueryNodeMutationPath(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/proto.ModuleAPI/QueryNodeMutationPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleAPIClient) QueryDeleteAll(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*QueryMulti, error) {
	out := new(QueryMulti)
	err := c.cc.Invoke(ctx, "/proto.ModuleAPI/QueryDeleteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleAPIClient) QueryFreeze(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/proto.ModuleAPI/QueryFreeze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleAPIClient) QueryThaw(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/proto.ModuleAPI/QueryThaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleAPIClient) QueryFrozen(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/proto.ModuleAPI/QueryFrozen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleAPIClient) ServiceInit(ctx context.Context, in *ServiceInitRequest, opts ...grpc.CallOption) (ModuleAPI_ServiceInitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ModuleAPI_serviceDesc.Streams[0], "/proto.ModuleAPI/ServiceInit", opts...)
	if err != nil {
		return nil, err
	}
	x := &moduleAPIServiceInitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ModuleAPI_ServiceInitClient interface {
	Recv() (*ServiceControl, error)
	grpc.ClientStream
}

type moduleAPIServiceInitClient struct {
	grpc.ClientStream
}

func (x *moduleAPIServiceInitClient) Recv() (*ServiceControl, error) {
	m := new(ServiceControl)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *moduleAPIClient) MutationInit(ctx context.Context, in *ServiceInitRequest, opts ...grpc.CallOption) (ModuleAPI_MutationInitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ModuleAPI_serviceDesc.Streams[1], "/proto.ModuleAPI/MutationInit", opts...)
	if err != nil {
		return nil, err
	}
	x := &moduleAPIMutationInitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ModuleAPI_MutationInitClient interface {
	Recv() (*MutationControl, error)
	grpc.ClientStream
}

type moduleAPIMutationInitClient struct {
	grpc.ClientStream
}

func (x *moduleAPIMutationInitClient) Recv() (*MutationControl, error) {
	m := new(MutationControl)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *moduleAPIClient) EventInit(ctx context.Context, in *ServiceInitRequest, opts ...grpc.CallOption) (ModuleAPI_EventInitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ModuleAPI_serviceDesc.Streams[2], "/proto.ModuleAPI/EventInit", opts...)
	if err != nil {
		return nil, err
	}
	x := &moduleAPIEventInitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ModuleAPI_EventInitClient interface {
	Recv() (*EventControl, error)
	grpc.ClientStream
}

type moduleAPIEventInitClient struct {
	grpc.ClientStream
}

func (x *moduleAPIEventInitClient) Recv() (*EventControl, error) {
	m := new(EventControl)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *moduleAPIClient) DiscoveryInit(ctx context.Context, opts ...grpc.CallOption) (ModuleAPI_DiscoveryInitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ModuleAPI_serviceDesc.Streams[3], "/proto.ModuleAPI/DiscoveryInit", opts...)
	if err != nil {
		return nil, err
	}
	x := &moduleAPIDiscoveryInitClient{stream}
	return x, nil
}

type ModuleAPI_DiscoveryInitClient interface {
	Send(*DiscoveryEvent) error
	CloseAndRecv() (*types.Empty, error)
	grpc.ClientStream
}

type moduleAPIDiscoveryInitClient struct {
	grpc.ClientStream
}

func (x *moduleAPIDiscoveryInitClient) Send(m *DiscoveryEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *moduleAPIDiscoveryInitClient) CloseAndRecv() (*types.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(types.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *moduleAPIClient) LoggerInit(ctx context.Context, opts ...grpc.CallOption) (ModuleAPI_LoggerInitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ModuleAPI_serviceDesc.Streams[4], "/proto.ModuleAPI/LoggerInit", opts...)
	if err != nil {
		return nil, err
	}
	x := &moduleAPILoggerInitClient{stream}
	return x, nil
}

type ModuleAPI_LoggerInitClient interface {
	Send(*LogMessage) error
	CloseAndRecv() (*types.Empty, error)
	grpc.ClientStream
}

type moduleAPILoggerInitClient struct {
	grpc.ClientStream
}

func (x *moduleAPILoggerInitClient) Send(m *LogMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *moduleAPILoggerInitClient) CloseAndRecv() (*types.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(types.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ModuleAPIServer is the server API for ModuleAPI service.
type ModuleAPIServer interface {
	// Query language
	// TODO: create API for bulk CRUD operations
	QueryCreate(context.Context, *Query) (*Query, error)
	QueryRead(context.Context, *Query) (*Query, error)
	QueryReadDsc(context.Context, *Query) (*Query, error)
	QueryUpdate(context.Context, *Query) (*Query, error)
	QueryUpdateDsc(context.Context, *Query) (*Query, error)
	QueryDelete(context.Context, *Query) (*Query, error)
	QueryReadAll(context.Context, *types.Empty) (*QueryMulti, error)
	QueryReadAllDsc(context.Context, *types.Empty) (*QueryMulti, error)
	QueryMutationNodes(context.Context, *types.Empty) (*Query, error)
	QueryMutationEdges(context.Context, *types.Empty) (*Query, error)
	QueryNodeMutationNodes(context.Context, *Query) (*Query, error)
	QueryNodeMutationEdges(context.Context, *Query) (*Query, error)
	QueryNodeMutationPath(context.Context, *Query) (*Query, error)
	QueryDeleteAll(context.Context, *types.Empty) (*QueryMulti, error)
	QueryFreeze(context.Context, *types.Empty) (*Query, error)
	QueryThaw(context.Context, *types.Empty) (*Query, error)
	QueryFrozen(context.Context, *types.Empty) (*Query, error)
	// Service management
	ServiceInit(*ServiceInitRequest, ModuleAPI_ServiceInitServer) error
	// Mutation/Discover management
	MutationInit(*ServiceInitRequest, ModuleAPI_MutationInitServer) error
	// Event management
	EventInit(*ServiceInitRequest, ModuleAPI_EventInitServer) error
	// Discovery management
	DiscoveryInit(ModuleAPI_DiscoveryInitServer) error
	// Logging
	LoggerInit(ModuleAPI_LoggerInitServer) error
}

// UnimplementedModuleAPIServer can be embedded to have forward compatible implementations.
type UnimplementedModuleAPIServer struct {
}

func (*UnimplementedModuleAPIServer) QueryCreate(ctx context.Context, req *Query) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCreate not implemented")
}
func (*UnimplementedModuleAPIServer) QueryRead(ctx context.Context, req *Query) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRead not implemented")
}
func (*UnimplementedModuleAPIServer) QueryReadDsc(ctx context.Context, req *Query) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryReadDsc not implemented")
}
func (*UnimplementedModuleAPIServer) QueryUpdate(ctx context.Context, req *Query) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUpdate not implemented")
}
func (*UnimplementedModuleAPIServer) QueryUpdateDsc(ctx context.Context, req *Query) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUpdateDsc not implemented")
}
func (*UnimplementedModuleAPIServer) QueryDelete(ctx context.Context, req *Query) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDelete not implemented")
}
func (*UnimplementedModuleAPIServer) QueryReadAll(ctx context.Context, req *types.Empty) (*QueryMulti, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryReadAll not implemented")
}
func (*UnimplementedModuleAPIServer) QueryReadAllDsc(ctx context.Context, req *types.Empty) (*QueryMulti, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryReadAllDsc not implemented")
}
func (*UnimplementedModuleAPIServer) QueryMutationNodes(ctx context.Context, req *types.Empty) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMutationNodes not implemented")
}
func (*UnimplementedModuleAPIServer) QueryMutationEdges(ctx context.Context, req *types.Empty) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMutationEdges not implemented")
}
func (*UnimplementedModuleAPIServer) QueryNodeMutationNodes(ctx context.Context, req *Query) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNodeMutationNodes not implemented")
}
func (*UnimplementedModuleAPIServer) QueryNodeMutationEdges(ctx context.Context, req *Query) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNodeMutationEdges not implemented")
}
func (*UnimplementedModuleAPIServer) QueryNodeMutationPath(ctx context.Context, req *Query) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNodeMutationPath not implemented")
}
func (*UnimplementedModuleAPIServer) QueryDeleteAll(ctx context.Context, req *types.Empty) (*QueryMulti, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDeleteAll not implemented")
}
func (*UnimplementedModuleAPIServer) QueryFreeze(ctx context.Context, req *types.Empty) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFreeze not implemented")
}
func (*UnimplementedModuleAPIServer) QueryThaw(ctx context.Context, req *types.Empty) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryThaw not implemented")
}
func (*UnimplementedModuleAPIServer) QueryFrozen(ctx context.Context, req *types.Empty) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFrozen not implemented")
}
func (*UnimplementedModuleAPIServer) ServiceInit(req *ServiceInitRequest, srv ModuleAPI_ServiceInitServer) error {
	return status.Errorf(codes.Unimplemented, "method ServiceInit not implemented")
}
func (*UnimplementedModuleAPIServer) MutationInit(req *ServiceInitRequest, srv ModuleAPI_MutationInitServer) error {
	return status.Errorf(codes.Unimplemented, "method MutationInit not implemented")
}
func (*UnimplementedModuleAPIServer) EventInit(req *ServiceInitRequest, srv ModuleAPI_EventInitServer) error {
	return status.Errorf(codes.Unimplemented, "method EventInit not implemented")
}
func (*UnimplementedModuleAPIServer) DiscoveryInit(srv ModuleAPI_DiscoveryInitServer) error {
	return status.Errorf(codes.Unimplemented, "method DiscoveryInit not implemented")
}
func (*UnimplementedModuleAPIServer) LoggerInit(srv ModuleAPI_LoggerInitServer) error {
	return status.Errorf(codes.Unimplemented, "method LoggerInit not implemented")
}

func RegisterModuleAPIServer(s *grpc.Server, srv ModuleAPIServer) {
	s.RegisterService(&_ModuleAPI_serviceDesc, srv)
}

func _ModuleAPI_QueryCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleAPIServer).QueryCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ModuleAPI/QueryCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleAPIServer).QueryCreate(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleAPI_QueryRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleAPIServer).QueryRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ModuleAPI/QueryRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleAPIServer).QueryRead(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleAPI_QueryReadDsc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleAPIServer).QueryReadDsc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ModuleAPI/QueryReadDsc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleAPIServer).QueryReadDsc(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleAPI_QueryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleAPIServer).QueryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ModuleAPI/QueryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleAPIServer).QueryUpdate(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleAPI_QueryUpdateDsc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleAPIServer).QueryUpdateDsc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ModuleAPI/QueryUpdateDsc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleAPIServer).QueryUpdateDsc(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleAPI_QueryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleAPIServer).QueryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ModuleAPI/QueryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleAPIServer).QueryDelete(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleAPI_QueryReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleAPIServer).QueryReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ModuleAPI/QueryReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleAPIServer).QueryReadAll(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleAPI_QueryReadAllDsc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleAPIServer).QueryReadAllDsc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ModuleAPI/QueryReadAllDsc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleAPIServer).QueryReadAllDsc(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleAPI_QueryMutationNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleAPIServer).QueryMutationNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ModuleAPI/QueryMutationNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleAPIServer).QueryMutationNodes(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleAPI_QueryMutationEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleAPIServer).QueryMutationEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ModuleAPI/QueryMutationEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleAPIServer).QueryMutationEdges(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleAPI_QueryNodeMutationNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleAPIServer).QueryNodeMutationNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ModuleAPI/QueryNodeMutationNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleAPIServer).QueryNodeMutationNodes(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleAPI_QueryNodeMutationEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleAPIServer).QueryNodeMutationEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ModuleAPI/QueryNodeMutationEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleAPIServer).QueryNodeMutationEdges(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleAPI_QueryNodeMutationPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleAPIServer).QueryNodeMutationPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ModuleAPI/QueryNodeMutationPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleAPIServer).QueryNodeMutationPath(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleAPI_QueryDeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleAPIServer).QueryDeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ModuleAPI/QueryDeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleAPIServer).QueryDeleteAll(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleAPI_QueryFreeze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleAPIServer).QueryFreeze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ModuleAPI/QueryFreeze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleAPIServer).QueryFreeze(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleAPI_QueryThaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleAPIServer).QueryThaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ModuleAPI/QueryThaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleAPIServer).QueryThaw(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleAPI_QueryFrozen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleAPIServer).QueryFrozen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ModuleAPI/QueryFrozen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleAPIServer).QueryFrozen(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleAPI_ServiceInit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServiceInitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModuleAPIServer).ServiceInit(m, &moduleAPIServiceInitServer{stream})
}

type ModuleAPI_ServiceInitServer interface {
	Send(*ServiceControl) error
	grpc.ServerStream
}

type moduleAPIServiceInitServer struct {
	grpc.ServerStream
}

func (x *moduleAPIServiceInitServer) Send(m *ServiceControl) error {
	return x.ServerStream.SendMsg(m)
}

func _ModuleAPI_MutationInit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServiceInitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModuleAPIServer).MutationInit(m, &moduleAPIMutationInitServer{stream})
}

type ModuleAPI_MutationInitServer interface {
	Send(*MutationControl) error
	grpc.ServerStream
}

type moduleAPIMutationInitServer struct {
	grpc.ServerStream
}

func (x *moduleAPIMutationInitServer) Send(m *MutationControl) error {
	return x.ServerStream.SendMsg(m)
}

func _ModuleAPI_EventInit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServiceInitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModuleAPIServer).EventInit(m, &moduleAPIEventInitServer{stream})
}

type ModuleAPI_EventInitServer interface {
	Send(*EventControl) error
	grpc.ServerStream
}

type moduleAPIEventInitServer struct {
	grpc.ServerStream
}

func (x *moduleAPIEventInitServer) Send(m *EventControl) error {
	return x.ServerStream.SendMsg(m)
}

func _ModuleAPI_DiscoveryInit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModuleAPIServer).DiscoveryInit(&moduleAPIDiscoveryInitServer{stream})
}

type ModuleAPI_DiscoveryInitServer interface {
	SendAndClose(*types.Empty) error
	Recv() (*DiscoveryEvent, error)
	grpc.ServerStream
}

type moduleAPIDiscoveryInitServer struct {
	grpc.ServerStream
}

func (x *moduleAPIDiscoveryInitServer) SendAndClose(m *types.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *moduleAPIDiscoveryInitServer) Recv() (*DiscoveryEvent, error) {
	m := new(DiscoveryEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ModuleAPI_LoggerInit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModuleAPIServer).LoggerInit(&moduleAPILoggerInitServer{stream})
}

type ModuleAPI_LoggerInitServer interface {
	SendAndClose(*types.Empty) error
	Recv() (*LogMessage, error)
	grpc.ServerStream
}

type moduleAPILoggerInitServer struct {
	grpc.ServerStream
}

func (x *moduleAPILoggerInitServer) SendAndClose(m *types.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *moduleAPILoggerInitServer) Recv() (*LogMessage, error) {
	m := new(LogMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ModuleAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ModuleAPI",
	HandlerType: (*ModuleAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryCreate",
			Handler:    _ModuleAPI_QueryCreate_Handler,
		},
		{
			MethodName: "QueryRead",
			Handler:    _ModuleAPI_QueryRead_Handler,
		},
		{
			MethodName: "QueryReadDsc",
			Handler:    _ModuleAPI_QueryReadDsc_Handler,
		},
		{
			MethodName: "QueryUpdate",
			Handler:    _ModuleAPI_QueryUpdate_Handler,
		},
		{
			MethodName: "QueryUpdateDsc",
			Handler:    _ModuleAPI_QueryUpdateDsc_Handler,
		},
		{
			MethodName: "QueryDelete",
			Handler:    _ModuleAPI_QueryDelete_Handler,
		},
		{
			MethodName: "QueryReadAll",
			Handler:    _ModuleAPI_QueryReadAll_Handler,
		},
		{
			MethodName: "QueryReadAllDsc",
			Handler:    _ModuleAPI_QueryReadAllDsc_Handler,
		},
		{
			MethodName: "QueryMutationNodes",
			Handler:    _ModuleAPI_QueryMutationNodes_Handler,
		},
		{
			MethodName: "QueryMutationEdges",
			Handler:    _ModuleAPI_QueryMutationEdges_Handler,
		},
		{
			MethodName: "QueryNodeMutationNodes",
			Handler:    _ModuleAPI_QueryNodeMutationNodes_Handler,
		},
		{
			MethodName: "QueryNodeMutationEdges",
			Handler:    _ModuleAPI_QueryNodeMutationEdges_Handler,
		},
		{
			MethodName: "QueryNodeMutationPath",
			Handler:    _ModuleAPI_QueryNodeMutationPath_Handler,
		},
		{
			MethodName: "QueryDeleteAll",
			Handler:    _ModuleAPI_QueryDeleteAll_Handler,
		},
		{
			MethodName: "QueryFreeze",
			Handler:    _ModuleAPI_QueryFreeze_Handler,
		},
		{
			MethodName: "QueryThaw",
			Handler:    _ModuleAPI_QueryThaw_Handler,
		},
		{
			MethodName: "QueryFrozen",
			Handler:    _ModuleAPI_QueryFrozen_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServiceInit",
			Handler:       _ModuleAPI_ServiceInit_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MutationInit",
			Handler:       _ModuleAPI_MutationInit_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventInit",
			Handler:       _ModuleAPI_EventInit_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DiscoveryInit",
			Handler:       _ModuleAPI_DiscoveryInit_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "LoggerInit",
			Handler:       _ModuleAPI_LoggerInit_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ModuleAPI.proto",
}

func (m *Query) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Query) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Query) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Filter) > 0 {
		for iNdEx := len(m.Filter) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Filter[iNdEx])
			copy(dAtA[i:], m.Filter[iNdEx])
			i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Filter[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.URL) > 0 {
		i -= len(m.URL)
		copy(dAtA[i:], m.URL)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.URL)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Query_Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Query_Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModuleAPI(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Query_Text) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Query_Text) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Text)
	copy(dAtA[i:], m.Text)
	i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Text)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *Query_Bool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Query_Bool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Bool {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *Query_MutationNodeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Query_MutationNodeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MutationNodeList != nil {
		{
			size, err := m.MutationNodeList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModuleAPI(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Query_MutationEdgeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Query_MutationEdgeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MutationEdgeList != nil {
		{
			size, err := m.MutationEdgeList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModuleAPI(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Query_MutationPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Query_MutationPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MutationPath != nil {
		{
			size, err := m.MutationPath.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModuleAPI(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *QueryMulti) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMulti) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMulti) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Queries) > 0 {
		for iNdEx := len(m.Queries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Queries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModuleAPI(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServiceInitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceInitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceInitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceControl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceControl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceControl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModuleAPI(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Command != 0 {
		i = encodeVarintModuleAPI(dAtA, i, uint64(m.Command))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MutationControl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MutationControl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MutationControl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Dsc != nil {
		{
			size, err := m.Dsc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModuleAPI(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Cfg != nil {
		{
			size, err := m.Cfg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModuleAPI(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintModuleAPI(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StateChangeControl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateChangeControl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateChangeControl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintModuleAPI(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventControl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventControl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventControl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Event != nil {
		{
			size := m.Event.Size()
			i -= size
			if _, err := m.Event.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintModuleAPI(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventControl_StateChangeControl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventControl_StateChangeControl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StateChangeControl != nil {
		{
			size, err := m.StateChangeControl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModuleAPI(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *EventControl_MutationControl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventControl_MutationControl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MutationControl != nil {
		{
			size, err := m.MutationControl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModuleAPI(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *EventControl_DiscoveryEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventControl_DiscoveryEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DiscoveryEvent != nil {
		{
			size, err := m.DiscoveryEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModuleAPI(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DiscoveryEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoveryEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoveryEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ValueId) > 0 {
		i -= len(m.ValueId)
		copy(dAtA[i:], m.ValueId)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.ValueId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MutationNodeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MutationNodeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MutationNodeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MutationNodeList) > 0 {
		for iNdEx := len(m.MutationNodeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MutationNodeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModuleAPI(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MutationEdgeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MutationEdgeList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MutationEdgeList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MutationEdgeList) > 0 {
		for iNdEx := len(m.MutationEdgeList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MutationEdgeList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModuleAPI(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MutationPath) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MutationPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MutationPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Chain) > 0 {
		for iNdEx := len(m.Chain) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Chain[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModuleAPI(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Cmplt {
		i--
		if m.Cmplt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Cur != 0 {
		i = encodeVarintModuleAPI(dAtA, i, uint64(m.Cur))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MutationNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MutationNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MutationNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Color != nil {
		{
			size, err := m.Color.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModuleAPI(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MutationEdge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MutationEdge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MutationEdge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Color != nil {
		{
			size, err := m.Color.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModuleAPI(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EdgeColor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeColor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdgeColor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Inherit {
		i--
		if m.Inherit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Highlight) > 0 {
		i -= len(m.Highlight)
		copy(dAtA[i:], m.Highlight)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Highlight)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeColor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeColor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeColor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Background) > 0 {
		i -= len(m.Background)
		copy(dAtA[i:], m.Background)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Background)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Border) > 0 {
		i -= len(m.Border)
		copy(dAtA[i:], m.Border)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Border)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Level != 0 {
		i = encodeVarintModuleAPI(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintModuleAPI(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintModuleAPI(dAtA []byte, offset int, v uint64) int {
	offset -= sovModuleAPI(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	if len(m.Filter) > 0 {
		for _, s := range m.Filter {
			l = len(s)
			n += 1 + l + sovModuleAPI(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Query_Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	return n
}
func (m *Query_Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	n += 1 + l + sovModuleAPI(uint64(l))
	return n
}
func (m *Query_Bool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Query_MutationNodeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MutationNodeList != nil {
		l = m.MutationNodeList.Size()
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	return n
}
func (m *Query_MutationEdgeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MutationEdgeList != nil {
		l = m.MutationEdgeList.Size()
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	return n
}
func (m *Query_MutationPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MutationPath != nil {
		l = m.MutationPath.Size()
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	return n
}
func (m *QueryMulti) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.Size()
			n += 1 + l + sovModuleAPI(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceInitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceControl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Command != 0 {
		n += 1 + sovModuleAPI(uint64(m.Command))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MutationControl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovModuleAPI(uint64(m.Type))
	}
	if m.Cfg != nil {
		l = m.Cfg.Size()
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	if m.Dsc != nil {
		l = m.Dsc.Size()
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateChangeControl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovModuleAPI(uint64(m.Type))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventControl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovModuleAPI(uint64(m.Type))
	}
	if m.Event != nil {
		n += m.Event.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventControl_StateChangeControl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StateChangeControl != nil {
		l = m.StateChangeControl.Size()
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	return n
}
func (m *EventControl_MutationControl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MutationControl != nil {
		l = m.MutationControl.Size()
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	return n
}
func (m *EventControl_DiscoveryEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiscoveryEvent != nil {
		l = m.DiscoveryEvent.Size()
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	return n
}
func (m *DiscoveryEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	l = len(m.ValueId)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MutationNodeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MutationNodeList) > 0 {
		for _, e := range m.MutationNodeList {
			l = e.Size()
			n += 1 + l + sovModuleAPI(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MutationEdgeList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MutationEdgeList) > 0 {
		for _, e := range m.MutationEdgeList {
			l = e.Size()
			n += 1 + l + sovModuleAPI(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MutationPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cur != 0 {
		n += 1 + sovModuleAPI(uint64(m.Cur))
	}
	if m.Cmplt {
		n += 2
	}
	if len(m.Chain) > 0 {
		for _, e := range m.Chain {
			l = e.Size()
			n += 1 + l + sovModuleAPI(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MutationNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	if m.Color != nil {
		l = m.Color.Size()
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MutationEdge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	if m.Color != nil {
		l = m.Color.Size()
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EdgeColor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	l = len(m.Highlight)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	if m.Inherit {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeColor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Border)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	l = len(m.Background)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovModuleAPI(uint64(m.Level))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovModuleAPI(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovModuleAPI(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModuleAPI(x uint64) (n int) {
	return sovModuleAPI(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Query) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleAPI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Query: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Query: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Node{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Query_Node{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = &Query_Text{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Payload = &Query_Bool{b}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutationNodeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MutationNodeList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Query_MutationNodeList{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutationEdgeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MutationEdgeList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Query_MutationEdgeList{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutationPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MutationPath{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Query_MutationPath{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = append(m.Filter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleAPI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMulti) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleAPI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMulti: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMulti: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, &Query{})
			if err := m.Queries[len(m.Queries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleAPI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceInitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleAPI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceInitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceInitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleAPI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceControl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleAPI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceControl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceControl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			m.Command = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Command |= ServiceControl_Command(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &types.Any{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleAPI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MutationControl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleAPI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MutationControl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MutationControl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MutationControl_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cfg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cfg == nil {
				m.Cfg = &Node{}
			}
			if err := m.Cfg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dsc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dsc == nil {
				m.Dsc = &Node{}
			}
			if err := m.Dsc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleAPI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateChangeControl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleAPI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateChangeControl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateChangeControl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= StateChangeControl_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleAPI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventControl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleAPI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventControl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventControl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= EventControl_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateChangeControl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StateChangeControl{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &EventControl_StateChangeControl{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutationControl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MutationControl{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &EventControl_MutationControl{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DiscoveryEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &EventControl_DiscoveryEvent{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleAPI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoveryEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleAPI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoveryEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoveryEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleAPI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MutationNodeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleAPI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MutationNodeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MutationNodeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutationNodeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MutationNodeList = append(m.MutationNodeList, &MutationNode{})
			if err := m.MutationNodeList[len(m.MutationNodeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleAPI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MutationEdgeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleAPI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MutationEdgeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MutationEdgeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutationEdgeList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MutationEdgeList = append(m.MutationEdgeList, &MutationEdge{})
			if err := m.MutationEdgeList[len(m.MutationEdgeList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleAPI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MutationPath) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleAPI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MutationPath: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MutationPath: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cur", wireType)
			}
			m.Cur = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cur |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmplt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cmplt = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = append(m.Chain, &MutationEdge{})
			if err := m.Chain[len(m.Chain)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleAPI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MutationNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleAPI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MutationNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MutationNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Color == nil {
				m.Color = &NodeColor{}
			}
			if err := m.Color.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleAPI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MutationEdge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleAPI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MutationEdge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MutationEdge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Color == nil {
				m.Color = &EdgeColor{}
			}
			if err := m.Color.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleAPI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EdgeColor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleAPI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeColor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeColor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Highlight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Highlight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inherit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inherit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipModuleAPI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeColor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleAPI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeColor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeColor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Border", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Border = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Background = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleAPI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleAPI
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleAPI
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleAPI(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleAPI
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModuleAPI(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModuleAPI
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModuleAPI
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModuleAPI
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModuleAPI
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModuleAPI
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModuleAPI        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModuleAPI          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModuleAPI = fmt.Errorf("proto: unexpected end of group")
)
