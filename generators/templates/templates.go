// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/app/includes.go.tpl
// templates/app/main.go.tpl
// templates/app/pprof.go.tpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _appIncludesGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8d\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\xa7\x07\x48\x0e\x61\x8b\xb8\xd0\x6e\x8a\x5b\x99\x9a\xa1\x94\xa6\x93\x92\x46\x50\xc2\xdc\x5d\x02\x82\xee\xdc\xbe\x79\xf3\xbe\x73\x38\x44\xcf\x98\x58\x38\x51\x66\x8f\xf1\x85\x25\xd1\xc2\x82\x52\x60\x8f\x21\x8e\x14\xec\x95\xd3\x3e\x47\x81\xaa\x45\xdb\xe3\xd2\x0f\xe8\xda\xd3\x60\x36\xba\x2f\x34\x31\x56\x9a\xc5\x18\xe7\xd0\x3d\x33\x4b\x55\x77\x53\x0a\x12\xc9\xc4\xb0\x5f\x08\x55\x33\xaf\x5b\x4c\x19\x37\x34\x75\x00\xaa\x4d\x55\x59\x7c\x3d\xd6\xc6\x39\xfa\x47\xe0\xdf\xc0\x87\xfc\xfd\x7e\x07\x00\x00\xff\xff\x47\x33\x1f\x42\xce\x00\x00\x00")

func appIncludesGoTplBytes() ([]byte, error) {
	return bindataRead(
		_appIncludesGoTpl,
		"app/includes.go.tpl",
	)
}

func appIncludesGoTpl() (*asset, error) {
	bytes, err := appIncludesGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/includes.go.tpl", size: 206, mode: os.FileMode(420), modTime: time.Unix(1618851406, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appMainGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x7b\x6f\x73\xdb\x36\xb6\xf7\x6b\xf1\x53\x9c\x72\x26\x59\xaa\xa5\xa9\xa4\x4d\xbb\xcf\xaa\xe3\xed\xa4\xb6\x93\x47\xf7\x26\xb6\xc6\x4e\xda\xd9\x49\x33\x19\x88\x04\x25\x5c\x53\x00\x17\x00\xad\xa8\xae\xbe\xfb\x9d\x73\x00\x90\x14\x25\x27\xe9\xee\xbd\x33\xb7\x33\x49\x6c\x10\x38\xf8\x9d\x83\x83\xf3\x17\x9d\x4c\xe0\x4c\x15\x1c\x96\x5c\x72\xcd\x2c\x2f\x60\xb1\x85\x5b\xcd\x6e\xb9\x84\xfb\x7b\xc8\x5e\x56\x6a\xc1\xaa\xec\x17\xae\x8d\x50\x12\x76\xbb\x0c\xce\xaf\xe0\xf2\xea\x0d\x5c\x9c\xcf\xde\x44\x51\xcd\xf2\x5b\xb6\xe4\xb0\x66\x42\x46\x91\x58\xd7\x4a\x5b\x48\xa2\x51\xcc\x65\xae\x0a\x21\x97\x93\xff\x32\x4a\xc6\xd1\x28\x2e\x2b\xb6\xa4\x7f\xd7\x16\xff\x11\x6a\x22\x54\x63\x45\x85\xbf\x48\x4e\x63\xca\xe0\xdf\x35\xb3\xab\x49\x29\x2a\x8e\x3f\xe0\x80\xe6\x65\xc5\x73\x9a\x61\xc5\x9a\xc7\x51\x34\x8a\x97\xc2\xae\x9a\x45\x96\xab\xf5\x24\x57\x9a\x2b\x33\x59\xaa\x13\xb3\x35\x96\xaf\x8b\x49\xc1\xf8\x9a\x36\xad\xed\xb6\xe6\x06\xfa\xb3\x97\x6a\xa9\x26\xb5\x56\x56\x2d\x9a\x72\x42\xdf\xe3\x7d\x7a\x8e\xfb\x93\x55\x9d\x23\xcd\x52\xe9\xdb\x87\x27\xb8\x1f\x09\xc2\x67\x27\x55\x62\xd1\xdb\x4f\xd5\xb7\xcb\x4c\xc8\xc9\x96\xad\xab\xec\xee\x5b\x64\xea\x03\xa0\x20\x26\x2b\x6b\xeb\x49\x5d\x6b\x55\xe2\x60\x5e\x2f\xe0\xf3\x9b\x3b\x8e\x3e\x0b\x81\x7f\xb4\x5c\xe2\x41\x9a\x89\xa8\xef\x9e\xc5\xd1\x08\xff\xb1\x9f\xd9\x60\xb0\x6a\x92\x37\xc6\xaa\x75\x60\x45\x7f\x16\xe0\x5a\x15\x4d\xc5\xcd\x44\x73\x63\x59\x2d\xe2\x68\xd4\x34\xa2\xd8\x5b\x64\x98\x55\x5a\x4c\x96\x2a\xc3\x4f\x71\x34\x8e\xa2\x5c\x49\x63\x21\x28\xde\x29\xc4\xa8\x8e\x9d\x1e\xc6\x51\x84\x08\xe0\x75\x63\x99\x15\x4a\x9e\x29\x59\x8a\x25\x18\xab\x9b\xdc\xc2\x7d\x34\x3a\x17\x86\x2d\x2a\x0e\x0b\xa5\x2a\x68\xff\x9b\x4c\x20\x57\xeb\xba\xe2\x96\x57\x5b\x28\xfc\x1c\xbb\xe2\xb0\xf6\x84\xa2\xd1\x1b\xb1\xe6\xaa\xb1\x80\xca\x96\x9d\x37\x9a\x86\x71\xa5\xba\xe3\x5a\x8b\xc2\xcd\xb7\x6e\x56\x34\x9a\x4c\x60\x83\x17\x60\x0b\xac\xaa\xd4\x26\xcc\x12\x72\x09\x6b\xa5\x71\xb2\x90\x4b\x03\xfc\x8e\x4b\xdb\xb0\xaa\xda\x46\x3b\x8f\xfd\x86\xeb\x3b\x91\xf3\x99\x34\x96\xc9\x9c\x3f\xc8\x02\x04\x26\x26\x93\x3d\xc8\x9b\x95\xaa\x38\x08\xbf\x1c\x92\x52\x69\x28\x78\xc9\x9a\xca\x9a\x71\x34\x7a\x4d\x72\x47\xae\x8d\xd5\x08\x67\x32\x01\xc9\xd6\x1c\x54\xe9\x38\x76\xdf\xed\x4a\x18\xb8\x99\x81\x30\xb0\x60\x86\x17\xa0\x64\x0a\x4a\x56\x5b\x90\x9c\x17\xbc\x80\xcd\x8a\x4b\xa4\x2b\x24\x12\x91\x7c\xd3\x6e\x69\xa2\x51\x90\xbf\x81\x35\xab\xdf\xb9\x8d\xde\xef\x1f\x0a\xf2\x3b\x99\xc0\x73\xb8\x6e\x24\x4a\x2d\xf0\xc9\xad\x69\x45\x6a\x00\xc1\x7b\xc3\x23\xa4\xe5\x5a\xb2\xca\x80\x42\xbe\x98\x05\x63\x99\xb6\x4d\x8d\x64\x2e\x95\xe5\xd3\x20\xf1\x4e\xa8\xb0\x61\xd2\x82\x55\x90\x2b\x79\xc7\xb5\x75\x6c\x59\x05\x0c\xc2\x6d\x07\xa3\x40\x58\xc8\x55\x53\x15\xb0\xe0\x60\xb8\x16\xac\x12\xbf\xf3\x02\xe7\x49\x2e\x96\xab\x85\xd2\x06\xee\x04\x83\xe5\xf5\xfc\xcc\x1d\xd2\x00\x74\x7b\x38\x2f\x34\xe7\xbf\xf3\x4e\xb3\xe8\x8c\xa2\xd1\xec\x1c\xf6\xff\x43\x85\xce\xde\xbe\x9d\x9d\xa3\xf8\xaf\x1a\x0d\x6a\x23\x41\xa2\xcd\x9d\x9d\x47\xa3\xd9\x7c\x30\x5d\x72\x9b\xb9\x41\xa7\xaa\xeb\x46\x8a\xdc\x4b\x78\x36\xc7\x05\xcf\xe7\xb3\x07\x17\xcc\xe6\x74\xb2\xfe\xa6\x81\x59\x11\xaf\x95\x30\x96\x4b\x40\xdd\x7e\xa5\x96\xaf\xf8\x1d\xef\x6e\x44\x23\xa4\x8d\x46\x73\xa6\xb9\xb4\x07\x54\xa3\xd1\xa5\x9a\x6b\x5e\x8a\x8f\x7b\x5c\xba\xbd\x82\x76\x56\x6a\x09\x35\x4d\xfa\x29\x1a\xdd\x14\x97\xca\x8a\x72\x7b\x64\xbe\x07\xb3\xe1\x20\xdd\x14\x6f\xae\x71\x95\x65\x96\xbf\x10\x55\x2b\xce\x4e\x61\xe7\xcc\xae\xf0\x78\x0c\x4e\x01\x74\x0b\x90\xa0\x4b\x19\x47\xa3\xc1\xf5\xd9\xd3\xc0\xa3\x57\x0b\x15\xf1\x8e\x69\x40\x57\x64\x7a\x47\x99\x97\x4b\xb7\xb9\x5b\x1c\x8d\xca\x70\xb6\xee\x4c\x45\x61\xac\xee\x60\xe1\xc0\x1e\x4e\x34\xa3\x07\x03\x28\xff\xde\x40\x55\x79\xb1\x3b\x81\x4b\xe5\x44\xe6\x77\xa8\x83\xfc\xc3\xf4\x5a\xe7\x7d\xad\x32\x85\x97\x99\xff\x95\x84\xd1\x9b\x7e\xe7\xed\xa2\xfb\xee\xd9\x34\xdc\xbe\x20\x4e\x7b\x72\xa1\xef\x51\xd9\xc8\x9c\xa4\x30\x33\x37\xdc\x26\xa5\xa7\x33\x76\xa7\x75\x1f\x8d\x3e\xa4\xb8\x1a\xa6\xa7\x2d\x91\x77\xe5\xfb\x68\xa4\xb9\x6d\xb4\xc4\x31\xdc\x83\xa8\x34\x86\x2d\xf9\xc5\x47\x61\xd1\xfa\xac\xe9\xaa\x22\xa9\x14\x18\x64\x59\x46\x37\xb9\x64\x39\xbf\xdf\x8d\x91\x6e\xb9\xb6\xd9\x5c\x0b\x69\xcb\x24\x7e\xc1\x2c\xab\x80\x6b\xad\xf4\x14\xe2\x6f\xdc\xf2\x6f\xe2\xdf\x64\x9c\x02\xcb\xb2\x6c\x1c\x8d\x10\xa2\x9b\x7f\xee\xcd\x5a\x32\x8e\x46\xca\x64\xb4\xe1\xd3\xb1\xb7\x2c\x8b\x46\x54\x05\x30\x59\x40\xad\xea\xa6\x42\xd9\x30\xd0\xee\xde\xa2\x3d\xc0\x8b\xbb\x11\x76\xd5\x1a\x47\x07\x5d\xf2\xcd\xde\xe5\x4e\xc6\x90\xe8\x1c\xbe\xde\x1b\x24\xd8\x3a\x87\x53\x78\xbc\x37\x7e\x1f\x8d\xbc\x09\x98\xf6\xae\x4d\xc9\x2a\xc3\xd3\x68\x34\x9a\x9d\x4f\x8f\xd9\x81\x17\x5a\xad\x6f\x48\x40\x57\xfa\x52\x54\x49\xfc\xf4\xdb\xef\xf8\xb3\xef\x7f\xf8\xeb\x09\xff\x7f\x7f\x5b\x9c\x3c\xfd\xb6\xf8\xee\x84\x3d\xfb\xfe\x87\x93\x67\xdf\xfe\xf0\xc3\xf7\xdf\x3f\x7b\xf6\xe4\xc9\x93\x27\xf1\x98\x28\xce\x87\x14\xf1\x8e\xce\x99\x36\x7c\x36\x47\x42\x7f\xcd\x9e\x64\x4f\xb2\xa7\x61\xf6\xf3\xf9\x6c\xfa\xa5\xb3\x83\x55\xe8\x16\x7c\x8f\xc3\xce\x2a\xf4\xa9\x48\x51\xe1\x87\x60\x15\xa6\x87\x8c\x07\x03\x70\xec\x53\xb8\xe5\xed\xb7\x38\xa6\xf1\xc1\x3d\x9e\x7e\xf6\x22\xdf\xef\xd2\x68\xb4\xc3\x73\xc9\x86\x8b\xdf\xc5\xc6\xf0\xf8\x3d\x9c\x1e\xf7\xae\x78\x6c\xde\x70\x4d\xfb\xd8\x9c\xaf\x24\x60\xb1\x54\x92\x13\xb0\xd6\xb7\x4d\x1f\x76\x6e\x01\xca\x64\x02\x18\x0b\x93\xf9\xf5\x6a\x86\x0e\x06\x11\x74\x1e\xda\xeb\xa2\x90\xd1\x08\xdd\x1d\xde\x32\x61\xf0\x96\x69\x26\x97\xf8\x59\xf3\xec\x9a\x2f\x85\xb1\x7a\x7b\xc0\x19\x2a\x22\x2d\x43\x1f\x8e\x2b\xbb\x85\x48\x05\xbf\x1e\x15\x08\x4e\xff\xa4\x3c\x8e\x4b\x64\x4f\x26\x46\x64\xee\xb7\x64\xec\xbf\x7d\xa9\x68\x46\x28\x1c\xfc\xb3\x73\x3c\x1b\x91\x62\xa8\xf5\x20\xd7\x5d\x3c\xb1\xcf\xee\xba\xb1\xdd\x12\x22\xf0\x20\xc3\x46\xbc\xef\xc8\xb4\xec\x0f\xb0\xed\xf3\xdd\xe3\xda\x47\x7f\x53\xdc\x24\xf3\xbf\x78\xae\x3b\x4e\x9c\x21\x6c\x8d\x60\x8d\x26\xea\x67\xb4\x42\x33\x59\xaa\xe4\xc0\xd4\x61\xe8\x7a\x89\x91\xd7\x6e\x07\xde\x54\x4f\xe1\x91\xf9\x4d\x3e\x32\x71\x1a\x62\xdc\xd4\x49\xa2\x47\x66\xbc\xbf\x81\xb7\x3f\xad\x29\x3c\x6e\xab\x8a\x14\x3e\xa0\xa4\x28\xb1\x78\xcd\xb4\x59\xb1\x2a\xd1\xf9\x78\x1f\xd1\xc9\xc9\xc9\x6f\x32\x1e\x0c\x22\xa2\x38\xf5\x16\x3c\x29\xc6\xc1\xbe\x52\x28\x4e\xce\x52\x35\x7a\x68\x58\x4b\xad\xd6\xc0\xf4\xb2\x59\x73\x69\xcd\x24\x8c\x8a\x8a\x7b\x33\x4b\xd6\x79\xdf\xd0\x1e\x47\x8e\x3e\x8b\x3b\x87\x10\xb9\xb0\x9a\x19\x60\xd0\xa3\x08\xa6\xe6\xb9\x28\x05\x2f\x7e\x02\x98\x51\x40\x57\xa3\x49\x03\x61\xb3\x68\x24\xca\x9e\x4f\x8b\xdd\xb2\x98\x28\x13\xe9\x02\xde\xbd\x5f\x6c\x2d\x8f\x46\x23\xfe\x91\x94\x29\x24\x99\xd9\xc5\x47\x9b\x50\x50\x90\xf9\x50\x60\x1c\x8d\x90\x5c\x91\x02\x87\x53\x70\x89\x6a\x76\xcd\x59\x81\x1f\x07\x53\x7f\x04\x0e\x5f\x9d\xa2\x69\x74\x2a\xd9\x79\xc4\xd8\x85\x9a\x52\x59\xd0\x9c\x15\x03\xc9\x85\xc4\xa2\x24\x8b\xf8\xe8\x2e\x4e\x81\xf6\x45\x2d\x33\x1b\x61\xf3\x15\x20\x4e\xa4\x99\x33\xc3\x21\xce\xf0\x48\xe3\x14\x7f\x58\x57\xf1\x14\xf7\x12\x25\x01\xa4\xb3\x7e\x2b\xd7\xfe\xb4\x8b\x14\x74\x7e\x80\xab\x0f\xac\x64\xa2\x72\x61\x6f\xc1\x73\x8c\x45\xff\xf1\xfc\xf5\xab\xe3\xf8\xfa\xd0\x08\x9b\x07\x43\x79\x7d\x1f\x04\x0e\xfc\x7b\x20\xfe\xe3\xe6\xea\xf2\x0b\x41\x78\x13\x3b\x1d\x08\xfc\x61\x09\xc3\xba\x31\x16\xb8\x2c\x40\x48\x20\xf0\x29\x90\x40\x53\x50\x1a\x50\xa2\x29\x1d\x14\xdd\x48\xfe\xd1\x8e\xc3\x5d\x27\x4d\x94\x3e\xaf\xab\x30\xcb\x93\x5b\x4a\xe9\xc0\xae\x98\x25\x1d\xc5\x50\x89\x54\x15\x15\x83\xe6\x9f\xb8\x08\x72\xa8\x93\x6e\xd4\xeb\xa4\xce\x33\x9f\x43\x9c\xba\x88\x34\x0b\x8b\x9c\x3b\x39\x11\xc5\x70\xbd\x28\xe2\x31\xfc\xf1\x87\x8b\x25\x2e\xfe\xd9\xd0\xcd\xce\x66\xe7\xa9\x1b\xb9\x14\x95\x23\x2d\x4a\xf0\xe3\x48\x7c\x10\x79\x78\xf5\x15\xc5\xa7\x34\xb7\xd6\xea\x4e\x60\xf2\x37\x3b\xc7\xc4\x10\x25\x73\xc7\x2a\x51\x0c\x14\x35\x20\xad\x0f\x90\xd6\x0e\x29\xc2\x98\xc3\x69\xb7\x89\x87\x36\x87\xd3\xbd\x88\xc4\x63\xaa\xc7\x3f\x1e\x2e\x39\x8e\x6b\x3e\xc4\x85\x07\xd7\x92\x19\xc0\x63\xb5\x38\x44\xc8\x6a\xd1\x03\x89\x69\xd5\x11\x9c\x34\x7c\x14\x2a\xab\xc5\x17\xa3\x45\x2a\x9f\x46\x8c\xd4\xf6\x40\x57\x6a\x39\x84\x5c\xa9\x65\x0b\xb8\x4d\xe4\x4e\x4f\xe1\x09\xdc\x53\x6e\x4f\x99\x31\xe5\xbd\x6b\xce\xa4\x81\xad\x6a\x20\x67\xf2\x2f\x96\x34\xb4\xaa\xf0\xaa\xfd\xce\xb5\xc2\x2b\x10\xec\xaa\x53\xc4\x8e\x9a\x07\xe4\xd2\x95\x16\x4c\x48\x57\x86\x88\xc2\x78\xa7\xd2\x6d\xc2\x18\x28\x75\x4b\x3d\x2d\x97\xeb\x0c\x29\xb9\xd1\xb8\xaf\xbf\x3e\x29\x3d\x26\x7d\x37\xdb\x89\x3f\x4c\xfb\xcc\x11\xf8\x69\x9f\x3a\x05\x4f\x75\xef\x18\x42\xe6\x35\xc4\x1b\xc6\x3b\xce\xdb\xd4\x37\x70\xde\x2d\x0d\xb4\x30\x00\x3e\x20\x84\x83\x3d\x2a\x6d\x2a\xdc\x92\x71\xab\x8e\x45\x1d\x2a\xe7\xc6\xdc\xcc\xae\x42\x11\xe5\x01\xc7\x3a\x99\x80\xb0\x7f\x31\xc0\x99\x11\xdc\x58\x10\x25\x66\xe1\x3e\x6b\xc2\x5d\x2c\x08\x59\xf0\x8f\xa0\xca\x83\x98\xd5\x40\x29\xb4\xb1\xd1\xc8\x88\x35\xab\xd1\x6b\xf6\xe2\x3d\xaa\x01\x0e\x03\xb0\xfb\xdd\xff\x56\x74\x4b\x10\xda\x80\xce\x88\xbd\xc0\x32\xac\xcb\xbb\x85\x47\x82\xc3\xa0\x5e\x18\x86\xaa\x5b\x4a\x70\x3b\xa2\x3f\xe2\xd0\x1f\x7f\xb8\x22\xd9\xe9\x29\x50\x2a\xe1\xb6\x9e\x4c\x10\x12\xff\x28\x8c\xb5\xc6\x3b\x3d\x23\xf2\x2c\x14\x41\x9c\x73\x13\xe5\xb1\xb5\xa3\xbd\x20\xeb\xd7\xe7\xd7\x97\xb3\xcb\x97\x53\xca\x14\x8c\xe1\x47\xb2\x04\x26\x51\x3f\x17\x3c\x14\xfb\x8a\x0c\x66\x4b\xa9\x50\xe4\x59\x4c\x2e\x90\x7c\x20\xa1\xea\xd7\x03\x09\x1e\x7a\x26\x12\x0d\x3a\xc9\x8a\x5b\x9e\x7c\x5a\xf0\xef\x7a\xb1\xfd\xfb\x94\xf0\x8f\x03\xf1\x0d\x07\x56\x19\x45\x85\x40\xe7\xa7\x91\xe0\x5e\xb9\xd4\x3c\xbc\x53\x1b\x83\x0f\xa8\x0a\x0b\x85\xe2\x06\xed\xd2\x9a\xdd\xa2\x00\xa4\xe1\x44\x5e\x75\xce\x95\x57\x86\xd3\x82\x5c\x49\x2b\x64\xc3\x83\xe7\xa7\xc3\x5e\x37\xb6\x4d\x0b\xf2\xbe\xa6\xe4\x83\x04\x82\xce\xe4\x43\x38\xeb\x07\xf0\xf5\x4e\xdf\x1f\x98\x3b\xee\x15\x33\x1d\x9f\xa0\x69\x1d\xd7\xbc\x70\x73\x44\x89\x1f\xbf\x88\xf4\x3b\x8f\x77\x6f\x8f\xde\x26\x5f\xa3\xd1\xfe\xba\xdd\xeb\x60\x2b\xbf\xd7\x50\xdd\x3e\x2b\x78\xb7\x7b\x1a\xc4\x35\xf6\xab\x76\xfe\x5f\xcc\x70\x6e\xb8\x0d\x49\x0e\xed\xe0\x7f\xf1\x53\x77\x74\x0e\x03\xc4\xe1\xf0\x56\xec\xce\x57\x8f\x11\xb8\xb0\xc7\x80\x1f\xd5\xfc\xe3\x51\x5a\x1b\xdb\x77\x72\x68\x0b\xee\x74\xc1\x95\x74\x1a\x8e\x66\x3c\x4c\x41\xfb\x3d\x79\x64\x7a\x17\x84\x52\x98\x56\x39\x7a\x6c\x3b\xae\xf7\x39\xea\x8e\x40\xaa\x4f\x1c\xf5\xff\x1d\x2e\x76\x6d\x1e\xda\xe3\x63\xff\x58\x88\x7a\xf4\xaf\xa2\x66\x54\xe0\x3f\xb0\x49\xc9\x23\x33\xce\x00\xce\xfb\x5d\x80\x43\x57\xe1\x3d\xeb\x96\x5b\x30\x4d\x5d\x2b\x6d\xf7\x6c\x57\xcb\x54\xeb\x62\x83\x2b\x5b\x33\x21\x93\x50\x6a\x9b\x9e\x1e\x29\xcd\x91\x17\x73\xe5\x4c\xdc\x02\x53\x52\x51\xe0\x09\x61\x06\x68\xd1\x73\x5d\x37\x12\xa1\xf9\x52\xaf\xab\x1d\xfe\xac\x54\xf5\x0b\xd3\xc9\x63\xe7\x4a\xef\x42\xa6\x1d\xfb\x9f\xd0\xf5\x53\xea\x0f\x31\xa5\xd8\x21\x3b\xa7\x62\xa2\x73\x90\x42\xba\xca\x64\x18\xe5\x1f\x85\x8d\x43\x6d\xd2\x45\xd4\xbd\x1d\x7c\x52\x98\x42\xc8\x3f\x53\x88\xf1\x4f\xed\xcb\xd8\xc3\xba\x64\x3f\x45\x69\xa9\x0e\x50\xd7\x3a\x0f\xf8\x74\x7e\x80\x98\xea\xfd\xfb\x29\x79\x80\x09\x49\xce\x24\xfa\x91\xc6\xe0\xc9\x62\x86\xb2\x60\xe8\x4d\x51\x11\xdd\x41\xbb\x15\xe3\xd8\xc9\x77\x4f\x84\x2e\xfc\x38\x0e\xc9\x65\x2a\x29\x84\x8c\x06\x73\x3d\x9f\xcd\xa4\x10\x53\xb7\x86\x80\xdd\xbc\xbe\x80\x52\xab\xdf\xb9\x84\x44\x64\x3c\x83\x42\xa1\x8a\x5a\xbd\x45\x61\x90\xfa\x73\xb4\xf9\xae\xbc\x6f\x7a\xad\x9e\xf1\xc3\x32\x16\x45\x0a\x98\x0a\xa5\x2e\xc9\xf1\x13\x92\x31\xee\x4c\x7a\xbc\x05\x06\xd4\x71\x41\x3e\xc9\x40\x49\x55\xf0\x4f\x10\xac\x91\x60\xed\x09\xce\xfb\x04\x37\x98\xe3\xa1\x85\xdb\x62\xe4\x48\x1d\xb6\x41\x53\x06\x85\xed\x1a\x2c\x42\x2e\x3f\x85\x1a\x43\x7c\xda\x07\xf3\x8e\xb4\xcd\x2e\x0e\x76\x9b\xcd\x51\x36\x8d\xe1\x1e\x3e\x87\x6b\x7e\xf3\x06\x53\x88\x96\xf8\x5b\x21\x6d\x8f\xb4\x0b\xd6\x53\xa0\x04\x21\xed\x67\x07\x28\x12\xee\x8e\xa2\x52\x4b\x70\x3d\x88\xe4\xc9\xc9\xdf\xc6\x0f\x29\x5b\x08\xd7\x53\xe8\x82\x7b\x22\x19\x02\xfb\x14\x62\x77\x88\xbe\x81\x81\x74\xd7\xdc\x60\xc4\x6d\x5c\x95\x1d\x55\xd1\x58\xb6\xae\xcd\xc3\xd2\x70\xa1\x36\x5d\x0c\x8a\xfb\xfd\x35\x99\xcd\x81\x15\x45\xa1\xb9\x31\x78\xa5\x43\x52\x70\x1c\x6a\x88\xaf\x91\xc9\x10\x8d\x13\xd4\x10\x89\x13\x0f\xfd\x56\x93\x6b\x65\xf6\xab\x71\xc2\x80\x90\xc2\xfa\x3e\xe0\xc3\x78\x49\x3f\x9d\x6a\x5b\xaf\xee\x6d\xa4\xbe\x77\xbd\xa9\x86\x41\x05\x07\x0c\x5c\x98\xb3\x96\x7e\x8b\xa1\xd1\x25\xed\xb7\x0a\x2a\xc5\xba\xad\x29\xd1\x49\xc6\xae\xee\xf0\x06\x95\x77\x29\xee\xb8\x81\x06\x55\x0d\x43\xf8\x2d\x6c\x18\x5d\x9f\xc2\x45\x7b\x0d\x37\x2b\xc7\x98\x2b\x40\xc0\x8a\xd5\x35\x97\x2e\x62\xa3\x36\x27\xf5\x45\x85\x35\xa1\x30\x4d\xa4\x9f\xcb\x62\x6f\xd5\x86\x91\xf7\x68\x3d\x41\x06\xf0\x2b\xa7\xbd\xc1\xae\x14\x06\x68\x1b\x15\x7a\xd9\x85\x28\x4b\xae\xb9\x44\x1d\xc8\x79\xc1\x65\xce\x33\x22\x3a\x73\x9d\xe5\x40\x10\xf7\x4e\x31\xde\xdb\x88\xaa\xea\xfc\xe0\x49\x5e\x2e\x31\xfd\x6a\xb8\x49\xa9\x85\x8b\x19\x09\x65\x28\xbd\xea\x79\x16\x8d\xda\x06\xd6\x29\x05\x8a\xc9\xa0\x8f\x15\x24\xf6\x8b\x30\xc2\x26\xe8\x47\x92\x12\xbe\xa6\x21\x5c\x36\x86\xfb\x5e\xf7\x8a\x4e\x1c\xd3\x06\xab\x1b\x0e\x3b\x94\xaf\xcf\xc3\x5a\xb7\x40\xce\x74\x58\xca\x8d\x46\x6d\xbf\xe9\xc9\xd8\xd5\x83\x8e\x16\x34\xfd\x81\x6d\x38\x46\xb1\x64\x73\x16\xbc\x54\x9a\x43\x6b\xc3\xc1\x50\x78\x0b\x1b\xa6\x25\x49\x71\xc9\xad\x2b\xec\x62\x98\x71\x34\x99\xf3\x44\xfd\x37\x72\x45\xa0\x6a\x1f\x76\xb7\xf0\x91\x76\x0b\xfd\xb0\x48\x7c\x8c\x85\xb2\xa9\x2a\xd2\xdf\x4b\x55\x70\x74\xb8\x28\x95\x68\x3f\xef\xee\x55\x86\xf6\xa7\x9f\x3a\x0f\xd4\x16\xc7\xce\x34\x77\x2d\x37\x74\x28\x95\x5a\x2e\xb9\x86\xb6\xf1\x17\x8d\xd0\x40\x4c\x4f\xe1\x31\xc5\xa8\xbf\x6a\x61\xb9\x7e\x45\x93\x30\x51\xac\xd4\xd2\xc7\xad\x5c\xbb\x6f\x89\x32\xd9\x8d\x2d\xb8\xd6\x63\xf7\xf9\x86\x5b\x9f\x9f\xc4\x18\x26\xc4\xdd\xb0\x23\x43\x86\x2e\x71\xa9\x68\x7f\xa4\x67\x06\xc7\xe3\xc0\x5b\x5b\x9e\x40\xb6\x90\x8c\x8f\xa8\xdb\xa2\x85\x13\x84\xe7\xec\x15\x6b\x64\xbe\x42\xcf\xb9\x60\x86\xc3\x7f\xba\xe7\x09\x98\x7f\x10\xa0\x9f\x28\xf3\xbc\xcd\x66\x52\xd8\x70\x63\xe7\xcc\xf8\xb7\x07\xb5\x42\xf7\xbc\xe1\x70\x2b\xd5\x06\x36\xfc\x2f\x9a\x3a\xdf\xc0\xfc\x6a\xb7\x03\x47\xb5\xd7\x9c\xde\x4d\x19\xb5\x6e\x9f\x8b\xb0\x85\x6a\xa8\xde\x6e\x78\x55\x3a\x8e\x5f\xa9\x65\x19\xf8\x7c\x75\x79\xf5\x66\x76\x76\x81\x26\x13\xd8\x7a\xda\xb7\x69\x41\x40\x7b\xd3\xcf\xcf\x2f\x7e\x7e\xfb\x32\x85\xe3\x15\xd2\x50\x05\xc1\x2b\x34\x0e\xcd\xf7\x7b\x08\xad\x04\xaa\xec\xf6\x5a\x09\x3f\x42\x68\x04\x87\x4e\x01\xec\x92\xf1\xb1\x6d\x5b\x94\xda\x45\x16\x2e\x08\x79\xe4\x1d\xf2\xc1\x8e\x2e\x37\xdf\xd7\x36\xd7\xe6\x71\xfb\xc5\xf8\xc9\x95\x51\x20\xf1\xd5\x9a\xd8\x97\xcc\xc3\x14\x0c\x07\x05\x6b\x67\xe5\x2b\x51\x15\x38\x89\x10\x92\xcc\xe9\x76\x53\x2b\x83\x62\x0d\x0a\x67\x71\xa7\xe4\xec\xc5\xcb\xb1\xb7\xca\xe1\x25\x0c\x79\x7b\xe7\xe2\x25\xef\xda\x1c\x68\x9b\xaa\xb2\xcd\xfb\x2e\xf9\x06\xb1\xfe\x2a\xec\x6a\x76\x9e\xec\x47\x25\x63\x37\xf7\xdc\xe4\x5f\x38\x9d\x30\xde\x70\xaf\x0e\x0e\x4e\x68\x5c\xbb\xd2\x0d\x6a\x12\x23\x31\xf9\xcf\x08\x3f\x3a\x2e\xba\xc9\x04\x2e\x64\x5b\x21\x08\x0f\x43\x16\xdb\xce\x17\x60\x86\x4d\xac\x3c\xd6\xf5\x22\xeb\xb5\xc7\x9e\x17\x85\x9e\x1e\x89\x53\xf0\xdb\x5c\x69\x3b\x85\xef\x9e\x3e\x7b\x9a\x7a\xf9\x33\xb9\xf5\xea\xe2\x5e\xdd\x05\x85\x79\x2e\xb7\x09\xee\xe0\x5b\x2a\x1f\x52\xe0\xee\x5d\x41\x55\xe2\x1d\xfe\x05\xdd\x40\x12\x4f\x7c\x59\xa2\x7d\x25\x36\x39\x0b\xf1\xb3\x7f\xfe\x97\xd1\xcc\xab\x32\x61\x72\x3b\x3e\x28\x5d\x1f\x68\xde\xc5\xf5\xf5\xd5\x35\x85\xe1\x4d\x55\x84\x12\x28\xf9\x1c\x78\x68\x2f\x38\xf9\x3b\x3c\xfa\xe6\xce\x97\xb8\x8f\x6d\xdb\xeb\xd0\xfc\x19\x56\x6e\x42\xd0\x30\x20\x99\xd7\x8b\x61\x39\xe6\xc3\xf5\xdb\xcb\xff\x69\xee\x68\xfb\x4f\x33\xf7\x10\x92\x96\x61\xa7\x49\xa8\x95\xbe\x05\x38\xa9\x57\x5b\xe3\xc3\xf6\x8c\x9a\x71\x4e\x2f\x7b\x5a\x69\x57\xdc\xe0\x9d\xe1\x20\xd6\x75\x25\x72\x81\xca\x36\x14\xd6\x7c\xb5\x35\x9f\x92\x0f\x2a\xf2\x87\xf9\xd5\xaf\x17\xd7\x1f\xae\x2e\xf1\x32\x85\xdb\xf4\xef\x13\xe9\x53\xb8\x6e\xe4\x67\x09\xdc\xfc\xe3\xf2\xec\x21\x04\x7f\x66\x3d\x4a\x13\x6f\x2c\xd5\x46\xdf\xf9\x22\x2a\xce\xb8\xdf\x05\x1f\xa2\x0d\xf7\xe5\x62\x8a\x25\x83\xf7\xea\x8a\xc3\x5f\x9d\x42\x1c\xb7\x4e\x6c\x4f\x37\x66\x97\x2f\xae\x28\x17\x60\xc5\xe7\x62\xcf\x52\xab\xb5\xb7\xfd\x7d\xea\xc8\x63\xc1\x2c\xf3\xfa\x3d\x6c\x7f\x0e\xa7\x52\xff\xef\x81\x3e\x52\xd7\xe3\xa3\x0e\x28\x06\x7e\x1d\x5b\xb8\x75\xea\x15\x72\x2f\x9e\x6e\x6f\xd9\x1d\xd3\x50\x2f\x0c\x04\x19\xbe\x72\xa5\x8d\x07\x3a\x8e\x04\xf9\x71\xbd\x30\x5f\xd6\x93\x75\xad\xe3\x3f\x0b\xe9\xd0\xb5\x7a\xcf\x5a\xaa\x86\xba\x8b\x4e\xdc\x8e\x64\xbf\x78\x80\xd9\xdc\xa3\x82\x6c\x35\x0a\xbc\xe2\x32\xa9\x17\xee\xe0\x0d\xa9\x95\x2f\x9a\xaf\xbb\x7a\x26\x7e\x7f\xc9\x2d\x4d\x71\xe5\x91\xd1\x48\x0e\xdd\xc8\x0b\xad\xd6\xaf\x5d\x02\x96\xac\xc7\x47\xcd\xc5\x79\xeb\xfe\x97\xca\x3a\x67\xe7\x59\xa6\x8a\x54\xc1\xbd\x12\xc8\x6c\x76\x9e\x8c\xfb\xae\xcb\xd5\xb4\xdd\x30\x35\x1c\xdf\xa8\x84\xee\x0e\x8e\x78\x44\x3e\xee\x75\xfc\xb7\x11\xcb\xc8\x5f\xb2\xd7\x5c\x2f\x79\x22\x31\xc1\x73\xdd\xdb\x7e\x01\xae\xed\x5a\x15\x0d\x5a\x08\xaa\x01\x50\xae\x90\x33\x4c\x80\x19\x54\xcc\x72\x0d\xa8\x45\x8d\x76\xf5\x60\x77\x73\x4e\x81\x92\x9c\x22\xa1\x5f\x53\x90\xe3\xbd\x07\x1a\xee\x1a\x85\xc7\x60\x6d\x30\xfa\x64\xef\x40\x5a\x1f\x8f\x99\x3d\x65\x20\x6d\x0d\x8d\x55\xa8\xae\x5b\x57\x4b\x73\x4f\x1c\xa8\x5c\xdf\xea\x89\x0b\x28\xf7\x3c\xc0\xcb\xd6\x1a\xa0\xd8\xb3\xa5\x52\xcb\x8a\xb3\x5a\x18\x7a\xe1\x3c\x9b\xdf\x3d\xcb\xf0\x2f\x8c\xef\x2f\xec\x8a\x6b\xc9\xed\x64\x86\xa8\x4c\x78\x28\x3d\xab\x27\xb3\x3a\x1e\x2a\xaf\xc0\x39\xae\x28\x66\xb3\x59\xf7\xa0\x2e\x1a\x8d\x24\xb7\x1b\xa5\x6f\xdb\x8f\xf3\x4b\x6e\xef\x77\x61\x8d\xf1\xe8\xf6\xd6\xd1\x0b\xba\x2f\xbc\xb2\x98\xa0\xb8\xcc\xb9\x13\xa1\xf1\xaa\xc2\xb3\x0b\xad\x95\x76\x4a\xb2\xeb\xb4\xb7\xd7\xb7\x71\x20\x1c\x7d\x16\xc0\x88\x0c\xc3\x0a\x87\xe2\x10\xc6\xf1\x6a\xff\x87\x14\x58\x47\x96\xb5\x95\xfd\x3a\x05\xe9\x63\x8e\xb6\x45\x78\x36\x3b\xbf\x4e\xd8\xbe\x0a\xe3\x3e\xa2\xce\xde\xa8\x67\x41\x8b\x29\xe8\x9a\x8f\x7b\x65\x60\x0a\xd9\x85\x21\xf7\xd6\x4b\x5e\xdc\x6a\x3c\x80\x53\x70\x4d\x95\x56\xe8\xa7\xf0\xb5\x1c\xd4\x64\x9d\x64\x69\xbe\x8b\xc6\x4f\x5b\x33\x7d\xdc\x04\x95\x82\x4c\x86\xdf\x8e\xae\xa3\xa8\x5b\x83\xdc\x2b\x45\x7d\xd6\xfa\x34\xc6\x19\x7b\x4f\xca\x9f\x52\x07\x05\x09\xd4\x0b\x0a\xf3\x44\x7d\x44\x15\x3f\x9c\x79\xff\xc0\x8b\x4e\xc7\x10\xf7\x85\x5d\x4d\xfd\x9a\x30\xd7\x49\x6d\xe6\xf6\xe9\xb6\xf0\x2f\xc3\x58\x3e\x05\x70\x2b\x6c\xf6\xfa\xf9\xd9\xfd\xff\x67\xba\xd8\x30\xcd\x5d\x3c\xe9\xe6\xf7\xc7\x76\x7e\xa1\x6d\xa6\xfe\x7d\xec\x77\xdf\x26\x6e\xda\xeb\x37\x6f\xfd\xd3\x2b\xfa\x7b\x56\x4f\x7b\xf0\x3d\x8c\xda\x3d\x27\xf4\x1b\xce\xe6\xf7\xb3\xb9\x8f\x5a\xdd\x89\x7b\xf2\x37\xcd\x42\x72\x3b\x1d\xcc\x73\xd7\x26\xf1\x67\x9a\xbd\x66\xe6\xd6\x2f\xd8\x85\xc0\x76\x10\x2a\xfc\x8b\x97\xfb\x48\x60\x50\x2f\x42\x34\xe0\x52\x19\x1f\x0f\xb8\x64\x08\xaf\xb1\x28\xe1\xab\xc3\x88\x3e\x4c\x6e\x4d\xa0\x1f\x48\xbb\xdc\xbd\xaf\x36\xbb\x7e\x26\xeb\x32\xd8\x68\x74\xdb\x77\x22\x6e\x90\xcc\x7a\x0a\x2d\xb1\x4a\x2d\x9d\x91\x43\x47\x45\x56\x76\x0c\x7f\x87\x27\x04\xe1\x36\x3b\xb3\x1f\xb3\x9b\xf3\x0b\x4a\x7d\x05\xab\xce\xca\x65\x87\xe7\xd8\xd7\xd4\xf9\x3d\xf7\xac\x77\x17\x1d\x52\xc0\xfc\x68\x10\x0d\xf9\x30\x8b\x66\x5f\xf3\x8a\xb3\x7e\x5d\x8c\x6d\xc0\xe7\x3b\xde\x2a\x63\x92\x86\x57\xca\xaa\x8a\x8c\x57\xff\x05\xce\x9e\x0c\x1f\x3f\x86\xaf\xba\xb7\x37\x8e\x9d\x9b\x35\xcf\x90\x66\x32\xee\x3d\xf9\x19\x3c\x52\xf7\x21\x58\xe8\xf2\xdf\x93\x6a\x48\x9b\x02\xd7\x1a\xc5\xe9\xfe\xaf\xa3\x76\x42\xe2\xcb\xf4\x83\x61\x8c\xa2\xb6\xc1\x04\x6b\xfd\xe9\x30\xff\xec\x7a\xf6\x66\x76\xf6\xfc\x15\x46\x17\xad\x55\x36\x5c\x16\x60\x8a\x0f\xd2\xbf\xb3\x75\x0f\x72\xa8\x5c\x12\x9c\x2b\x2a\x0e\x62\x7b\x80\xac\x6f\x06\xf5\xea\xa6\x54\xac\xd3\xfc\x9f\x0d\x37\x96\x17\x29\x2c\x1a\xeb\x04\xe0\xcb\xdc\xa1\xb3\xd3\x76\x75\xe2\xf1\xa0\x07\xf5\x70\xea\x6f\x9a\x3c\xe7\xc6\x94\x4d\xb5\x05\x02\xd5\x6e\x4a\x3e\x36\xde\x7f\x69\xb5\x61\xc2\xa2\x1d\xe4\x77\x5c\xbb\xc6\xbe\x13\x34\xde\x1c\xb8\xf7\x4d\xa3\xff\x0e\x00\x00\xff\xff\xb5\x7b\xfd\x02\xb6\x36\x00\x00")

func appMainGoTplBytes() ([]byte, error) {
	return bindataRead(
		_appMainGoTpl,
		"app/main.go.tpl",
	)
}

func appMainGoTpl() (*asset, error) {
	bytes, err := appMainGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/main.go.tpl", size: 14006, mode: os.FileMode(420), modTime: time.Unix(1618851413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPprofGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4d\x6b\xdc\x30\x10\x86\xcf\x9a\x5f\xf1\x56\xb0\x20\x95\x45\xee\xd9\x90\x43\x49\x4a\x09\x94\xc6\x90\xa5\xd7\xe2\xac\xc7\xae\x58\x65\x64\xb4\x93\x40\x31\xfa\xef\x45\xbb\xfd\x3c\xf5\x24\xde\x61\x1e\xe6\xd1\x4c\xd7\xe1\x36\x4f\x8c\x85\x85\xcb\xa8\x3c\xe1\xe9\x3b\x4e\x65\x3c\xb1\x60\xdb\x10\x3e\xa6\xfc\x34\xa6\xf0\x85\xcb\x39\x66\x41\xad\x01\x77\x0f\xf8\xfc\x70\xc0\x87\xbb\xfb\x03\xd1\x3a\x1e\x4f\xe3\xc2\x78\x1e\xa3\x10\x75\xdd\xb6\xc5\x19\x61\x58\x4b\x9e\x6b\xa5\xf8\xbc\xe6\xa2\x70\x64\x6c\xca\x8b\x25\x63\x85\xf5\xe7\xd3\x7d\x53\x5d\x2d\x99\xaf\xf8\x9d\xba\xb5\x71\x96\x3c\xd1\xfc\x22\x47\x44\x89\xea\x3c\x36\x32\x4b\x46\xab\x5c\x83\x49\xf1\xac\xcd\x77\x0f\x46\x7f\x03\x61\x0d\x9f\x2e\x25\x67\xf5\xb8\xda\x3d\x6c\xff\xce\x7a\x32\x26\xce\x60\xbc\xb9\x81\xc4\x74\x01\x4d\xca\x4b\x18\x4a\x14\x9d\x9d\x9d\xc7\x98\x78\x82\x66\x9c\x75\x2c\x8a\xcb\xf0\x1e\xbb\x57\xbb\x07\x37\xda\x14\xd6\x97\x22\x64\x4c\xa5\x7f\xd1\x4b\x2b\xae\x1a\x51\x16\x64\x41\xfb\x68\x8f\xdd\xb9\xdf\x4d\x76\x8f\x5f\x86\xe1\xfd\x34\x15\xe7\x83\x7b\xdb\x24\x0f\xb7\x43\xcb\x3e\xdc\x0f\xe1\x51\x4b\x94\xc5\xf9\xff\xf6\x0e\xb9\xa8\xff\x7b\x7e\x12\xd7\x96\x15\x1e\xb9\xbc\xb2\xfb\xb3\x0b\x89\xc9\x7b\x32\xd5\x79\xaa\xd7\x53\xb0\x4c\xb5\xd2\x8f\x00\x00\x00\xff\xff\x6d\x20\x19\xa0\xe3\x01\x00\x00")

func appPprofGoTplBytes() ([]byte, error) {
	return bindataRead(
		_appPprofGoTpl,
		"app/pprof.go.tpl",
	)
}

func appPprofGoTpl() (*asset, error) {
	bytes, err := appPprofGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pprof.go.tpl", size: 483, mode: os.FileMode(420), modTime: time.Unix(1618851427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app/includes.go.tpl": appIncludesGoTpl,
	"app/main.go.tpl":     appMainGoTpl,
	"app/pprof.go.tpl":    appPprofGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"app": &bintree{nil, map[string]*bintree{
		"includes.go.tpl": &bintree{appIncludesGoTpl, map[string]*bintree{}},
		"main.go.tpl":     &bintree{appMainGoTpl, map[string]*bintree{}},
		"pprof.go.tpl":    &bintree{appPprofGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
