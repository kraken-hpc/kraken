// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cpuburn.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CPUBurnConfig struct {
	TempSensor           string   `protobuf:"bytes,1,opt,name=temp_sensor,json=tempSensor,proto3" json:"temp_sensor,omitempty"`
	ThermalThrottle      bool     `protobuf:"varint,2,opt,name=thermal_throttle,json=thermalThrottle,proto3" json:"thermal_throttle,omitempty"`
	ThermalPoll          uint32   `protobuf:"varint,3,opt,name=thermal_poll,json=thermalPoll,proto3" json:"thermal_poll,omitempty"`
	ThermalResume        uint32   `protobuf:"varint,4,opt,name=thermal_resume,json=thermalResume,proto3" json:"thermal_resume,omitempty"`
	ThermalCrit          uint32   `protobuf:"varint,5,opt,name=thermal_crit,json=thermalCrit,proto3" json:"thermal_crit,omitempty"`
	Workers              uint32   `protobuf:"varint,6,opt,name=workers,proto3" json:"workers,omitempty"`
	WorkersThrottled     uint32   `protobuf:"varint,7,opt,name=workers_throttled,json=workersThrottled,proto3" json:"workers_throttled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CPUBurnConfig) Reset()         { *m = CPUBurnConfig{} }
func (m *CPUBurnConfig) String() string { return proto.CompactTextString(m) }
func (*CPUBurnConfig) ProtoMessage()    {}
func (*CPUBurnConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cpuburn_e00cc24184382c72, []int{0}
}
func (m *CPUBurnConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CPUBurnConfig.Unmarshal(m, b)
}
func (m *CPUBurnConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CPUBurnConfig.Marshal(b, m, deterministic)
}
func (dst *CPUBurnConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPUBurnConfig.Merge(dst, src)
}
func (m *CPUBurnConfig) XXX_Size() int {
	return xxx_messageInfo_CPUBurnConfig.Size(m)
}
func (m *CPUBurnConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CPUBurnConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CPUBurnConfig proto.InternalMessageInfo

func (m *CPUBurnConfig) GetTempSensor() string {
	if m != nil {
		return m.TempSensor
	}
	return ""
}

func (m *CPUBurnConfig) GetThermalThrottle() bool {
	if m != nil {
		return m.ThermalThrottle
	}
	return false
}

func (m *CPUBurnConfig) GetThermalPoll() uint32 {
	if m != nil {
		return m.ThermalPoll
	}
	return 0
}

func (m *CPUBurnConfig) GetThermalResume() uint32 {
	if m != nil {
		return m.ThermalResume
	}
	return 0
}

func (m *CPUBurnConfig) GetThermalCrit() uint32 {
	if m != nil {
		return m.ThermalCrit
	}
	return 0
}

func (m *CPUBurnConfig) GetWorkers() uint32 {
	if m != nil {
		return m.Workers
	}
	return 0
}

func (m *CPUBurnConfig) GetWorkersThrottled() uint32 {
	if m != nil {
		return m.WorkersThrottled
	}
	return 0
}

func init() {
	proto.RegisterType((*CPUBurnConfig)(nil), "proto.CPUBurnConfig")
}

func init() { proto.RegisterFile("cpuburn.proto", fileDescriptor_cpuburn_e00cc24184382c72) }

var fileDescriptor_cpuburn_e00cc24184382c72 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0xd9, 0x6a, 0x5b, 0x9d, 0x1a, 0xad, 0x39, 0xcd, 0xcd, 0x55, 0x10, 0x56, 0x04, 0x2f,
	0xbe, 0x81, 0xfb, 0x02, 0x25, 0xea, 0xb9, 0xd8, 0x36, 0xda, 0xc5, 0x6c, 0x26, 0x4c, 0x26, 0xf8,
	0x18, 0xbe, 0xb2, 0x18, 0x12, 0xb1, 0xa7, 0x24, 0xdf, 0xff, 0xf1, 0xf3, 0x13, 0x50, 0xdb, 0x90,
	0x36, 0x89, 0xfd, 0x43, 0x60, 0x12, 0xd2, 0xd3, 0x7c, 0xdc, 0x7c, 0x4f, 0x40, 0xf5, 0xab, 0xd7,
	0xa7, 0xc4, 0xbe, 0x27, 0xff, 0x3e, 0x7c, 0xe8, 0x2b, 0x58, 0x88, 0x1d, 0xc3, 0x3a, 0x5a, 0x1f,
	0x89, 0xb1, 0x69, 0x9b, 0xee, 0xd4, 0xc0, 0x2f, 0x7a, 0xce, 0x44, 0xdf, 0xc1, 0x52, 0xf6, 0x96,
	0xc7, 0x37, 0xb7, 0x96, 0x3d, 0x93, 0x88, 0xb3, 0x38, 0x69, 0x9b, 0xee, 0xc4, 0x5c, 0x14, 0xfe,
	0x52, 0xb0, 0xbe, 0x86, 0xb3, 0xaa, 0x06, 0x72, 0x0e, 0x8f, 0xda, 0xa6, 0x53, 0x66, 0x51, 0xd8,
	0x8a, 0x9c, 0xd3, 0xb7, 0x70, 0x5e, 0x15, 0xb6, 0x31, 0x8d, 0x16, 0x8f, 0xb3, 0xa4, 0x0a, 0x35,
	0x19, 0xfe, 0x6f, 0xda, 0xf2, 0x20, 0x38, 0x3d, 0x68, 0xea, 0x79, 0x10, 0x8d, 0x30, 0xff, 0x22,
	0xfe, 0xb4, 0x1c, 0x71, 0x96, 0xd3, 0xfa, 0xd4, 0xf7, 0x70, 0x59, 0xae, 0x7f, 0x8b, 0x77, 0x38,
	0xcf, 0xce, 0xb2, 0x04, 0x75, 0xf2, 0x6e, 0x33, 0xcb, 0x1f, 0xf3, 0xf8, 0x13, 0x00, 0x00, 0xff,
	0xff, 0x19, 0x83, 0x47, 0x6a, 0x30, 0x01, 0x00, 0x00,
}
