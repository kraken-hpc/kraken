// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: image.proto

package image

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Image_State int32

const (
	// these are kraken only error states
	Image_UNKNOWN Image_State = 0
	Image_ERROR   Image_State = 1
	Image_FATAL   Image_State = 2
	// these map to the imageapi container states
	Image_CREATED  Image_State = 3
	Image_RUNNING  Image_State = 4
	Image_STOPPING Image_State = 5
	Image_EXITED   Image_State = 6
	Image_DEAD     Image_State = 7
)

var Image_State_name = map[int32]string{
	0: "UNKNOWN",
	1: "ERROR",
	2: "FATAL",
	3: "CREATED",
	4: "RUNNING",
	5: "STOPPING",
	6: "EXITED",
	7: "DEAD",
}

var Image_State_value = map[string]int32{
	"UNKNOWN":  0,
	"ERROR":    1,
	"FATAL":    2,
	"CREATED":  3,
	"RUNNING":  4,
	"STOPPING": 5,
	"EXITED":   6,
	"DEAD":     7,
}

func (x Image_State) String() string {
	return proto.EnumName(Image_State_name, int32(x))
}

func (Image_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{0, 0}
}

type Image_ErrorCode int32

const (
	Image_NONE         Image_ErrorCode = 0
	Image_MAX_ATTEMPTS Image_ErrorCode = 1
	Image_MAX_DEATHS   Image_ErrorCode = 2
	Image_SERVER_FAIL  Image_ErrorCode = 3
	Image_ATTACH       Image_ErrorCode = 4
	Image_MOUNT        Image_ErrorCode = 5
	Image_OVERLAY      Image_ErrorCode = 6
	Image_INIT_FAIL    Image_ErrorCode = 7
	Image_DIED         Image_ErrorCode = 8
)

var Image_ErrorCode_name = map[int32]string{
	0: "NONE",
	1: "MAX_ATTEMPTS",
	2: "MAX_DEATHS",
	3: "SERVER_FAIL",
	4: "ATTACH",
	5: "MOUNT",
	6: "OVERLAY",
	7: "INIT_FAIL",
	8: "DIED",
}

var Image_ErrorCode_value = map[string]int32{
	"NONE":         0,
	"MAX_ATTEMPTS": 1,
	"MAX_DEATHS":   2,
	"SERVER_FAIL":  3,
	"ATTACH":       4,
	"MOUNT":        5,
	"OVERLAY":      6,
	"INIT_FAIL":    7,
	"DIED":         8,
}

func (x Image_ErrorCode) String() string {
	return proto.EnumName(Image_ErrorCode_name, int32(x))
}

func (Image_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{0, 1}
}

type ImageSet_State int32

const (
	ImageSet_UNKNOWN ImageSet_State = 0
	ImageSet_STOPPED ImageSet_State = 1
	ImageSet_RUNNING ImageSet_State = 2
	ImageSet_UPDATE  ImageSet_State = 3
	ImageSet_ERROR   ImageSet_State = 4
	ImageSet_FATAL   ImageSet_State = 5
)

var ImageSet_State_name = map[int32]string{
	0: "UNKNOWN",
	1: "STOPPED",
	2: "RUNNING",
	3: "UPDATE",
	4: "ERROR",
	5: "FATAL",
}

var ImageSet_State_value = map[string]int32{
	"UNKNOWN": 0,
	"STOPPED": 1,
	"RUNNING": 2,
	"UPDATE":  3,
	"ERROR":   4,
	"FATAL":   5,
}

func (x ImageSet_State) String() string {
	return proto.EnumName(ImageSet_State_name, int32(x))
}

func (ImageSet_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{1, 0}
}

type Image struct {
	Name                 string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Command              string          `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Systmed              bool            `protobuf:"varint,3,opt,name=systmed,proto3" json:"systmed,omitempty"`
	FsType               string          `protobuf:"bytes,4,opt,name=fs_type,json=fsType,proto3" json:"fs_type,omitempty"`
	Server               string          `protobuf:"bytes,5,opt,name=server,proto3" json:"server,omitempty"`
	State                Image_State     `protobuf:"varint,6,opt,name=state,proto3,enum=Image.Image_State" json:"state,omitempty"`
	ErrorCode            Image_ErrorCode `protobuf:"varint,7,opt,name=error_code,json=errorCode,proto3,enum=Image.Image_ErrorCode" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{0}
}
func (m *Image) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Image.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return m.Size()
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Image) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Image) GetSystmed() bool {
	if m != nil {
		return m.Systmed
	}
	return false
}

func (m *Image) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

func (m *Image) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *Image) GetState() Image_State {
	if m != nil {
		return m.State
	}
	return Image_UNKNOWN
}

func (m *Image) GetErrorCode() Image_ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return Image_NONE
}

func (*Image) XXX_MessageName() string {
	return "Image.Image"
}

type ImageSet struct {
	Images               []*Image       `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	State                ImageSet_State `protobuf:"varint,2,opt,name=state,proto3,enum=Image.ImageSet_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ImageSet) Reset()         { *m = ImageSet{} }
func (m *ImageSet) String() string { return proto.CompactTextString(m) }
func (*ImageSet) ProtoMessage()    {}
func (*ImageSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_9624c68e2b547544, []int{1}
}
func (m *ImageSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageSet.Merge(m, src)
}
func (m *ImageSet) XXX_Size() int {
	return m.Size()
}
func (m *ImageSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageSet.DiscardUnknown(m)
}

var xxx_messageInfo_ImageSet proto.InternalMessageInfo

func (m *ImageSet) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *ImageSet) GetState() ImageSet_State {
	if m != nil {
		return m.State
	}
	return ImageSet_UNKNOWN
}

func (*ImageSet) XXX_MessageName() string {
	return "Image.ImageSet"
}
func init() {
	proto.RegisterEnum("Image.Image_State", Image_State_name, Image_State_value)
	golang_proto.RegisterEnum("Image.Image_State", Image_State_name, Image_State_value)
	proto.RegisterEnum("Image.Image_ErrorCode", Image_ErrorCode_name, Image_ErrorCode_value)
	golang_proto.RegisterEnum("Image.Image_ErrorCode", Image_ErrorCode_name, Image_ErrorCode_value)
	proto.RegisterEnum("Image.ImageSet_State", ImageSet_State_name, ImageSet_State_value)
	golang_proto.RegisterEnum("Image.ImageSet_State", ImageSet_State_name, ImageSet_State_value)
	proto.RegisterType((*Image)(nil), "Image.Image")
	golang_proto.RegisterType((*Image)(nil), "Image.Image")
	proto.RegisterType((*ImageSet)(nil), "Image.ImageSet")
	golang_proto.RegisterType((*ImageSet)(nil), "Image.ImageSet")
}

func init() { proto.RegisterFile("image.proto", fileDescriptor_9624c68e2b547544) }
func init() { golang_proto.RegisterFile("image.proto", fileDescriptor_9624c68e2b547544) }

var fileDescriptor_9624c68e2b547544 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x18, 0xec, 0xc6, 0x7f, 0xc9, 0x97, 0x50, 0x56, 0x2b, 0x51, 0x2c, 0x24, 0xa2, 0x28, 0xe2, 0x10,
	0x09, 0x91, 0x4a, 0x45, 0x9c, 0x38, 0x2d, 0xf1, 0x96, 0x5a, 0x24, 0x6b, 0x6b, 0xbd, 0x29, 0x85,
	0x4b, 0x94, 0x9f, 0x4d, 0xda, 0x83, 0xeb, 0xc8, 0x76, 0x91, 0xf2, 0x00, 0x3c, 0x0f, 0xaf, 0xc0,
	0xb1, 0x47, 0x24, 0x5e, 0x00, 0xa5, 0x2f, 0x82, 0x76, 0xdd, 0xd0, 0x54, 0xe2, 0x62, 0x7d, 0xf3,
	0xcd, 0x8c, 0x3d, 0x9e, 0x5d, 0x68, 0x5e, 0xa5, 0xd3, 0x95, 0xea, 0xaf, 0xf3, 0xac, 0xcc, 0x88,
	0x13, 0x6a, 0xf0, 0xe2, 0xcd, 0xea, 0xaa, 0xbc, 0xbc, 0x99, 0xf5, 0xe7, 0x59, 0x7a, 0xbc, 0xca,
	0x56, 0xd9, 0xb1, 0x61, 0x67, 0x37, 0x4b, 0x83, 0x0c, 0x30, 0x53, 0xe5, 0xea, 0xfe, 0xb6, 0xa0,
	0x32, 0x12, 0x02, 0xf6, 0xf5, 0x34, 0x55, 0x3e, 0xea, 0xa0, 0x5e, 0x43, 0x98, 0x99, 0xf8, 0xe0,
	0xcd, 0xb3, 0x34, 0x9d, 0x5e, 0x2f, 0xfc, 0x9a, 0x59, 0xef, 0xa0, 0x66, 0x8a, 0x4d, 0x51, 0xa6,
	0x6a, 0xe1, 0x5b, 0x1d, 0xd4, 0xab, 0x8b, 0x1d, 0x24, 0xcf, 0xc1, 0x5b, 0x16, 0x93, 0x72, 0xb3,
	0x56, 0xbe, 0x6d, 0x3c, 0xee, 0xb2, 0x90, 0x9b, 0xb5, 0x22, 0x47, 0xe0, 0x16, 0x2a, 0xff, 0xa6,
	0x72, 0xdf, 0xa9, 0xf6, 0x15, 0x22, 0x3d, 0x70, 0x8a, 0x72, 0x5a, 0x2a, 0xdf, 0xed, 0xa0, 0xde,
	0xe1, 0x09, 0xe9, 0x9b, 0x3c, 0xf7, 0xcf, 0x44, 0x33, 0xa2, 0x12, 0x90, 0x77, 0x00, 0x2a, 0xcf,
	0xb3, 0x7c, 0x32, 0xcf, 0x16, 0xca, 0xf7, 0x8c, 0xfc, 0xe8, 0x91, 0x9c, 0x69, 0x7a, 0x90, 0x2d,
	0x94, 0x68, 0xa8, 0xdd, 0xd8, 0xbd, 0x04, 0xc7, 0xbc, 0x86, 0x34, 0xc1, 0x1b, 0xf3, 0x4f, 0x3c,
	0xfa, 0xcc, 0xf1, 0x01, 0x69, 0x80, 0xc3, 0x84, 0x88, 0x04, 0x46, 0x7a, 0x3c, 0xa5, 0x92, 0x0e,
	0x71, 0x4d, 0x4b, 0x06, 0x82, 0x51, 0xc9, 0x02, 0x6c, 0x69, 0x20, 0xc6, 0x9c, 0x87, 0xfc, 0x23,
	0xb6, 0x49, 0x0b, 0xea, 0x89, 0x8c, 0xe2, 0x58, 0x23, 0x87, 0x00, 0xb8, 0xec, 0x22, 0xd4, 0x32,
	0x97, 0xd4, 0xc1, 0x0e, 0x18, 0x0d, 0xb0, 0xd7, 0xfd, 0x8e, 0xa0, 0xf1, 0x2f, 0x82, 0xde, 0xf3,
	0x88, 0x33, 0x7c, 0x40, 0x30, 0xb4, 0x46, 0xf4, 0x62, 0x42, 0xa5, 0x64, 0xa3, 0x58, 0x26, 0x18,
	0x91, 0x43, 0x00, 0xbd, 0x09, 0x18, 0x95, 0x67, 0x09, 0xae, 0x91, 0xa7, 0xd0, 0x4c, 0x98, 0x38,
	0x67, 0x62, 0x72, 0x4a, 0xc3, 0x21, 0xb6, 0xf4, 0x07, 0xa8, 0x94, 0x74, 0x70, 0x86, 0x6d, 0x9d,
	0x6f, 0x14, 0x8d, 0xb9, 0xc4, 0x8e, 0x8e, 0x14, 0x9d, 0x33, 0x31, 0xa4, 0x5f, 0xb0, 0x4b, 0x9e,
	0x40, 0x23, 0xe4, 0xa1, 0xac, 0x2c, 0x9e, 0xc9, 0x11, 0xb2, 0x00, 0xd7, 0xbb, 0x3f, 0x10, 0xd4,
	0x4d, 0x21, 0x89, 0x2a, 0xc9, 0x2b, 0x70, 0xcd, 0x3d, 0x29, 0x7c, 0xd4, 0xb1, 0x7a, 0xcd, 0x93,
	0xd6, 0x7e, 0x63, 0xe2, 0x9e, 0x23, 0xaf, 0x77, 0xa7, 0x50, 0x33, 0xb5, 0x3e, 0xdb, 0x17, 0x25,
	0xaa, 0x7c, 0x74, 0x10, 0xdd, 0xf8, 0xbf, 0x8d, 0x36, 0xc1, 0x33, 0x0d, 0xb1, 0x00, 0xa3, 0xfd,
	0xee, 0x6a, 0xfa, 0x67, 0xc6, 0x71, 0x40, 0x25, 0xc3, 0xd6, 0x43, 0xef, 0xf6, 0x43, 0xef, 0xce,
	0x87, 0x97, 0xb7, 0xdb, 0x36, 0xfa, 0xb5, 0x6d, 0xa3, 0x3f, 0xdb, 0x36, 0xfa, 0x79, 0xd7, 0x46,
	0xb7, 0x77, 0x6d, 0xf4, 0xd5, 0xeb, 0xbf, 0x37, 0xf1, 0x66, 0xae, 0xb9, 0xad, 0x6f, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x6f, 0x0e, 0x94, 0xed, 0xf2, 0x02, 0x00, 0x00,
}

func (m *Image) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Image) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Image) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorCode != 0 {
		i = encodeVarintImage(dAtA, i, uint64(m.ErrorCode))
		i--
		dAtA[i] = 0x38
	}
	if m.State != 0 {
		i = encodeVarintImage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Server) > 0 {
		i -= len(m.Server)
		copy(dAtA[i:], m.Server)
		i = encodeVarintImage(dAtA, i, uint64(len(m.Server)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FsType) > 0 {
		i -= len(m.FsType)
		copy(dAtA[i:], m.FsType)
		i = encodeVarintImage(dAtA, i, uint64(len(m.FsType)))
		i--
		dAtA[i] = 0x22
	}
	if m.Systmed {
		i--
		if m.Systmed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintImage(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintImage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != 0 {
		i = encodeVarintImage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintImage(dAtA []byte, offset int, v uint64) int {
	offset -= sovImage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	if m.Systmed {
		n += 2
	}
	l = len(m.FsType)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	l = len(m.Server)
	if l > 0 {
		n += 1 + l + sovImage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovImage(uint64(m.State))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovImage(uint64(m.ErrorCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImageSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovImage(uint64(l))
		}
	}
	if m.State != 0 {
		n += 1 + sovImage(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImage(x uint64) (n int) {
	return sovImage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Image) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Systmed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Systmed = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FsType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FsType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Server = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= Image_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= Image_ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &Image{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ImageSet_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImage = fmt.Errorf("proto: unexpected end of group")
)
