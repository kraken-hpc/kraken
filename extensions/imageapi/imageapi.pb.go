// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: imageapi.proto

package imageapi

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ImageState int32

const (
	// these are kraken only error states
	ImageState_UNKNOWN ImageState = 0
	ImageState_IDLE    ImageState = 1
	ImageState_ACTIVE  ImageState = 2
	ImageState_UPDATE  ImageState = 3
	ImageState_ERROR   ImageState = 4
	ImageState_FATAL   ImageState = 5
)

var ImageState_name = map[int32]string{
	0: "UNKNOWN",
	1: "IDLE",
	2: "ACTIVE",
	3: "UPDATE",
	4: "ERROR",
	5: "FATAL",
}

var ImageState_value = map[string]int32{
	"UNKNOWN": 0,
	"IDLE":    1,
	"ACTIVE":  2,
	"UPDATE":  3,
	"ERROR":   4,
	"FATAL":   5,
}

func (x ImageState) String() string {
	return proto.EnumName(ImageState_name, int32(x))
}

func (ImageState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5161acc476a493b6, []int{0}
}

type Image_ErrorCode int32

const (
	Image_NOERROR      Image_ErrorCode = 0
	Image_MAX_ATTEMPTS Image_ErrorCode = 1
	Image_MAX_DEATHS   Image_ErrorCode = 2
	Image_SERVER_FAIL  Image_ErrorCode = 3
	Image_ATTACH       Image_ErrorCode = 4
	Image_MOUNT        Image_ErrorCode = 5
	Image_OVERLAY      Image_ErrorCode = 6
	Image_INIT_FAIL    Image_ErrorCode = 7
	Image_DIED         Image_ErrorCode = 8
)

var Image_ErrorCode_name = map[int32]string{
	0: "NOERROR",
	1: "MAX_ATTEMPTS",
	2: "MAX_DEATHS",
	3: "SERVER_FAIL",
	4: "ATTACH",
	5: "MOUNT",
	6: "OVERLAY",
	7: "INIT_FAIL",
	8: "DIED",
}

var Image_ErrorCode_value = map[string]int32{
	"NOERROR":      0,
	"MAX_ATTEMPTS": 1,
	"MAX_DEATHS":   2,
	"SERVER_FAIL":  3,
	"ATTACH":       4,
	"MOUNT":        5,
	"OVERLAY":      6,
	"INIT_FAIL":    7,
	"DIED":         8,
}

func (x Image_ErrorCode) String() string {
	return proto.EnumName(Image_ErrorCode_name, int32(x))
}

func (Image_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5161acc476a493b6, []int{0, 0}
}

type Image_Action int32

const (
	Image_NONE   Image_Action = 0
	Image_CREATE Image_Action = 1
	Image_DELETE Image_Action = 2
	Image_RELOAD Image_Action = 3
)

var Image_Action_name = map[int32]string{
	0: "NONE",
	1: "CREATE",
	2: "DELETE",
	3: "RELOAD",
}

var Image_Action_value = map[string]int32{
	"NONE":   0,
	"CREATE": 1,
	"DELETE": 2,
	"RELOAD": 3,
}

func (x Image_Action) String() string {
	return proto.EnumName(Image_Action_name, int32(x))
}

func (Image_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5161acc476a493b6, []int{0, 1}
}

// An Image is a container with some extra metadata
type Image struct {
	Container            *Container      `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	State                ImageState      `protobuf:"varint,2,opt,name=state,proto3,enum=ImageAPI.ImageState" json:"state,omitempty"`
	Action               Image_Action    `protobuf:"varint,3,opt,name=action,proto3,enum=ImageAPI.Image_Action" json:"action,omitempty"`
	LastError            Image_ErrorCode `protobuf:"varint,4,opt,name=last_error,json=lastError,proto3,enum=ImageAPI.Image_ErrorCode" json:"last_error,omitempty"`
	Retries              int32           `protobuf:"varint,5,opt,name=retries,proto3" json:"retries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_5161acc476a493b6, []int{0}
}
func (m *Image) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Image.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return m.Size()
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetContainer() *Container {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *Image) GetState() ImageState {
	if m != nil {
		return m.State
	}
	return ImageState_UNKNOWN
}

func (m *Image) GetAction() Image_Action {
	if m != nil {
		return m.Action
	}
	return Image_NONE
}

func (m *Image) GetLastError() Image_ErrorCode {
	if m != nil {
		return m.LastError
	}
	return Image_NOERROR
}

func (m *Image) GetRetries() int32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (*Image) XXX_MessageName() string {
	return "ImageAPI.Image"
}

type ImageSet struct {
	// states for Images & ImageSets
	Images               map[string]*Image `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	State                ImageState        `protobuf:"varint,2,opt,name=state,proto3,enum=ImageAPI.ImageState" json:"state,omitempty"`
	Retries              int32             `protobuf:"varint,5,opt,name=retries,proto3" json:"retries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ImageSet) Reset()         { *m = ImageSet{} }
func (m *ImageSet) String() string { return proto.CompactTextString(m) }
func (*ImageSet) ProtoMessage()    {}
func (*ImageSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_5161acc476a493b6, []int{1}
}
func (m *ImageSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageSet.Merge(m, src)
}
func (m *ImageSet) XXX_Size() int {
	return m.Size()
}
func (m *ImageSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageSet.DiscardUnknown(m)
}

var xxx_messageInfo_ImageSet proto.InternalMessageInfo

func (m *ImageSet) GetImages() map[string]*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *ImageSet) GetState() ImageState {
	if m != nil {
		return m.State
	}
	return ImageState_UNKNOWN
}

func (m *ImageSet) GetRetries() int32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (*ImageSet) XXX_MessageName() string {
	return "ImageAPI.ImageSet"
}
func init() {
	proto.RegisterEnum("ImageAPI.ImageState", ImageState_name, ImageState_value)
	golang_proto.RegisterEnum("ImageAPI.ImageState", ImageState_name, ImageState_value)
	proto.RegisterEnum("ImageAPI.Image_ErrorCode", Image_ErrorCode_name, Image_ErrorCode_value)
	golang_proto.RegisterEnum("ImageAPI.Image_ErrorCode", Image_ErrorCode_name, Image_ErrorCode_value)
	proto.RegisterEnum("ImageAPI.Image_Action", Image_Action_name, Image_Action_value)
	golang_proto.RegisterEnum("ImageAPI.Image_Action", Image_Action_name, Image_Action_value)
	proto.RegisterType((*Image)(nil), "ImageAPI.Image")
	golang_proto.RegisterType((*Image)(nil), "ImageAPI.Image")
	proto.RegisterType((*ImageSet)(nil), "ImageAPI.ImageSet")
	golang_proto.RegisterType((*ImageSet)(nil), "ImageAPI.ImageSet")
	proto.RegisterMapType((map[string]*Image)(nil), "ImageAPI.ImageSet.ImagesEntry")
	golang_proto.RegisterMapType((map[string]*Image)(nil), "ImageAPI.ImageSet.ImagesEntry")
}

func init() { proto.RegisterFile("imageapi.proto", fileDescriptor_5161acc476a493b6) }
func init() { golang_proto.RegisterFile("imageapi.proto", fileDescriptor_5161acc476a493b6) }

var fileDescriptor_5161acc476a493b6 = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xed, 0xc4, 0xb5, 0x5b, 0x5f, 0x7f, 0x5f, 0x3b, 0x1a, 0x10, 0x32, 0x5d, 0x58, 0x51, 0x24,
	0xa4, 0xa8, 0x12, 0xae, 0x08, 0x52, 0x55, 0xc1, 0x6a, 0x88, 0xa7, 0xaa, 0xc1, 0xb5, 0xcb, 0x64,
	0x1a, 0x7e, 0x36, 0x91, 0x93, 0x0e, 0xc1, 0xa2, 0x8d, 0x2b, 0x67, 0x82, 0xd4, 0x37, 0xe0, 0x65,
	0x78, 0x07, 0x96, 0x5d, 0xb2, 0xe0, 0x01, 0x50, 0xfa, 0x22, 0x68, 0xc6, 0x09, 0x41, 0x91, 0x58,
	0xb0, 0x3b, 0xf7, 0xde, 0x73, 0xee, 0x95, 0xcf, 0xf1, 0xc0, 0x4e, 0x71, 0x95, 0x8f, 0x65, 0x7e,
	0x5d, 0x84, 0xd7, 0x55, 0xa9, 0x4a, 0xb2, 0x1d, 0xeb, 0x9a, 0x9e, 0xc5, 0x7b, 0x8f, 0xc7, 0x85,
	0xfa, 0x38, 0x1b, 0x86, 0xa3, 0xf2, 0xea, 0x60, 0x5c, 0x8e, 0xcb, 0x03, 0x43, 0x18, 0xce, 0x3e,
	0x98, 0xca, 0x14, 0x06, 0xd5, 0xc2, 0xbd, 0xdd, 0xb1, 0x9c, 0xc8, 0x2a, 0x57, 0xf2, 0xa2, 0x6e,
	0xb4, 0xbe, 0x5a, 0x60, 0x9b, 0x65, 0xe4, 0x09, 0xb8, 0xa3, 0x72, 0xa2, 0xf2, 0x62, 0x22, 0x2b,
	0x1f, 0x35, 0x51, 0xdb, 0xeb, 0xdc, 0x0b, 0x97, 0x77, 0xc2, 0xee, 0x72, 0xc4, 0x57, 0x2c, 0xb2,
	0x0f, 0xf6, 0x54, 0xe5, 0x4a, 0xfa, 0x8d, 0x26, 0x6a, 0xef, 0x74, 0xee, 0xaf, 0xe8, 0x06, 0xf4,
	0xf4, 0x8c, 0xd7, 0x14, 0x12, 0x82, 0x93, 0x8f, 0x54, 0x51, 0x4e, 0x7c, 0xcb, 0x90, 0x1f, 0xac,
	0x91, 0x43, 0x6a, 0xa6, 0x7c, 0xc1, 0x22, 0x47, 0x00, 0x97, 0xf9, 0x54, 0x0d, 0x64, 0x55, 0x95,
	0x95, 0xbf, 0x69, 0x34, 0x0f, 0xd7, 0x35, 0x4c, 0x0f, 0xbb, 0xe5, 0x85, 0xe4, 0xae, 0x26, 0x9b,
	0x92, 0xf8, 0xb0, 0x55, 0x49, 0x55, 0x15, 0x72, 0xea, 0xdb, 0x4d, 0xd4, 0xb6, 0xf9, 0xb2, 0x6c,
	0x7d, 0x41, 0xe0, 0xfe, 0x96, 0x10, 0x0f, 0xb6, 0xd2, 0x8c, 0x71, 0x9e, 0x71, 0xbc, 0x41, 0x30,
	0xfc, 0x77, 0x4a, 0xdf, 0x0e, 0xa8, 0x10, 0xec, 0xf4, 0x4c, 0xf4, 0x30, 0x22, 0x3b, 0x00, 0xba,
	0x13, 0x31, 0x2a, 0x4e, 0x7a, 0xb8, 0x41, 0x76, 0xc1, 0xeb, 0x31, 0xde, 0x67, 0x7c, 0x70, 0x4c,
	0xe3, 0x04, 0x5b, 0x04, 0xc0, 0xa1, 0x42, 0xd0, 0xee, 0x09, 0xde, 0x24, 0x2e, 0xd8, 0xa7, 0xd9,
	0x79, 0x2a, 0xb0, 0xad, 0xd7, 0x66, 0x7d, 0xc6, 0x13, 0xfa, 0x0e, 0x3b, 0xe4, 0x7f, 0x70, 0xe3,
	0x34, 0x16, 0xb5, 0x64, 0x8b, 0x6c, 0xc3, 0x66, 0x14, 0xb3, 0x08, 0x6f, 0xb7, 0x0e, 0xc1, 0xa9,
	0x3f, 0x58, 0xf7, 0xd2, 0x2c, 0x65, 0x78, 0x43, 0x2f, 0xec, 0x72, 0x46, 0x05, 0xc3, 0x48, 0xe3,
	0x88, 0x25, 0x4c, 0x30, 0xdc, 0xd0, 0x98, 0xb3, 0x24, 0xa3, 0x11, 0xb6, 0x5a, 0x3f, 0x10, 0xd4,
	0xe1, 0xf7, 0xa4, 0x22, 0x87, 0xe0, 0x98, 0x1f, 0x63, 0xea, 0xa3, 0xa6, 0xd5, 0xf6, 0x3a, 0xc1,
	0x7a, 0x00, 0x52, 0xd5, 0x60, 0xca, 0x26, 0xaa, 0xba, 0xe1, 0x0b, 0xf6, 0x3f, 0xe5, 0xf6, 0x57,
	0x37, 0xf7, 0x5e, 0x82, 0xf7, 0xc7, 0x72, 0x82, 0xc1, 0xfa, 0x24, 0x6f, 0xcc, 0x9f, 0xe3, 0x72,
	0x0d, 0xc9, 0x23, 0xb0, 0x3f, 0xe7, 0x97, 0xb3, 0xfa, 0x8c, 0xd7, 0xd9, 0x5d, 0x3b, 0xc3, 0xeb,
	0xe9, 0xb3, 0xc6, 0x11, 0xda, 0x7f, 0x0d, 0xb0, 0x3a, 0xad, 0x2d, 0x3c, 0x4f, 0x5f, 0xa5, 0xd9,
	0x9b, 0x14, 0x6f, 0x68, 0x7f, 0xe2, 0x28, 0x59, 0x78, 0x42, 0xbb, 0x22, 0xee, 0x2f, 0x3c, 0x39,
	0x3f, 0x8b, 0xb4, 0x57, 0x96, 0x36, 0xbf, 0x8e, 0xd1, 0xe4, 0x70, 0x4c, 0x05, 0x4d, 0xb0, 0xfd,
	0xa2, 0x79, 0x3b, 0x0f, 0xd0, 0xf7, 0x79, 0x80, 0x7e, 0xce, 0x03, 0xf4, 0xed, 0x2e, 0x40, 0xb7,
	0x77, 0x01, 0x7a, 0x0f, 0xe1, 0xf3, 0xe5, 0x5b, 0x1a, 0x3a, 0xe6, 0x09, 0x3c, 0xfd, 0x15, 0x00,
	0x00, 0xff, 0xff, 0x19, 0x54, 0x0c, 0x46, 0x5e, 0x03, 0x00, 0x00,
}

func (m *Image) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Image) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Image) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Retries != 0 {
		i = encodeVarintImageapi(dAtA, i, uint64(m.Retries))
		i--
		dAtA[i] = 0x28
	}
	if m.LastError != 0 {
		i = encodeVarintImageapi(dAtA, i, uint64(m.LastError))
		i--
		dAtA[i] = 0x20
	}
	if m.Action != 0 {
		i = encodeVarintImageapi(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x18
	}
	if m.State != 0 {
		i = encodeVarintImageapi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.Container != nil {
		{
			size, err := m.Container.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImageapi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Retries != 0 {
		i = encodeVarintImageapi(dAtA, i, uint64(m.Retries))
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintImageapi(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Images) > 0 {
		for k := range m.Images {
			v := m.Images[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintImageapi(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintImageapi(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintImageapi(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintImageapi(dAtA []byte, offset int, v uint64) int {
	offset -= sovImageapi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Container != nil {
		l = m.Container.Size()
		n += 1 + l + sovImageapi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovImageapi(uint64(m.State))
	}
	if m.Action != 0 {
		n += 1 + sovImageapi(uint64(m.Action))
	}
	if m.LastError != 0 {
		n += 1 + sovImageapi(uint64(m.LastError))
	}
	if m.Retries != 0 {
		n += 1 + sovImageapi(uint64(m.Retries))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImageSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Images) > 0 {
		for k, v := range m.Images {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovImageapi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovImageapi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovImageapi(uint64(mapEntrySize))
		}
	}
	if m.State != 0 {
		n += 1 + sovImageapi(uint64(m.State))
	}
	if m.Retries != 0 {
		n += 1 + sovImageapi(uint64(m.Retries))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImageapi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImageapi(x uint64) (n int) {
	return sovImageapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Image) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImageapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImageapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImageapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Container == nil {
				m.Container = &Container{}
			}
			if err := m.Container.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ImageState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Image_Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastError", wireType)
			}
			m.LastError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastError |= Image_ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retries", wireType)
			}
			m.Retries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retries |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImageapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImageapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImageapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImageapi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImageapi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Images == nil {
				m.Images = make(map[string]*Image)
			}
			var mapkey string
			var mapvalue *Image
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImageapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImageapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthImageapi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthImageapi
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImageapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthImageapi
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthImageapi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Image{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipImageapi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthImageapi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Images[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ImageState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retries", wireType)
			}
			m.Retries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retries |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImageapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImageapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImageapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImageapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImageapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImageapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImageapi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImageapi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImageapi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImageapi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImageapi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImageapi = fmt.Errorf("proto: unexpected end of group")
)
