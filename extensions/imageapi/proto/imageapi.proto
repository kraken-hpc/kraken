/* imageapi.proto: generic data for tracking images
 *
 * Author: J. Lowell Wofford <lowell@lanl.gov>
 *
 * This software is open source software available under the BSD-3 license.
 * Copyright (c) 2018, Triad National Security, LLC
 * See LICENSE file for details.
 */

syntax = "proto3";
package ImageAPI;

option go_package = ".;imageapi";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_registration) = true;
option (gogoproto.messagename_all) = true;

import "generated.proto";

enum ImageState { 
    // these are kraken only error states
    UNKNOWN     = 0; // unknown...
    IDLE        = 1; // idle the image set (no running images)
    ACTIVE      = 2; // all images running & ok
    UPDATE      = 3; // image needs to be updated
    ERROR       = 4; // recoverable error state
    FATAL       = 5; // non-recoverable error state
}

// An Image is a container with some extra metadata
message Image{
    enum ErrorCode {
        NOERROR         = 0; // no error
        MAX_ATTEMPTS    = 1; // failed to attach too many times
        MAX_DEATHS      = 2; // died too many times
        SERVER_FAIL     = 3; // underlying server error
        ATTACH          = 4; // failed to attach
        MOUNT           = 5; // failed to mount
        OVERLAY         = 6; // failed to overlay
        INIT_FAIL       = 7; // failed to init
        DIED            = 8; // container is dead
        // ... 
    }
    enum Action {
        NONE            = 0; // no action needed
        CREATE          = 1; // this image hasn't been created yet
        DELETE          = 2; // this image should be deleted
        RELOAD          = 3; // container needs to be reloaded
    }
    Container   container   = 1; // the container definition
    ImageState  state       = 2; // current state of this image
    Action      action      = 3; // current pending action on this image
    ErrorCode   last_error  = 4; // last reached error code
    int32       retries     = 5; // The number of times that this image has hit error without hitting success
}

message ImageSet{
    // states for Images & ImageSets
    map<string, Image>  images  = 1; // map key is a unique identifier 
    ImageState          state   = 2;
    int32               retries = 5; // The number of times that this imageset has hit error without hitting success
}