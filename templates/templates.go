// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/app/includes.go.tpl
// templates/app/main.go.tpl
// templates/app/pprof.go.tpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _appIncludesGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8c\x41\x0a\xc2\x30\x10\x45\xf7\x73\x8a\x4f\x0f\x90\x1c\xc2\x76\xe1\x42\xbb\xe9\x5e\x46\x33\x84\x10\x3b\x29\x69\x04\x25\xe4\xee\x12\x10\x74\xe7\xf6\xfd\xff\x9e\xb5\x38\x24\x27\xf0\xa2\x92\xb9\x88\xc3\xf5\x85\x98\x39\x8a\x1a\x8c\x33\xce\xf3\x82\x69\x3c\x2e\xb4\xf1\x2d\xb2\x17\xac\x1c\x94\xc8\x5a\x4c\xcf\x22\xba\x87\xa4\x3b\xd5\x8a\xcc\xea\x05\xe6\x0b\xd1\x1a\x85\x75\x4b\xb9\xe0\x82\xa1\x56\x18\xb4\x36\xf4\xab\xa8\xeb\x63\x6f\x9c\x92\x7b\xdc\xe5\x37\xf0\x21\x7f\xed\x77\x00\x00\x00\xff\xff\xc4\x93\x2e\xf2\xb8\x00\x00\x00")

func appIncludesGoTplBytes() ([]byte, error) {
	return bindataRead(
		_appIncludesGoTpl,
		"app/includes.go.tpl",
	)
}

func appIncludesGoTpl() (*asset, error) {
	bytes, err := appIncludesGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/includes.go.tpl", size: 184, mode: os.FileMode(420), modTime: time.Unix(1618504704, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appMainGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x7b\x6f\x73\x1b\x37\x92\xf7\x6b\xce\xa7\xe8\x4c\x95\xbd\x64\x96\x1a\x3a\x89\x93\x7d\x96\x29\xed\x96\x57\x92\xf3\xf0\xce\x96\x58\x92\x9d\xd4\x96\xd7\xe5\x02\x67\x7a\x48\x9c\x86\xc0\x2c\x80\x11\xcd\x28\xfa\xee\x57\xdd\x00\x86\xc3\x21\x65\x3b\xbb\x77\x55\x97\x2a\xdb\x12\x06\x68\xfc\xba\xd1\xe8\xbf\xc8\x64\x02\x67\xba\x40\x58\xa2\x42\x23\x1c\x16\xb0\xd8\xc2\xad\x11\xb7\xa8\x32\x38\xbf\x82\xcb\xab\x37\x70\x71\x3e\x7b\x93\x24\xb5\xc8\x6f\xc5\x12\x61\x2d\xa4\x4a\x12\xb9\xae\xb5\x71\x30\x4c\x06\x29\xaa\x5c\x17\x52\x2d\x27\xff\x65\xb5\x4a\x93\x41\x5a\x56\x62\xc9\xff\xae\x1d\xfd\x23\xf5\x44\xea\xc6\xc9\x8a\x7e\x51\xc8\x63\xda\xd2\xdf\xb5\x70\xab\x49\x29\x2b\xa4\x1f\x68\xc0\x60\x59\x61\xce\x33\x9c\x5c\x63\x9a\x24\x83\x74\x29\xdd\xaa\x59\x64\xb9\x5e\x4f\x72\x6d\x50\xdb\xc9\x52\x9f\xd8\xad\x75\xb8\x2e\x26\x85\xc0\x35\x6f\x5a\xbb\x6d\x8d\x16\xba\xb3\x97\x7a\xa9\x27\xb5\xd1\x4e\x2f\x9a\x72\xc2\xdf\xd3\x7d\x7a\x9e\xcf\x93\x55\x9d\x13\xcd\x52\x9b\xdb\xc7\x27\xf8\x1f\x19\xc2\x67\x27\x55\x72\xd1\xd9\x4f\xd7\xb7\xcb\x4c\xaa\xc9\x56\xac\xab\xec\xee\x5b\x62\xea\x03\x90\x20\x26\x2b\xe7\xea\x49\x5d\x1b\x5d\xd2\x60\x5e\x2f\xe0\xf3\x9b\x7b\x8e\x3e\x0b\x01\x3f\x3a\x54\x56\x6a\x65\x27\xb2\xbe\x7b\x9e\x26\x03\xfa\xc7\x7d\x66\x83\xde\xaa\x49\xde\x58\xa7\xd7\x91\x15\xf3\x59\x80\x6b\x5d\x34\x15\xda\x89\x41\xeb\x44\x2d\xd3\x64\xd0\x34\xb2\xd8\x5b\x64\x85\xd3\x46\x4e\x96\x3a\xa3\x4f\x69\x32\x4a\x92\x5c\x2b\xeb\xe0\x67\x34\xb4\x33\x9c\x42\x7a\x7f\x0f\x59\xfc\xf5\xe1\x21\x4d\x12\x42\x00\xaf\x1b\x27\x9c\xd4\xea\x4c\xab\x52\x2e\xc1\x3a\xd3\xe4\x0e\xee\x93\xc1\xb9\xb4\x62\x51\x21\x2c\xb4\xae\xa0\xfd\x6f\x32\x81\x5c\xaf\xeb\x0a\x1d\x56\x5b\x28\xc2\x1c\xb7\x42\x58\x07\x42\xc9\xe0\x8d\x5c\xa3\x6e\x1c\x90\xb2\x65\xe7\x8d\xe1\x61\x5a\xa9\xef\xd0\x18\x59\xf8\xf9\xce\xcf\x4a\x06\x93\x09\x6c\xe8\x02\x6c\x41\x54\x95\xde\xc4\x59\x52\x2d\x61\xad\x0d\x4d\x96\x6a\x69\x01\xef\x50\xb9\x46\x54\xd5\x36\x79\x08\xd8\x6f\xd0\xdc\xc9\x1c\x67\xca\x3a\xa1\x72\x7c\x94\x05\x88\x4c\x4c\x26\x7b\x90\x37\x2b\x5d\x21\xc8\xb0\x1c\x86\xa5\x36\x50\x60\x29\x9a\xca\xd9\x51\x32\x78\xcd\x72\x27\xae\xad\x33\x04\x67\x32\x01\x25\xd6\x08\xba\xf4\x1c\xfb\xef\x6e\x25\x2d\xdc\xcc\x40\x5a\x58\x08\x8b\x05\x68\x35\x06\xad\xaa\x2d\x28\xc4\x02\x0b\xd8\xac\x50\x11\x5d\xa9\x88\x88\xc2\x4d\xbb\xa5\x4d\x06\x51\xfe\x16\xd6\xa2\x7e\xe7\x37\x7a\xbf\x7f\x28\xc4\xef\x64\x02\x2f\xe0\xba\x51\x24\xb5\xc8\x27\x3a\xdb\x8a\xd4\x02\x81\xf7\x0a\x03\x52\x39\x34\x4a\x54\x16\x34\xf1\x25\x1c\x58\x27\x8c\x6b\x6a\x22\x73\xa9\x1d\x4e\xa3\xc4\x77\x42\x85\x8d\x50\x0e\x9c\x86\x5c\xab\x3b\x34\xce\xb3\xe5\x34\x08\x88\xb7\x1d\xac\x06\xe9\x20\xd7\x4d\x55\xc0\x02\xc1\xa2\x91\xa2\x92\xbf\x62\x41\xf3\x14\xca\xe5\x6a\xa1\x8d\x85\x3b\x29\x60\x79\x3d\x3f\xf3\x87\xd4\x03\xdd\x1e\xce\x4b\x83\xf8\x2b\xee\x34\x8b\xcf\x28\x19\xcc\xce\x61\xff\x3f\x52\xe8\xec\xed\xdb\xd9\x39\x89\xff\xaa\x31\xa0\x37\x0a\x14\x59\xd7\xd9\x79\x32\x98\xcd\x7b\xd3\x15\xba\xcc\x0f\x7a\x55\x5d\x37\x4a\xe6\x41\xc2\xb3\x39\x2d\x78\x31\x9f\x3d\xba\x60\x36\xe7\x93\x0d\x37\x0d\xec\x8a\x79\xad\xa4\x75\xa8\x80\x74\xfb\x95\x5e\xbe\xc2\x3b\xdc\xdd\x88\x46\x2a\x97\x0c\xe6\xc2\xa0\x72\x07\x54\x93\xc1\xa5\x9e\x1b\x2c\xe5\xc7\x3d\x2e\xfd\x5e\x51\x3b\x2b\xbd\x84\x9a\x27\xfd\x35\x19\xdc\x14\x97\xda\xc9\x72\x7b\x64\x7e\x00\xb3\x41\x50\x7e\x4a\x30\xd7\xb4\xca\x09\x87\x2f\x65\xd5\x8a\x73\xa7\xb0\x73\xe1\x56\x74\x3c\x96\xa6\x00\xb9\x05\x18\x92\x4b\x19\x25\x83\xde\xf5\xd9\xd3\xc0\xa3\x57\x8b\x14\xf1\x4e\x18\x20\x57\x64\x3b\x47\x99\x97\x4b\xbf\xb9\x5f\x9c\x0c\xca\x78\xb6\xfe\x4c\x65\x61\x9d\xd9\xc1\xa2\x81\x3d\x9c\x64\x46\x0f\x06\x48\xfe\x9d\x81\xaa\x0a\x62\xf7\x02\x57\xda\x8b\x2c\xec\x50\x47\xf9\xc7\xe9\xb5\xc9\xbb\x5a\x65\x8b\x20\xb3\xf0\x2b\x0b\xa3\x33\xfd\x2e\xd8\x45\xff\x3d\xb0\x69\xd1\xbd\x64\x4e\x3b\x72\xe1\xef\x49\xd9\xa8\x9c\xa5\x30\xb3\x37\xe8\x86\x65\xa0\x33\xf2\xa7\x75\x9f\x0c\x3e\x8c\x69\x35\x4c\x4f\x5b\x22\xef\xca\xf7\xc9\xc0\xa0\x6b\x8c\xa2\x31\xda\x83\xa9\x34\x56\x2c\xf1\xe2\xa3\x74\x64\x7d\xd6\x7c\x55\x89\xd4\x18\x04\x64\x59\xc6\x37\xb9\x14\x39\xde\x3f\x8c\x88\x6e\xb9\x76\xd9\xdc\x48\xe5\xca\x61\xfa\x52\x38\x51\x01\x1a\xa3\xcd\x14\xd2\x3f\xfa\xe5\x7f\x4c\xff\xa1\xd2\x31\x88\x2c\xcb\x46\xc9\x80\x20\xfa\xf9\xe7\xc1\xac\x0d\x47\xc9\x40\xdb\x8c\x37\xfc\x66\x14\x2c\xcb\xa2\x91\x55\x01\x42\x15\x50\xeb\xba\xa9\x48\x36\x02\x8c\xbf\xb7\x64\x0f\xe8\xe2\x6e\xa4\x5b\xb5\xc6\xd1\x43\x57\xb8\xd9\xbb\xdc\xc3\x11\x0c\x4d\x0e\x5f\xef\x0d\x32\x6c\x93\xc3\x29\x3c\xdd\x1b\xbf\x4f\x06\xc1\x04\x4c\x3b\xd7\xa6\x14\x95\xc5\x71\x32\x18\xcc\xce\xa7\xc7\xec\xc0\x4b\xa3\xd7\x37\x2c\xa0\x2b\x73\x29\xab\x61\xfa\xcd\xb7\xdf\xe1\xf3\xef\x7f\xf8\xd3\x09\xfe\xbf\x3f\x2f\x4e\xbe\xf9\xb6\xf8\xee\x44\x3c\xff\xfe\x87\x93\xe7\xdf\xfe\xf0\xc3\xf7\xdf\x3f\x7f\xfe\xec\xd9\xb3\x67\xe9\x88\x29\xce\xfb\x14\xe9\x8e\xce\x85\xb1\x38\x9b\x13\xa1\x3f\x65\xcf\xb2\x67\xd9\x37\x71\xf6\x8b\xf9\x6c\xfa\xa5\xb3\xa3\x55\xd8\x2d\xf8\x9e\x86\xbd\x55\xe8\x52\x51\xb2\xa2\x0f\xd1\x2a\x4c\x0f\x19\x8f\x06\xe0\xd8\xa7\x78\xcb\xdb\x6f\x69\xca\xe3\xbd\x7b\x3c\xfd\xec\x45\xbe\x7f\x18\x27\x83\x07\x3a\x97\xac\xbf\xf8\x5d\x6a\x2d\xa6\xef\xe1\xf4\xb8\x77\xa5\x63\x0b\x86\x6b\xda\xc5\xe6\x7d\x25\x03\x4b\x95\x56\xc8\xc0\x5a\xdf\x36\x7d\xdc\xb9\x45\x28\x93\x09\x50\x2c\xcc\xe6\x37\xa8\x19\x39\x18\x42\xb0\xf3\xd0\x41\x17\xa5\x4a\x06\xe4\xee\xe8\x96\x49\x4b\xb7\xcc\x08\xb5\xa4\xcf\x06\xb3\x6b\x5c\x4a\xeb\xcc\xf6\x80\x33\x52\x44\x5e\x46\x3e\x9c\x56\xee\x16\x12\x15\xfa\x7a\x54\x20\x34\xfd\x93\xf2\x38\x2e\x91\x3d\x99\x58\x99\xf9\xdf\x86\xa3\xf0\xed\x4b\x45\x33\x20\xe1\xd0\x9f\x07\xcf\xb3\x95\x63\x0a\xb5\x1e\xe5\x7a\x17\x4f\xec\xb3\xbb\x6e\xdc\x6e\x09\x13\x78\x94\x61\x2b\xdf\xef\xc8\xb4\xec\xf7\xb0\xed\xf3\xdd\xe1\x3a\x44\x7f\x53\xda\x24\x0b\xbf\x04\xae\x77\x9c\x78\x43\xd8\x1a\xc1\x9a\x4c\xd4\xdf\xc8\x0a\xcd\x54\xa9\x87\x07\xa6\x8e\x42\xd7\x4b\x8a\xbc\x1e\x1e\x20\x98\xea\x29\x3c\xb1\xff\x50\x4f\x6c\x3a\x8e\x31\xee\xd8\x4b\xa2\x43\x66\xb4\xbf\x41\xb0\x3f\xad\x29\x3c\x6e\xab\x8a\x31\x7c\x20\x49\x71\x62\xf1\x5a\x18\xbb\x12\xd5\xd0\xe4\xa3\x7d\x44\x27\x27\x27\xff\x50\x69\x6f\x90\x10\xa5\xe3\x60\xc1\x87\xc5\x28\xda\x57\x0e\xc5\xd9\x59\xea\xc6\xf4\x0d\x6b\x69\xf4\x1a\x84\x59\x36\x6b\x54\xce\x4e\xe2\xa8\xac\x30\x98\x59\xb6\xce\xfb\x86\xf6\x38\x72\xf2\x59\xe8\x1d\x42\xe2\xc3\x6a\x61\x41\x40\x87\x22\xd8\x1a\x73\x59\x4a\x2c\xfe\x0a\x30\xe3\x80\xae\x26\x93\x06\xd2\x65\xc9\x40\x96\x1d\x9f\x96\xfa\x65\x29\x53\x66\xd2\x05\xbc\x7b\xbf\xd8\x3a\x4c\x06\x03\xfc\xc8\xca\x14\x93\xcc\xec\xe2\xa3\x1b\x72\x50\x90\x85\x50\x60\x94\x0c\x88\x5c\x31\x06\x84\x53\xf0\x89\x6a\x76\x8d\xa2\xa0\x8f\xbd\xa9\x3f\x02\xc2\x57\xa7\x64\x1a\xbd\x4a\xee\x3c\x62\xea\x43\x4d\xa5\x1d\x18\x14\x45\x4f\x72\x31\xb1\x28\xd9\x22\x3e\xb9\x4b\xc7\xc0\xfb\x92\x96\xd9\x8d\x74\xf9\x0a\x08\x27\xd1\xcc\x85\x45\x48\x33\x3a\xd2\x74\x4c\x3f\xac\xab\x74\x4a\x7b\xc9\x92\x01\xf2\x59\xbf\x55\xeb\x70\xda\xc5\x18\x4c\x7e\x80\xab\x0b\xac\x14\xb2\xf2\x61\x6f\x81\x39\xc5\xa2\x7f\x7f\xf1\xfa\xd5\x71\x7c\x5d\x68\x8c\x2d\x80\xe1\xbc\xbe\x0b\x82\x06\xfe\x3d\x10\xff\x71\x73\x75\xf9\x85\x20\x82\x89\x9d\xf6\x04\xfe\xb8\x84\x61\xdd\x58\x07\xa8\x0a\x90\x0a\x18\xfc\x18\x58\xa0\x63\xd0\x06\x48\xa2\x63\x3e\x28\xbe\x91\xf8\xd1\x8d\xe2\x5d\x67\x4d\x54\x21\xaf\xab\x28\xcb\x53\x5b\x4e\xe9\xc0\xad\x84\x63\x1d\xa5\x50\x89\x55\x95\x14\x83\xe7\x9f\xf8\x08\xb2\xaf\x93\x7e\x34\xe8\xa4\xc9\xb3\x90\x43\x9c\xfa\x88\x34\x8b\x8b\xbc\x3b\x39\x91\x45\x7f\xbd\x2c\xd2\x11\xfc\xf6\x9b\x8f\x25\x2e\xfe\xd9\xf0\xcd\xce\x66\xe7\x63\x3f\x72\x29\x2b\x4f\x5a\x96\x10\xc6\x89\x78\x2f\xf2\x08\xea\x2b\x8b\x4f\x69\x6e\x6d\xf4\x9d\xa4\xe4\x6f\x76\x4e\x89\x21\x49\xe6\x4e\x54\xb2\xe8\x29\x6a\x44\x5a\x1f\x20\xad\x3d\x52\x82\x31\x87\xd3\xdd\x26\x01\xda\x1c\x4e\xf7\x22\x92\x80\xa9\x1e\xfd\x78\xb8\xe4\x38\xae\x79\x1f\x17\x1d\x5c\x4b\xa6\x07\x4f\xd4\xf2\x10\xa1\xa8\x65\x07\x24\xa5\x55\x47\x70\xf2\xf0\x51\xa8\xa2\x96\x5f\x8c\x96\xa8\x7c\x1a\x31\x51\xdb\x03\x5d\xe9\x65\x1f\x72\xa5\x97\x2d\xe0\x36\x91\x3b\x3d\x85\x67\x70\xcf\xb9\x3d\x67\xc6\x9c\xf7\xae\x51\x28\x0b\x5b\xdd\x40\x2e\xd4\x1f\x1c\x6b\x68\x55\xd1\x55\xfb\x15\x8d\xa6\x2b\x10\xed\xaa\x57\xc4\x1d\xb5\x00\xc8\xa7\x2b\x2d\x98\x98\xae\xf4\x11\xc5\xf1\x9d\x4a\xb7\x09\x63\xa4\xb4\x5b\x1a\x68\xf9\x5c\xa7\x4f\xc9\x8f\xa6\x5d\xfd\x0d\x49\xe9\x31\xe9\xfb\xd9\x5e\xfc\x71\xda\x67\x8e\x20\x4c\xfb\xd4\x29\x04\xaa\x7b\xc7\x10\x33\xaf\x3e\xde\x38\xbe\xe3\xbc\x4d\x7d\x23\xe7\xbb\xa5\x91\x16\x05\xc0\x07\x84\x68\xb0\x43\xa5\x4d\x85\x5b\x32\x7e\xd5\xb1\xa8\x43\xe7\x68\xed\xcd\xec\x2a\x16\x51\x1e\x71\xac\x93\x09\x48\xf7\x07\x0b\x28\xac\x44\xeb\x40\x96\x94\x85\x87\xac\x89\x76\x71\x20\x55\x81\x1f\x41\x97\x07\x31\xab\x85\x52\x1a\xeb\x92\x81\x95\x6b\x51\x93\xd7\xec\xc4\x7b\x5c\x03\xec\x07\x60\xf7\x0f\xff\x5b\xd1\x2d\x43\x68\x03\x3a\x2b\xf7\x02\xcb\xb8\x2e\xdf\x2d\x3c\x12\x1c\x46\xf5\xa2\x30\x54\xdf\x72\x82\xbb\x23\xfa\x23\x0d\xfd\xf6\x9b\x2f\x92\x9d\x9e\x02\xa7\x12\x7e\xeb\xc9\x84\x20\xe1\x47\x69\x9d\xb3\xc1\xe9\x59\x99\x67\xb1\x08\xe2\x9d\x9b\x2c\x8f\xad\x1d\xec\x05\x59\xbf\xbc\xb8\xbe\x9c\x5d\xfe\x34\xe5\x4c\xc1\x5a\x3c\x92\x25\x08\x45\xfa\xb9\xc0\x58\xec\x2b\x32\x98\x2d\x95\x26\x91\x67\x29\xbb\x40\xf6\x81\x8c\xaa\x5b\x0f\x64\x78\xe4\x99\x58\x34\xe4\x24\x2b\x74\x38\xfc\xb4\xe0\xdf\x75\x62\xfb\xf7\x63\xc6\x3f\x8a\xc4\x37\x08\xa2\xb2\x9a\x0b\x81\xde\x4f\x13\xc1\xbd\x72\xa9\x7d\x7c\xa7\x36\x06\xef\x51\x95\x0e\x0a\x8d\x96\xec\xd2\x5a\xdc\x92\x00\x94\x45\x26\xaf\x77\xce\x15\x2b\x8b\xbc\x20\xd7\xca\x49\xd5\x60\xf4\xfc\x7c\xd8\xeb\xc6\xb5\x69\x41\xde\xd5\x94\xbc\x97\x40\xf0\x99\x7c\x88\x67\xfd\x08\xbe\xce\xe9\x87\x03\xf3\xc7\xbd\x12\x76\xc7\x27\x18\x5e\x87\x06\x0b\x3f\x47\x96\xf4\xf1\x8b\x48\xbf\x0b\x78\xf7\xf6\xe8\x6c\xf2\x35\x19\xed\xaf\xdb\xbd\x0e\xb6\x0a\x7b\xf5\xd5\xed\xb3\x82\xf7\xbb\x8f\xa3\xb8\x46\x61\xd5\x43\xf8\x97\x32\x9c\x1b\x74\x31\xc9\xe1\x1d\xc2\x2f\x61\xea\x03\x9f\x43\x0f\x71\x3c\xbc\x95\xb8\x0b\xd5\x63\x02\x2e\xdd\x31\xe0\x47\x35\xff\x78\x94\xd6\xc6\xf6\x3b\x39\xb4\x05\x77\xbe\xe0\x5a\x79\x0d\x27\x33\x1e\xa7\x90\xfd\x9e\x3c\xb1\x9d\x0b\xc2\x29\x4c\xab\x1c\x1d\xb6\x3d\xd7\xfb\x1c\xed\x8e\x40\xe9\x4f\x1c\xf5\xff\x1d\x2e\x1e\xda\x3c\xb4\xc3\xc7\xfe\xb1\x30\xf5\xe4\x5f\x45\x2d\xb8\xc0\x7f\x60\x93\x86\x4f\xec\x28\x03\x38\xef\x76\x01\x0e\x5d\x45\xf0\xac\x5b\x74\x60\x9b\xba\xd6\xc6\xed\xd9\xae\x96\xa9\xd6\xc5\x46\x57\xb6\x16\x52\x0d\x63\xa9\x6d\x7a\x7a\xa4\x34\xc7\x5e\xcc\x97\x33\x69\x0b\x4a\x49\x65\x41\x27\x44\x19\xa0\x23\xcf\x75\xdd\x28\x82\x16\x4a\xbd\xbe\x76\xf8\x37\xad\xab\x9f\x85\x19\x3e\xf5\xae\xf4\x2e\x66\xda\x69\xf8\x89\x5c\x3f\xa7\xfe\x90\x72\x8a\x1d\xb3\x73\x2e\x26\x7a\x07\x29\x95\xaf\x4c\xc6\x51\xfc\x28\x5d\x1a\x6b\x93\x3e\xa2\xee\xec\x10\x92\xc2\x31\xc4\xfc\x73\x0c\x29\xfd\xa9\x43\x19\xbb\x5f\x97\xec\xa6\x28\x2d\xd5\x1e\xea\xda\xe4\x11\x9f\xc9\x0f\x10\x73\xbd\x7f\x3f\x25\x8f\x30\x61\x98\x0b\x45\x7e\xa4\xb1\x74\xb2\x94\xa1\x2c\x04\x79\x53\x52\x44\x7f\xd0\x7e\xc5\x28\xf5\xf2\xdd\x13\xa1\x0f\x3f\x8e\x43\xf2\x99\xca\x18\x62\x46\x43\xb9\x5e\xc8\x66\xc6\x90\x72\xb7\x86\x81\xdd\xbc\xbe\x80\xd2\xe8\x5f\x51\xc1\x50\x66\x98\x41\xa1\x49\x45\x9d\xd9\x92\x30\x58\xfd\x91\x6c\xbe\x2f\xef\xdb\x4e\xab\x67\xf4\xb8\x8c\x65\x31\x06\x4a\x85\xc6\x3e\xc9\x09\x13\x86\x23\xda\x99\xf5\x78\x0b\x02\xb8\xe3\x42\x7c\xb2\x81\x52\xba\xc0\x4f\x10\xac\x89\x60\x1d\x08\xce\xbb\x04\x37\x94\xe3\x91\x85\xdb\x52\xe4\xc8\x1d\xb6\x5e\x53\x86\x84\xed\x1b\x2c\x52\x2d\x3f\x85\x9a\x42\x7c\xde\x87\xf2\x8e\x71\x9b\x5d\x1c\xec\x36\x9b\x93\x6c\x1a\x8b\x01\x3e\xc2\x35\xde\xbc\xa1\x14\xa2\x25\xfe\x56\x2a\xd7\x21\xed\x83\xf5\x31\x70\x82\x30\xee\x66\x07\x24\x12\xf4\x47\x51\xe9\x25\xf8\x1e\xc4\xf0\xd9\xc9\x9f\x47\x8f\x29\x5b\x0c\xd7\xc7\xb0\x0b\xee\x99\x64\x0c\xec\xc7\x90\xfa\x43\x0c\x0d\x0c\xa2\xbb\x46\x4b\x11\xb7\xf5\x55\x76\x52\x45\xeb\xc4\xba\xb6\x8f\x4b\xc3\x87\xda\x7c\x31\x38\xee\x0f\xd7\x64\x36\x07\x51\x14\x85\x41\x6b\xe9\x4a\xc7\xa4\xe0\x38\xd4\x18\x5f\x13\x93\x31\x1a\x67\xa8\x31\x12\x67\x1e\xba\xad\x26\xdf\xca\xec\x56\xe3\xa4\x05\xa9\xa4\x0b\x7d\xc0\xc7\xf1\xb2\x7e\x7a\xd5\x76\x41\xdd\xdb\x48\x7d\xef\x7a\x73\x0d\x83\x0b\x0e\x14\xb8\x08\x6f\x2d\xc3\x16\x7d\xa3\xcb\xda\xef\x34\x54\x5a\xec\xb6\xe6\x44\x67\x38\xf2\x75\x87\x37\xa4\xbc\x4b\x79\x87\x16\x1a\x52\x35\x0a\xe1\xb7\xb0\x11\x7c\x7d\x0a\x1f\xed\x35\x68\x57\x9e\x31\x5f\x80\x80\x95\xa8\x6b\x54\x3e\x62\xe3\x36\x27\xf7\x45\xa5\xb3\xb1\x30\xcd\xa4\x5f\xa8\x62\x6f\xd5\x46\xb0\xf7\x68\x3d\x41\x06\xf0\x0b\xf2\xde\xe0\x56\x9a\x02\xb4\x8d\x8e\xbd\xec\x42\x96\x25\x1a\x54\xa4\x03\x39\x16\xa8\x72\xcc\x98\xe8\xcc\x77\x96\x23\x41\xda\x7b\x4c\xf1\xde\x46\x56\xd5\xce\x0f\x9e\xe4\xe5\x92\xd2\xaf\x06\xed\x98\x5b\xb8\x94\x91\x70\x86\xd2\xa9\x9e\x67\xc9\xa0\x6d\x60\x9d\x72\xa0\x38\xec\xf5\xb1\xa2\xc4\x7e\x96\x56\xba\x21\xf9\x91\x61\x09\x5f\xf3\x10\x2d\x1b\xc1\x7d\xa7\x7b\xc5\x27\x4e\x69\x83\x33\x0d\xc2\x03\xc9\x37\xe4\x61\xad\x5b\x60\x67\xda\x2f\xe5\x26\x83\xb6\xdf\xf4\x6c\xe4\xeb\x41\x47\x0b\x9a\xe1\xc0\x36\x48\x51\x2c\xdb\x9c\x05\x96\xda\x20\xb4\x36\x1c\x2c\x87\xb7\xb0\x11\x46\xb1\x14\x97\xe8\x7c\x61\x97\xc2\x8c\xa3\xc9\x5c\x20\x1a\xbe\xb1\x2b\x02\x5d\x87\xb0\xbb\x85\x4f\xb4\x5b\xe8\x87\x45\xe2\x63\x2c\x94\x4d\x55\xb1\xfe\x5e\xea\x02\xc9\xe1\x92\x54\x92\xfd\xbc\xbb\x53\x19\xda\x9f\x7e\xea\x3d\x50\x5b\x1c\x3b\x33\xe8\x5b\x6e\xe4\x50\x2a\xbd\x5c\xa2\x81\xb6\xf1\x97\x0c\xc8\x40\x4c\x4f\xe1\x29\xc7\xa8\xbf\x18\xe9\xd0\xbc\xe2\x49\x94\x28\x56\x7a\x19\xe2\x56\x34\xfe\xdb\x50\xdb\xec\xc6\x15\x68\xcc\xc8\x7f\xbe\x41\x17\xf2\x93\x94\xc2\x84\x74\x37\xec\xc9\xb0\xa1\x1b\xfa\x54\xb4\x3b\xd2\x31\x83\xa3\x51\xe4\xad\x2d\x4f\x10\x5b\x44\x26\x44\xd4\x6d\xd1\xc2\x0b\x22\x70\xf6\x4a\x34\x2a\x5f\x91\xe7\x5c\x08\x8b\xf0\x9f\xfe\x79\x02\xe5\x1f\x0c\xe8\xaf\x9c\x79\xde\x66\x33\x25\x5d\xbc\xb1\x73\x61\xc3\xdb\x83\x5a\x93\x7b\xde\x20\xdc\x2a\xbd\x81\x0d\xfe\xc1\x70\xe7\x1b\x44\x58\xed\x77\x40\x52\x7b\x83\xfc\x6e\xca\xea\x75\xfb\x5c\x44\x2c\x74\xc3\xf5\x76\x8b\x55\xe9\x39\x7e\xa5\x97\x65\xe4\xf3\xd5\xe5\xd5\x9b\xd9\xd9\x05\x99\x4c\x10\xeb\x69\xd7\xa6\x45\x01\xed\x4d\x3f\x3f\xbf\xf8\xdb\xdb\x9f\xc6\x70\xbc\x42\x1a\xab\x20\x74\x85\x46\xb1\xf9\x7e\x0f\xb1\x95\xc0\x95\xdd\x4e\x2b\xe1\x47\x88\x8d\xe0\xd8\x29\x80\x87\xe1\xe8\xd8\xb6\x2d\x4a\xe3\x23\x0b\x1f\x84\x3c\x09\x0e\xf9\x60\x47\x9f\x9b\xef\x6b\x9b\x6f\xf3\xf8\xfd\x52\xfa\xe4\xcb\x28\x30\x0c\xd5\x9a\x34\x94\xcc\xe3\x14\x0a\x07\xa5\x68\x67\xe5\x2b\x59\x15\x34\x89\x11\xb2\xcc\xf9\x76\x73\x2b\x83\x63\x0d\x0e\x67\x69\xa7\xe1\xd9\xcb\x9f\x46\xc1\x2a\xc7\x97\x30\xec\xed\xbd\x8b\x57\xb8\x6b\x73\x90\x6d\xaa\xca\x36\xef\xbb\xc4\x0d\x61\xfd\x45\xba\xd5\xec\x7c\xb8\x1f\x95\x8c\xfc\xdc\x73\x9b\x7f\xe1\x74\xc6\x78\x83\x41\x1d\x3c\x9c\xd8\xb8\xf6\xa5\x1b\xd2\x24\xc1\x62\x0a\x9f\x09\x7e\x72\x5c\x74\x93\x09\x5c\xa8\xb6\x42\x10\x1f\x86\x2c\xb6\x3b\x5f\x40\x19\x36\xb3\xf2\xd4\xd4\x8b\xac\xd3\x1e\x7b\x51\x14\x66\x7a\x24\x4e\xa1\x6f\x73\x6d\xdc\x14\xbe\xfb\xe6\xf9\x37\xe3\x20\x7f\xa1\xb6\x41\x5d\xfc\xab\xbb\xa8\x30\x2f\xd4\x76\x48\x3b\x84\x96\xca\x87\x31\xa0\x7f\x57\x50\x95\x74\x87\x7f\x26\x37\x30\x4c\x27\xa1\x2c\xd1\xbe\x12\x9b\x9c\xc5\xf8\x39\x3c\xff\xcb\x78\xe6\x55\x39\x14\x6a\x3b\x3a\x28\x5d\x1f\x68\xde\xc5\xf5\xf5\xd5\x35\x87\xe1\x4d\x55\xc4\x12\x28\xfb\x1c\x78\x6c\x2f\x38\xf9\x0b\x3c\xf9\xe3\x5d\x28\x71\x1f\xdb\xb6\xd3\xa1\xf9\x3d\xac\xdc\xc4\xa0\xa1\x47\x32\xaf\x17\xfd\x72\xcc\x87\xeb\xb7\x97\xff\xd3\xdc\xf1\xf6\x9f\x66\xee\x31\x24\x2d\xc3\x5e\x93\x48\x2b\x43\x0b\x70\x52\xaf\xb6\x36\x84\xed\x19\x37\xe3\xbc\x5e\x76\xb4\xd2\xad\xd0\xd2\x9d\x41\x90\xeb\xba\x92\xb9\x24\x65\xeb\x0b\x6b\xbe\xda\xda\x4f\xc9\x87\x14\xf9\xc3\xfc\xea\x97\x8b\xeb\x0f\x57\x97\x74\x99\xe2\x6d\xfa\xf7\x89\x74\x29\x5c\x37\xea\xb3\x04\x6e\xfe\x7e\x79\xf6\x18\x82\xdf\xb3\x9e\xa4\x49\x37\x96\x6b\xa3\xef\x42\x11\x95\x66\xdc\x3f\x44\x1f\x62\x2c\x86\x72\x31\xc7\x92\xd1\x7b\xed\x8a\xc3\x5f\x9d\x42\x9a\xb6\x4e\x6c\x4f\x37\x66\x97\x2f\xaf\x38\x17\x10\xc5\xe7\x62\xcf\xd2\xe8\x75\xb0\xfd\x5d\xea\xc4\x63\x21\x9c\x08\xfa\xdd\x6f\x7f\xf6\xa7\x72\xff\xef\x91\x3e\xd2\xae\xc7\xc7\x1d\x50\x0a\xfc\x76\x6c\xd1\xd6\xe3\xa0\x90\x7b\xf1\x74\x7b\xcb\xee\x84\x81\x7a\x61\x21\xca\xf0\x95\x2f\x6d\x3c\xd2\x71\x64\xc8\x4f\xeb\x85\xfd\xb2\x9e\xac\x6f\x1d\xff\x5e\x48\x87\xae\x35\x78\xd6\x52\x37\xdc\x5d\xf4\xe2\xf6\x24\xbb\xc5\x03\xca\xe6\x9e\x14\x6c\xab\x49\xe0\x15\xaa\x61\xbd\xf0\x07\x6f\x59\xad\x42\xd1\x7c\xbd\xab\x67\xd2\xf7\x9f\xd0\xf1\x14\x5f\x1e\x19\x0c\x54\xdf\x8d\xbc\x34\x7a\xfd\xda\x27\x60\xc3\xf5\xe8\xa8\xb9\x38\x6f\xdd\xff\x52\x3b\xef\xec\x02\xcb\x5c\x91\x2a\x30\x28\x81\xca\x66\xe7\xc3\x51\xd7\x75\xf9\x9a\xb6\x1f\xe6\x86\xe3\x1b\x3d\xe4\xbb\x43\x23\x01\x51\x88\x7b\x3d\xff\x6d\xc4\x32\x08\x97\xec\x35\x9a\x25\x0e\x15\x25\x78\xbe\x7b\xdb\x2d\xc0\xb5\x5d\xab\xa2\x21\x0b\xc1\x35\x00\xce\x15\x72\x41\x09\xb0\x80\x4a\x38\x34\x40\x5a\xd4\x18\x5f\x0f\xf6\x37\xe7\x14\x38\xc9\x29\x86\xfc\xeb\x18\xd4\x68\xef\x81\x86\xbf\x46\xf1\x31\x58\x1b\x8c\x3e\xdb\x3b\x90\xd6\xc7\x53\x66\xcf\x19\x48\x5b\x43\x13\x15\xa9\xeb\xd6\xd7\xd2\xfc\x13\x07\x2e\xd7\xb7\x7a\xe2\x03\xca\x3d\x0f\xf0\x53\x6b\x0d\x48\xec\xd9\x52\xeb\x65\x85\xa2\x96\x96\x5f\x38\xcf\xe6\x77\xcf\x33\xfa\x8b\xe2\xfb\x0b\xb7\x42\xa3\xd0\x4d\x66\x84\xca\xc6\x87\xd2\xb3\x7a\x32\xab\xd3\xbe\xf2\x4a\x9a\xe3\x8b\x62\x2e\x9b\xed\x1e\xd4\x25\x83\x81\x42\xb7\xd1\xe6\xb6\xfd\x38\xbf\x44\x77\xff\x10\xd7\xd8\x80\x6e\x6f\x1d\xbf\xa0\xfb\xc2\x2b\x4b\x09\x8a\xcf\x9c\x77\x22\xb4\x41\x55\x30\xbb\x30\x46\x1b\xaf\x24\x0f\x3b\xed\xed\xf4\x6d\x3c\x08\x4f\x5f\x44\x30\x32\xa3\xb0\xc2\xa3\x38\x84\x71\xbc\xda\xff\x61\x0c\x62\x47\x56\xb4\x95\xfd\x7a\x0c\x2a\xc4\x1c\x6d\x8b\xf0\x6c\x76\x7e\x3d\x14\xfb\x2a\x4c\xfb\xc8\x3a\x7b\xa3\x9f\x47\x2d\xe6\xa0\x6b\x3e\xea\x94\x81\x39\x64\x97\x96\xdd\x5b\x27\x79\xf1\xab\xe9\x00\x4e\xc1\x37\x55\x5a\xa1\x9f\xc2\xd7\xaa\x57\x93\xf5\x92\xe5\xf9\x3e\x1a\x3f\x6d\xcd\xf4\x71\x13\x54\x4a\x36\x19\x61\x3b\xbe\x8e\xb2\x6e\x0d\x72\xa7\x14\xf5\x59\xeb\xd3\x58\x6f\xec\x03\xa9\x70\x4a\x3b\x28\x44\xa0\x5e\x70\x98\x27\xeb\x23\xaa\xf8\xe1\x2c\xf8\x07\x2c\x76\x3a\x46\xb8\x2f\xdc\x6a\x1a\xd6\xc4\xb9\x5e\x6a\x33\xbf\xcf\x6e\x8b\xf0\x32\x4c\xe4\x53\x00\xbf\xc2\x65\xaf\x5f\x9c\xdd\xff\x7f\x61\x8a\x8d\x30\xe8\xe3\x49\x3f\xbf\x3b\xf6\x10\x16\xba\x66\x1a\xde\xc7\x7e\xf7\xed\xd0\x4f\x7b\xfd\xe6\x6d\x78\x7a\xc5\x7f\xcf\xea\x69\x07\x7e\x80\x51\xfb\xe7\x84\x61\xc3\xd9\xfc\x7e\x36\x0f\x51\xab\x3f\xf1\x40\xfe\xa6\x59\x28\x74\xd3\xde\x3c\x7f\x6d\x86\xe1\x4c\xb3\xd7\xc2\xde\x86\x05\x0f\x31\xb0\xed\x85\x0a\xff\xe2\xe5\x3e\x12\x18\xd4\x8b\x18\x0d\xf8\x54\x26\xc4\x03\x3e\x19\xa2\x6b\x2c\x4b\xf8\xea\x30\xa2\x8f\x93\x5b\x13\x18\x06\xc6\xbb\xdc\xbd\xab\x36\x0f\xdd\x4c\xd6\x67\xb0\xc9\xe0\xb6\xeb\x44\xfc\x20\x9b\xf5\x31\xb4\xc4\x2a\xbd\xf4\x46\x8e\x1c\x15\x5b\xd9\x11\xfc\x05\x9e\x31\x84\xdb\xec\xcc\x7d\xcc\x6e\xce\x2f\x38\xf5\x95\xa2\x3a\x2b\x97\x3b\x3c\xc7\xbe\x8e\xbd\xdf\xf3\xcf\x7a\x1f\x92\x43\x0a\x94\x1f\xf5\xa2\xa1\x10\x66\xf1\xec\x6b\xac\x50\x74\xeb\x62\x62\x03\x21\xdf\x09\x56\x99\x92\x34\xba\x52\x4e\x57\x6c\xbc\xba\x2f\x70\xf6\x64\xf8\xf4\x29\x7c\xb5\x7b\x7b\xe3\xd9\xb9\x59\x63\x46\x34\x87\xa3\xce\x93\x9f\xde\x23\xf5\x10\x82\xc5\x2e\xff\x3d\xab\x86\x72\x63\x40\x63\x48\x9c\xfe\xff\x3a\x6a\x27\x0c\x43\x99\xbe\x37\x4c\x51\xd4\x36\x9a\x60\x63\x3e\x1d\xe6\x9f\x5d\xcf\xde\xcc\xce\x5e\xbc\xa2\xe8\xa2\xb5\xca\x16\x55\x01\xb6\xf8\xa0\xc2\x3b\x5b\xff\x20\x87\xcb\x25\xd1\xb9\x92\xe2\x10\xb6\x47\xc8\x86\x66\x50\xa7\x6e\xca\xc5\x3a\x83\xff\x6c\xd0\x3a\x2c\xc6\xb0\x68\x9c\x17\x40\x28\x73\xc7\xce\x4e\xdb\xd5\x49\x47\xbd\x1e\xd4\xe3\xa9\xbf\x6d\xf2\x1c\xad\x2d\x9b\x6a\x0b\x0c\xaa\xdd\x94\x7d\x6c\xba\xff\xd2\x6a\x23\xa4\x23\x3b\x88\x77\x68\x7c\x63\xdf\x0b\x9a\x6e\x0e\xdc\x87\xa6\xd1\x7f\x07\x00\x00\xff\xff\x13\xdd\x0e\x99\xa0\x36\x00\x00")

func appMainGoTplBytes() ([]byte, error) {
	return bindataRead(
		_appMainGoTpl,
		"app/main.go.tpl",
	)
}

func appMainGoTpl() (*asset, error) {
	bytes, err := appMainGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/main.go.tpl", size: 13984, mode: os.FileMode(420), modTime: time.Unix(1618504656, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPprofGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcd\xaa\xdb\x30\x10\x85\xd7\x9a\xa7\x38\x15\x04\xa4\x62\xe4\xae\x0d\x77\x51\x6e\xba\x08\x94\xc6\x90\xec\x8b\x1b\x8f\x5d\x11\x67\x64\x94\x49\xa0\x04\xbf\x7b\x91\xd3\xdf\xd5\x5d\x89\x33\xcc\xc7\x7c\x9a\xa9\x6b\xbc\xa6\x9e\x31\xb2\x70\xee\x94\x7b\x7c\xfb\x81\x73\xee\xce\x2c\x01\xdb\x3d\xbe\xec\x8f\xf8\xb4\xdd\x1d\x69\xee\x4e\xe7\x6e\x64\x5c\xba\x28\x44\x75\xfd\x78\xc4\x01\xa1\x9d\x73\x1a\x96\x85\xe2\x65\x4e\x59\xe1\xc8\xd8\x29\x8d\x96\x8c\x15\xd6\x5f\x4f\xfd\x5d\x75\xb6\x64\xbe\xe2\x4f\xaa\xe7\xc2\x59\xf2\x44\xc3\x4d\x4e\x88\x12\xd5\x79\x3c\xc8\x8c\x09\xa5\xf2\x0c\x66\x8a\x57\x2d\x62\x15\x18\xcd\x0b\x84\x35\x7c\x5e\x4b\xce\xea\x69\xb6\x15\x6c\xf3\xc1\x7a\x32\x26\x0e\x60\xbc\x7b\x81\xc4\x69\x05\xcd\x94\xc6\xd0\xe6\x28\x3a\x38\x3b\x74\x71\xe2\x1e\x9a\x70\xd5\x2e\x2b\xd6\xe1\x0d\x36\x77\x5b\x81\x0b\x6d\x32\xeb\x2d\x0b\x19\xb3\xd0\xff\xe8\xda\x8a\xa7\x46\x94\x11\x49\x50\x3e\xda\x60\x73\x6d\x36\xbd\xad\xf0\xdb\x30\x7c\xec\xfb\xec\x7c\x70\xef\x8b\xe4\xf1\xb5\x2d\xd9\x87\x5d\x1b\x0e\x9a\xa3\x8c\xce\xbf\xd9\xdb\xa6\xac\xfe\xdf\xf9\x93\xb8\xb2\xac\x70\xe0\x7c\x67\xf7\x77\x17\x12\x27\xef\xc9\x2c\xce\xd3\xf2\x3c\x05\x4b\xbf\x2c\xf4\x33\x00\x00\xff\xff\x98\x3f\x0c\x94\xcc\x01\x00\x00")

func appPprofGoTplBytes() ([]byte, error) {
	return bindataRead(
		_appPprofGoTpl,
		"app/pprof.go.tpl",
	)
}

func appPprofGoTpl() (*asset, error) {
	bytes, err := appPprofGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pprof.go.tpl", size: 460, mode: os.FileMode(420), modTime: time.Unix(1618504676, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app/includes.go.tpl": appIncludesGoTpl,
	"app/main.go.tpl":     appMainGoTpl,
	"app/pprof.go.tpl":    appPprofGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"app": &bintree{nil, map[string]*bintree{
		"includes.go.tpl": &bintree{appIncludesGoTpl, map[string]*bintree{}},
		"main.go.tpl":     &bintree{appMainGoTpl, map[string]*bintree{}},
		"pprof.go.tpl":    &bintree{appPprofGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
