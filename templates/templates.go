// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/app/includes.go.tpl
// templates/app/main.go.tpl
// templates/app/pprof.go.tpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _appIncludesGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8d\x41\xca\xc2\x30\x10\x46\xf7\x39\xc5\x47\x0f\x90\x1c\xe2\x6f\x17\x3f\xa2\xdd\x14\xb7\x32\x9a\xa1\x84\xd8\x49\x49\x23\x28\x61\xee\x2e\x11\x41\x77\xee\x86\x37\x6f\xde\x38\x87\xbf\xe4\x19\x33\x0b\x67\x2a\xec\x71\x7e\x20\x66\x8a\x2c\xa8\x15\x76\xf7\x1a\xed\x91\xf3\x16\x92\x40\xd5\xa2\x1f\x71\x18\x27\x0c\xfd\xff\x64\x56\xba\x44\x9a\x19\x0b\x05\x31\xc6\x39\x0c\xf7\xc2\xd2\xd4\xcd\xd4\x8a\x4c\x32\x33\xec\x07\x42\xd5\x84\x65\x4d\xb9\xe0\x84\xae\x3d\x80\x6a\xd7\x54\x16\xdf\x96\xad\xb1\x4f\xfe\x76\xe5\xef\xc0\x9b\xfc\xbc\x7e\x06\x00\x00\xff\xff\x83\x5f\x6b\x7c\xce\x00\x00\x00")

func appIncludesGoTplBytes() ([]byte, error) {
	return bindataRead(
		_appIncludesGoTpl,
		"app/includes.go.tpl",
	)
}

func appIncludesGoTpl() (*asset, error) {
	bytes, err := appIncludesGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/includes.go.tpl", size: 206, mode: os.FileMode(420), modTime: time.Unix(1618513092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appMainGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5b\xff\x73\xdb\x36\x96\xff\x59\xfc\x2b\x5e\x39\x93\x94\x6a\x69\x2a\x69\xd3\xee\xad\x3a\xde\x4e\x6a\x3b\x3d\xdd\x25\xb6\xc6\x4e\xda\xd9\x49\x33\x19\x88\x04\x25\x9c\x29\x80\x0b\x80\x56\x54\x57\xff\xfb\xcd\x7b\x00\x48\x8a\x92\x93\x74\xf7\x6e\x66\x3b\x93\xc4\x06\x81\x87\xcf\x7b\x78\x78\x5f\xd1\xc9\x04\xce\x54\xc1\x61\xc9\x25\xd7\xcc\xf2\x02\x16\x5b\xb8\xd5\xec\x96\x4b\xb8\xbf\x87\xec\xbf\xe9\xc7\xec\x17\xae\x8d\x50\x12\x76\xbb\x0c\xce\xaf\xe0\xf2\xea\x35\x5c\x9c\xcf\x5e\x47\x51\xcd\xf2\x5b\xb6\xe4\xb0\x66\x42\x46\x91\x58\xd7\x4a\x5b\x48\xa2\x51\xcc\x65\xae\x0a\x21\x97\x93\xff\x31\x4a\xc6\xd1\x28\x2e\x2b\xb6\xa4\x7f\xd7\x16\xff\x11\x6a\x22\x54\x63\x45\x85\xbf\x48\x4e\x63\xca\xe0\xdf\x35\xb3\xab\x49\x29\x2a\x8e\x3f\xe0\x80\xe6\x65\xc5\x73\x9a\x61\xc5\x9a\xc7\x51\x34\x8a\x97\xc2\xae\x9a\x45\x96\xab\xf5\x24\x57\x9a\x2b\x33\x59\xaa\x13\xb3\x35\x96\xaf\x8b\x49\xc1\xf8\x9a\x36\xad\xed\xb6\xe6\x06\xfa\xb3\x97\x6a\xa9\x26\xb5\x56\x56\x2d\x9a\x72\x42\xdf\xe3\x7d\x7a\x8e\xfb\x93\x55\x9d\x23\xcd\x52\xe9\xdb\x87\x27\xb8\x1f\x09\xc2\x27\x27\x55\x62\xd1\xdb\x4f\xd5\xb7\xcb\x4c\xc8\xc9\x96\xad\xab\xec\xee\x1b\x64\xea\x3d\xa0\x20\x26\x2b\x6b\xeb\x49\x5d\x6b\x55\xe2\x60\x5e\x2f\xe0\xd3\x9b\x3b\x8e\x3e\x09\x81\x7f\xb0\x5c\xe2\x41\x9a\x89\xa8\xef\x9e\xc5\xd1\x08\xff\xb1\x9f\xd8\x60\xb0\x6a\x92\x37\xc6\xaa\x75\x60\x45\x7f\x12\xe0\x5a\x15\x4d\xc5\xcd\x44\x73\x63\x59\x2d\xe2\x68\xd4\x34\xa2\xd8\x5b\x64\x98\x55\x5a\x4c\x96\x2a\xc3\x4f\x71\x34\x8e\xa2\x5c\x49\x63\x21\x28\xde\x29\xc4\xa8\x8e\x9d\x1e\xc6\x51\x84\x08\xe0\x55\x63\x99\x15\x4a\x9e\x29\x59\x8a\x25\x18\xab\x9b\xdc\xc2\x7d\x34\x3a\x17\x86\x2d\x2a\x0e\x0b\xa5\x2a\x68\xff\x9b\x4c\x20\x57\xeb\xba\xe2\x96\x57\x5b\x28\xfc\x1c\xbb\xe2\xb0\xf6\x84\xa2\xd1\x6b\xb1\xe6\xaa\xb1\x80\xca\x96\x9d\x37\x9a\x86\x71\xa5\xba\xe3\x5a\x8b\xc2\xcd\xb7\x6e\x56\x34\x9a\x4c\x60\x83\x17\x60\x0b\xac\xaa\xd4\x26\xcc\x12\x72\x09\x6b\xa5\x71\xb2\x90\x4b\x03\xfc\x8e\x4b\xdb\xb0\xaa\xda\x46\x3b\x8f\xfd\x86\xeb\x3b\x91\xf3\x99\x34\x96\xc9\x9c\x3f\xc8\x02\x04\x26\x26\x93\x3d\xc8\x9b\x95\xaa\x38\x08\xbf\x1c\x92\x52\x69\x28\x78\xc9\x9a\xca\x9a\x71\x34\x7a\x45\x72\x47\xae\x8d\xd5\x08\x67\x32\x01\xc9\xd6\x1c\x54\xe9\x38\x76\xdf\xed\x4a\x18\xb8\x99\x81\x30\xb0\x60\x86\x17\xa0\x64\x0a\x4a\x56\x5b\x90\x9c\x17\xbc\x80\xcd\x8a\x4b\xa4\x2b\x24\x12\x91\x7c\xd3\x6e\x69\xa2\x51\x90\xbf\x81\x35\xab\xdf\xba\x8d\xde\xed\x1f\x0a\xf2\x3b\x99\xc0\x73\xb8\x6e\x24\x4a\x2d\xf0\xc9\xad\x69\x45\x6a\x00\xc1\x7b\xc3\x23\xa4\xe5\x5a\xb2\xca\x80\x42\xbe\x98\x05\x63\x99\xb6\x4d\x8d\x64\x2e\x95\xe5\xd3\x20\xf1\x4e\xa8\xb0\x61\xd2\x82\x55\x90\x2b\x79\xc7\xb5\x75\x6c\x59\x05\x0c\xc2\x6d\x07\xa3\x40\x58\xc8\x55\x53\x15\xb0\xe0\x60\xb8\x16\xac\x12\xbf\xf3\x02\xe7\x49\x2e\x96\xab\x85\xd2\x06\xee\x04\x83\xe5\xf5\xfc\xcc\x1d\xd2\x00\x74\x7b\x38\x2f\x34\xe7\xbf\xf3\x4e\xb3\xe8\x8c\xa2\xd1\xec\x1c\xf6\xff\x43\x85\xce\xde\xbc\x99\x9d\xa3\xf8\xaf\x1a\x0d\x6a\x23\x41\xa2\xcd\x9d\x9d\x47\xa3\xd9\x7c\x30\x5d\x72\x9b\xb9\x41\xa7\xaa\xeb\x46\x8a\xdc\x4b\x78\x36\xc7\x05\xcf\xe7\xb3\x07\x17\xcc\xe6\x74\xb2\xfe\xa6\x81\x59\x11\xaf\x95\x30\x96\x4b\x40\xdd\x7e\xa9\x96\x2f\xf9\x1d\xef\x6e\x44\x23\xa4\x8d\x46\x73\xa6\xb9\xb4\x07\x54\xa3\xd1\xa5\x9a\x6b\x5e\x8a\x0f\x7b\x5c\xba\xbd\x82\x76\x56\x6a\x09\x35\x4d\xfa\x31\x1a\xdd\x14\x97\xca\x8a\x72\x7b\x64\xbe\x07\xb3\xe1\x20\xdd\x14\x6f\xae\x71\x95\x65\x96\xbf\x10\x55\x2b\xce\x4e\x61\xe7\xcc\xae\xf0\x78\x0c\x4e\x01\x74\x0b\x90\xa0\x4b\x19\x47\xa3\xc1\xf5\xd9\xd3\xc0\xa3\x57\x0b\x15\xf1\x8e\x69\x40\x57\x64\x7a\x47\x99\x97\x4b\xb7\xb9\x5b\x1c\x8d\xca\x70\xb6\xee\x4c\x45\x61\xac\xee\x60\xe1\xc0\x1e\x4e\x34\xa3\x07\x03\x28\xff\xde\x40\x55\x79\xb1\x3b\x81\x4b\xe5\x44\xe6\x77\xa8\x83\xfc\xc3\xf4\x5a\xe7\x7d\xad\x32\x85\x97\x99\xff\x95\x84\xd1\x9b\x7e\xe7\xed\xa2\xfb\xee\xd9\x34\xdc\xbe\x20\x4e\x7b\x72\xa1\xef\x51\xd9\xc8\x9c\xa4\x30\x33\x37\xdc\x26\xa5\xa7\x33\x76\xa7\x75\x1f\x8d\xde\xa7\xb8\x1a\xa6\xa7\x2d\x91\xb7\xe5\xbb\x68\xa4\xb9\x6d\xb4\xc4\x31\xdc\x83\xa8\x34\x86\x2d\xf9\xc5\x07\x61\xd1\xfa\xac\xe9\xaa\x22\xa9\x14\x18\x64\x59\x46\x37\xb9\x64\x39\xbf\xdf\x8d\x91\x6e\xb9\xb6\xd9\x5c\x0b\x69\xcb\x24\x7e\xc1\x2c\xab\x80\x6b\xad\xf4\x14\xe2\xaf\xdd\xf2\xaf\xe3\xdf\x64\x9c\x02\xcb\xb2\x6c\x1c\x8d\x10\xa2\x9b\x7f\xee\xcd\x5a\x32\x8e\x46\xca\x64\xb4\xe1\xd3\xb1\xb7\x2c\x8b\x46\x54\x05\x30\x59\x40\xad\xea\xa6\x42\xd9\x30\xd0\xee\xde\xa2\x3d\xc0\x8b\xbb\x11\x76\xd5\x1a\x47\x07\x5d\xf2\xcd\xde\xe5\x4e\xc6\x90\xe8\x1c\xbe\xda\x1b\x24\xd8\x3a\x87\x53\x78\xbc\x37\x7e\x1f\x8d\xbc\x09\x98\xf6\xae\x4d\xc9\x2a\xc3\xd3\x68\x34\x9a\x9d\x4f\x8f\xd9\x81\x17\x5a\xad\x6f\x48\x40\x57\xfa\x52\x54\x49\xfc\xf4\x9b\x6f\xf9\xb3\xef\xbe\xff\xcb\x09\xff\x8f\xbf\x2e\x4e\x9e\x7e\x53\x7c\x7b\xc2\x9e\x7d\xf7\xfd\xc9\xb3\x6f\xbe\xff\xfe\xbb\xef\x9e\x3d\x7b\xf2\xe4\xc9\x93\x78\x4c\x14\xe7\x43\x8a\x78\x47\xe7\x4c\x1b\x3e\x9b\x23\xa1\xbf\x64\x4f\xb2\x27\xd9\xd3\x30\xfb\xf9\x7c\x36\xfd\xdc\xd9\xc1\x2a\x74\x0b\xbe\xc3\x61\x67\x15\xfa\x54\xa4\xa8\xf0\x43\xb0\x0a\xd3\x43\xc6\x83\x01\x38\xf6\x29\xdc\xf2\xf6\x5b\x1c\xd3\xf8\xe0\x1e\x4f\x3f\x79\x91\xef\x77\x69\x34\xda\xe1\xb9\x64\xc3\xc5\x6f\x63\x63\x78\xfc\x0e\x4e\x8f\x7b\x57\x3c\x36\x6f\xb8\xa6\x7d\x6c\xce\x57\x12\xb0\x58\x2a\xc9\x09\x58\xeb\xdb\xa6\x0f\x3b\xb7\x00\x65\x32\x01\x8c\x85\xc9\xfc\x7a\x35\x43\x07\x83\x08\x3a\x0f\xed\x75\x51\xc8\x68\x84\xee\x0e\x6f\x99\x30\x78\xcb\x34\x93\x4b\xfc\xac\x79\x76\xcd\x97\xc2\x58\xbd\x3d\xe0\x0c\x15\x91\x96\xa1\x0f\xc7\x95\xdd\x42\xa4\x82\x5f\x8f\x0a\x04\xa7\x7f\x54\x1e\xc7\x25\xb2\x27\x13\x23\x32\xf7\x5b\x32\xf6\xdf\x3e\x57\x34\x23\x14\x0e\xfe\xd9\x39\x9e\x8d\x48\x31\xd4\x7a\x90\xeb\x2e\x9e\xd8\x67\x77\xdd\xd8\x6e\x09\x11\x78\x90\x61\x23\xde\x75\x64\x5a\xf6\x07\xd8\xf6\xf9\xee\x71\xed\xa3\xbf\x29\x6e\x92\xf9\x5f\x3c\xd7\x1d\x27\xce\x10\xb6\x46\xb0\x46\x13\xf5\x13\x5a\xa1\x99\x2c\x55\x72\x60\xea\x30\x74\xbd\xc4\xc8\x6b\xb7\x03\x6f\xaa\xa7\xf0\xc8\xfc\x26\x1f\x99\x38\x0d\x31\x6e\xea\x24\xd1\x23\x33\xde\xdf\xc0\xdb\x9f\xd6\x14\x1e\xb7\x55\x45\x0a\xef\x51\x52\x94\x58\xbc\x62\xda\xac\x58\x95\xe8\x7c\xbc\x8f\xe8\xe4\xe4\xe4\x37\x19\x0f\x06\x11\x51\x9c\x7a\x0b\x9e\x14\xe3\x60\x5f\x29\x14\x27\x67\xa9\x1a\x3d\x34\xac\xa5\x56\x6b\x60\x7a\xd9\xac\xb9\xb4\x66\x12\x46\x45\xc5\xbd\x99\x25\xeb\xbc\x6f\x68\x8f\x23\x47\x9f\xc5\x9d\x43\x88\x5c\x58\xcd\x0c\x30\xe8\x51\x04\x53\xf3\x5c\x94\x82\x17\x3f\x02\xcc\x28\xa0\xab\xd1\xa4\x81\xb0\x59\x34\x12\x65\xcf\xa7\xc5\x6e\x59\x4c\x94\x89\x74\x01\x6f\xdf\x2d\xb6\x96\x47\xa3\x11\xff\x40\xca\x14\x92\xcc\xec\xe2\x83\x4d\x28\x28\xc8\x7c\x28\x30\x8e\x46\x48\xae\x48\x81\xc3\x29\xb8\x44\x35\xbb\xe6\xac\xc0\x8f\x83\xa9\x3f\x00\x87\x2f\x4e\xd1\x34\x3a\x95\xec\x3c\x62\xec\x42\x4d\xa9\x2c\x68\xce\x8a\x81\xe4\x42\x62\x51\x92\x45\x7c\x74\x17\xa7\x40\xfb\xa2\x96\x99\x8d\xb0\xf9\x0a\x10\x27\xd2\xcc\x99\xe1\x10\x67\x78\xa4\x71\x8a\x3f\xac\xab\x78\x8a\x7b\x89\x92\x00\xd2\x59\xbf\x91\x6b\x7f\xda\x45\x0a\x3a\x3f\xc0\xd5\x07\x56\x32\x51\xb9\xb0\xb7\xe0\x39\xc6\xa2\x7f\x7f\xfe\xea\xe5\x71\x7c\x7d\x68\x84\xcd\x83\xa1\xbc\xbe\x0f\x02\x07\xfe\x35\x10\xff\x75\x73\x75\xf9\x99\x20\xbc\x89\x9d\x0e\x04\xfe\xb0\x84\x61\xdd\x18\x0b\x5c\x16\x20\x24\x10\xf8\x14\x48\xa0\x29\x28\x0d\x28\xd1\x94\x0e\x8a\x6e\x24\xff\x60\xc7\xe1\xae\x93\x26\x4a\x9f\xd7\x55\x98\xe5\xc9\x2d\xa5\x74\x60\x57\xcc\x92\x8e\x62\xa8\x44\xaa\x8a\x8a\x41\xf3\x4f\x5c\x04\x39\xd4\x49\x37\xea\x75\x52\xe7\x99\xcf\x21\x4e\x5d\x44\x9a\x85\x45\xce\x9d\x9c\x88\x62\xb8\x5e\x14\xf1\x18\xfe\xf8\xc3\xc5\x12\x17\xff\x68\xe8\x66\x67\xb3\xf3\xd4\x8d\x5c\x8a\xca\x91\x16\x25\xf8\x71\x24\x3e\x88\x3c\xbc\xfa\x8a\xe2\x63\x9a\x5b\x6b\x75\x27\x30\xf9\x9b\x9d\x63\x62\x88\x92\xb9\x63\x95\x28\x06\x8a\x1a\x90\xd6\x07\x48\x6b\x87\x14\x61\xcc\xe1\xb4\xdb\xc4\x43\x9b\xc3\xe9\x5e\x44\xe2\x31\xd5\xe3\x1f\x0e\x97\x1c\xc7\x35\x1f\xe2\xc2\x83\x6b\xc9\x0c\xe0\xb1\x5a\x1c\x22\x64\xb5\xe8\x81\xc4\xb4\xea\x08\x4e\x1a\x3e\x0a\x95\xd5\xe2\xb3\xd1\x22\x95\x8f\x23\x46\x6a\x7b\xa0\x2b\xb5\x1c\x42\xae\xd4\xb2\x05\xdc\x26\x72\xa7\xa7\xf0\x04\xee\x29\xb7\xa7\xcc\x98\xf2\xde\x35\x67\xd2\xc0\x56\x35\x90\x33\xf9\xa5\x25\x0d\xad\x2a\xbc\x6a\xbf\x73\xad\xf0\x0a\x04\xbb\xea\x14\xb1\xa3\xe6\x01\xb9\x74\xa5\x05\x13\xd2\x95\x21\xa2\x30\xde\xa9\x74\x9b\x30\x06\x4a\xdd\x52\x4f\xcb\xe5\x3a\x43\x4a\x6e\x34\xee\xeb\xaf\x4f\x4a\x8f\x49\xdf\xcd\x76\xe2\x0f\xd3\x3e\x71\x04\x7e\xda\xc7\x4e\xc1\x53\xdd\x3b\x86\x90\x79\x0d\xf1\x86\xf1\x8e\xf3\x36\xf5\x0d\x9c\x77\x4b\x03\x2d\x0c\x80\x0f\x08\xe1\x60\x8f\x4a\x9b\x0a\xb7\x64\xdc\xaa\x63\x51\x87\xca\xb9\x31\x37\xb3\xab\x50\x44\x79\xc0\xb1\x4e\x26\x20\xec\x97\x06\x38\x33\x82\x1b\x0b\xa2\xc4\x2c\xdc\x67\x4d\xb8\x8b\x05\x21\x0b\xfe\x01\x54\x79\x10\xb3\x1a\x28\x85\x36\x36\x1a\x19\xb1\x66\x35\x7a\xcd\x5e\xbc\x47\x35\xc0\x61\x00\x76\xbf\xfb\xff\x8a\x6e\x09\x42\x1b\xd0\x19\xb1\x17\x58\x86\x75\x79\xb7\xf0\x48\x70\x18\xd4\x0b\xc3\x50\x75\x4b\x09\x6e\x47\xf4\x07\x1c\xfa\xe3\x0f\x57\x24\x3b\x3d\x05\x4a\x25\xdc\xd6\x93\x09\x42\xe2\x1f\x84\xb1\xd6\x78\xa7\x67\x44\x9e\x85\x22\x88\x73\x6e\xa2\x3c\xb6\x76\xb4\x17\x64\xfd\xfa\xfc\xfa\x72\x76\xf9\xf3\x94\x32\x05\x63\xf8\x91\x2c\x81\x49\xd4\xcf\x05\x0f\xc5\xbe\x22\x83\xd9\x52\x2a\x14\x79\x16\x93\x0b\x24\x1f\x48\xa8\xfa\xf5\x40\x82\x87\x9e\x89\x44\x83\x4e\xb2\xe2\x96\x27\x1f\x17\xfc\xdb\x5e\x6c\xff\x2e\x25\xfc\xe3\x40\x7c\xc3\x81\x55\x46\x51\x21\xd0\xf9\x69\x24\xb8\x57\x2e\x35\x0f\xef\xd4\xc6\xe0\x03\xaa\xc2\x42\xa1\xb8\x41\xbb\xb4\x66\xb7\x28\x00\x69\x38\x91\x57\x9d\x73\xe5\x95\xe1\xb4\x20\x57\xd2\x0a\xd9\xf0\xe0\xf9\xe9\xb0\xd7\x8d\x6d\xd3\x82\xbc\xaf\x29\xf9\x20\x81\xa0\x33\x79\x1f\xce\xfa\x01\x7c\xbd\xd3\xf7\x07\xe6\x8e\x7b\xc5\x4c\xc7\x27\x68\x5a\xc7\x35\x2f\xdc\x1c\x51\xe2\xc7\xcf\x22\xfd\xd6\xe3\xdd\xdb\xa3\xb7\xc9\x57\x68\xb4\xbf\x6a\xf7\x3a\xd8\xca\xef\x35\x54\xb7\x4f\x0a\xde\xed\x9e\x06\x71\x8d\xfd\xaa\x9d\xff\x17\x33\x9c\x1b\x6e\x43\x92\x43\x3b\xf8\x5f\xfc\xd4\x1d\x9d\xc3\x00\x71\x38\xbc\x15\xbb\xf3\xd5\x63\x04\x2e\xec\x31\xe0\x47\x35\xff\x78\x94\xd6\xc6\xf6\x9d\x1c\xda\x82\x3b\x5d\x70\x25\x9d\x86\xa3\x19\x0f\x53\xd0\x7e\x4f\x1e\x99\xde\x05\xa1\x14\xa6\x55\x8e\x1e\xdb\x8e\xeb\x7d\x8e\xba\x23\x90\xea\x23\x47\xfd\xef\xc3\xc5\xae\xcd\x43\x7b\x7c\xec\x1f\x0b\x51\x8f\xfe\x59\xd4\x8c\x0a\xfc\x07\x36\x29\x79\x64\xc6\x19\xc0\x79\xbf\x0b\x70\xe8\x2a\xbc\x67\xdd\x72\x0b\xa6\xa9\x6b\xa5\xed\x9e\xed\x6a\x99\x6a\x5d\x6c\x70\x65\x6b\x26\x64\x12\x4a\x6d\xd3\xd3\x23\xa5\x39\xf2\x62\xae\x9c\x89\x5b\x60\x4a\x2a\x0a\x3c\x21\xcc\x00\x2d\x7a\xae\xeb\x46\x22\x34\x5f\xea\x75\xb5\xc3\x9f\x94\xaa\x7e\x61\x3a\x79\xec\x5c\xe9\x5d\xc8\xb4\x63\xff\x13\xba\x7e\x4a\xfd\x21\xa6\x14\x3b\x64\xe7\x54\x4c\x74\x0e\x52\x48\x57\x99\x0c\xa3\xfc\x83\xb0\x71\xa8\x4d\xba\x88\xba\xb7\x83\x4f\x0a\x53\x08\xf9\x67\x0a\x31\xfe\xa9\x7d\x19\x7b\x58\x97\xec\xa7\x28\x2d\xd5\x01\xea\x5a\xe7\x01\x9f\xce\x0f\x10\x53\xbd\x7f\x3f\x25\x0f\x30\x21\xc9\x99\x44\x3f\xd2\x18\x3c\x59\xcc\x50\x16\x0c\xbd\x29\x2a\xa2\x3b\x68\xb7\x62\x1c\x3b\xf9\xee\x89\xd0\x85\x1f\xc7\x21\xb9\x4c\x25\x85\x90\xd1\x60\xae\xe7\xb3\x99\x14\x62\xea\xd6\x10\xb0\x9b\x57\x17\x50\x6a\xf5\x3b\x97\x90\x88\x8c\x67\x50\x28\x54\x51\xab\xb7\x28\x0c\x52\x7f\x8e\x36\xdf\x95\xf7\x4d\xaf\xd5\x33\x7e\x58\xc6\xa2\x48\x01\x53\xa1\xd4\x25\x39\x7e\x42\x32\xc6\x9d\x49\x8f\xb7\xc0\x80\x3a\x2e\xc8\x27\x19\x28\xa9\x0a\xfe\x11\x82\x35\x12\xac\x3d\xc1\x79\x9f\xe0\x06\x73\x3c\xb4\x70\x5b\x8c\x1c\xa9\xc3\x36\x68\xca\xa0\xb0\x5d\x83\x45\xc8\xe5\xc7\x50\x63\x88\x4f\xfb\x60\xde\x91\xb6\xd9\xc5\xc1\x6e\xb3\x39\xca\xa6\x31\xdc\xc3\xe7\x70\xcd\x6f\x5e\x63\x0a\xd1\x12\x7f\x23\xa4\xed\x91\x76\xc1\x7a\x0a\x94\x20\xa4\xfd\xec\x00\x45\xc2\xdd\x51\x54\x6a\x09\xae\x07\x91\x3c\x39\xf9\xeb\xf8\x21\x65\x0b\xe1\x7a\x0a\x5d\x70\x4f\x24\x43\x60\x9f\x42\xec\x0e\xd1\x37\x30\x90\xee\x9a\x1b\x8c\xb8\x8d\xab\xb2\xa3\x2a\x1a\xcb\xd6\xb5\x79\x58\x1a\x2e\xd4\xa6\x8b\x41\x71\xbf\xbf\x26\xb3\x39\xb0\xa2\x28\x34\x37\x06\xaf\x74\x48\x0a\x8e\x43\x0d\xf1\x35\x32\x19\xa2\x71\x82\x1a\x22\x71\xe2\xa1\xdf\x6a\x72\xad\xcc\x7e\x35\x4e\x18\x10\x52\x58\xdf\x07\x7c\x18\x2f\xe9\xa7\x53\x6d\xeb\xd5\xbd\x8d\xd4\xf7\xae\x37\xd5\x30\xa8\xe0\x80\x81\x0b\x73\xd6\xd2\x6f\x31\x34\xba\xa4\xfd\x56\x41\xa5\x58\xb7\x35\x25\x3a\xc9\xd8\xd5\x1d\x5e\xa3\xf2\x2e\xc5\x1d\x37\xd0\xa0\xaa\x61\x08\xbf\x85\x0d\xa3\xeb\x53\xb8\x68\xaf\xe1\x66\xe5\x18\x73\x05\x08\x58\xb1\xba\xe6\xd2\x45\x6c\xd4\xe6\xa4\xbe\xa8\xb0\x26\x14\xa6\x89\xf4\x73\x59\xec\xad\xda\x30\xf2\x1e\xad\x27\xc8\x00\x7e\xe5\xb4\x37\xd8\x95\xc2\x00\x6d\xa3\x42\x2f\xbb\x10\x65\xc9\x35\x97\xa8\x03\x39\x2f\xb8\xcc\x79\x46\x44\x67\xae\xb3\x1c\x08\xe2\xde\x29\xc6\x7b\x1b\x51\x55\x9d\x1f\x3c\xc9\xcb\x25\xa6\x5f\x0d\x37\x29\xb5\x70\x31\x23\xa1\x0c\xa5\x57\x3d\xcf\xa2\x51\xdb\xc0\x3a\xa5\x40\x31\x19\xf4\xb1\x82\xc4\x7e\x11\x46\xd8\x04\xfd\x48\x52\xc2\x57\x34\x84\xcb\xc6\x70\xdf\xeb\x5e\xd1\x89\x63\xda\x60\x75\xc3\x61\x87\xf2\xf5\x79\x58\xeb\x16\xc8\x99\x0e\x4b\xb9\xd1\xa8\xed\x37\x3d\x19\xbb\x7a\xd0\xd1\x82\xa6\x3f\xb0\x0d\xc7\x28\x96\x6c\xce\x82\x97\x4a\x73\x68\x6d\x38\x18\x0a\x6f\x61\xc3\xb4\x24\x29\x2e\xb9\x75\x85\x5d\x0c\x33\x8e\x26\x73\x9e\xa8\xff\x46\xae\x08\x54\xed\xc3\xee\x16\x3e\xd2\x6e\xa1\x1f\x16\x89\x8f\xb1\x50\x36\x55\x45\xfa\x7b\xa9\x0a\x8e\x0e\x17\xa5\x12\xed\xe7\xdd\xbd\xca\xd0\xfe\xf4\x53\xe7\x81\xda\xe2\xd8\x99\xe6\xae\xe5\x86\x0e\xa5\x52\xcb\x25\xd7\xd0\x36\xfe\xa2\x11\x1a\x88\xe9\x29\x3c\xa6\x18\xf5\x57\x2d\x2c\xd7\x2f\x69\x12\x26\x8a\x95\x5a\xfa\xb8\x95\x6b\xf7\x2d\x51\x26\xbb\xb1\x05\xd7\x7a\xec\x3e\xdf\x70\xeb\xf3\x93\x18\xc3\x84\xb8\x1b\x76\x64\xc8\xd0\x25\x2e\x15\xed\x8f\xf4\xcc\xe0\x78\x1c\x78\x6b\xcb\x13\xc8\x16\x92\xf1\x11\x75\x5b\xb4\x70\x82\xf0\x9c\xbd\x64\x8d\xcc\x57\xe8\x39\x17\xcc\x70\x70\x8f\xa1\x00\xf3\x0f\x02\xf4\x23\x65\x9e\xb7\xd9\x4c\x0a\x1b\x6e\xec\x9c\x19\xff\xf6\xa0\x56\xe8\x9e\x37\x1c\x6e\xa5\xda\xc0\x86\x7f\xa9\xa9\xf3\x0d\xcc\xaf\x76\x3b\x70\x54\x7b\xcd\xe9\xdd\x94\x51\xeb\xf6\xb9\x08\x5b\xa8\x86\xea\xed\x86\x57\xa5\xe3\xf8\xa5\x5a\x96\x81\xcf\x97\x97\x57\xaf\x67\x67\x17\x68\x32\x81\xad\xa7\x7d\x9b\x16\x04\xb4\x37\xfd\xfc\xfc\xe2\xa7\x37\x3f\xa7\x70\xbc\x42\x1a\xaa\x20\x78\x85\xc6\xa1\xf9\x7e\x0f\xa1\x95\x40\x95\xdd\x5e\x2b\xe1\x07\x08\x8d\xe0\xd0\x29\x80\x5d\x32\x3e\xb6\x6d\x8b\x52\xbb\xc8\xc2\x05\x21\x8f\xbc\x43\x3e\xd8\xd1\xe5\xe6\xfb\xda\xe6\xda\x3c\x6e\xbf\x18\x3f\xb9\x32\x0a\x24\xbe\x5a\x13\xfb\x92\x79\x98\x82\xe1\xa0\x60\xed\xac\x7c\x25\xaa\x02\x27\x11\x42\x92\x39\xdd\x6e\x6a\x65\x50\xac\x41\xe1\x2c\xee\x94\x9c\xbd\xf8\x79\xec\xad\x72\x78\x09\x43\xde\xde\xb9\x78\xc9\xbb\x36\x07\xda\xa6\xaa\x6c\xf3\xbe\x4b\xbe\x41\xac\xbf\x0a\xbb\x9a\x9d\x27\xfb\x51\xc9\xd8\xcd\x3d\x37\xf9\x67\x4e\x27\x8c\x37\xdc\xab\x83\x83\x13\x1a\xd7\xae\x74\x83\x9a\xc4\x48\x4c\xfe\x33\xc2\x8f\x8e\x8b\x6e\x32\x81\x0b\xd9\x56\x08\xc2\xc3\x90\xc5\xb6\xf3\x05\x98\x61\x13\x2b\x8f\x75\xbd\xc8\x7a\xed\xb1\xe7\x45\xa1\xa7\x47\xe2\x14\xfc\x36\x57\xda\x4e\xe1\xdb\xa7\xcf\x9e\xa6\x5e\xfe\x4c\x6e\xbd\xba\xb8\x57\x77\x41\x61\x9e\xcb\x6d\x82\x3b\xf8\x96\xca\xfb\x14\xb8\x7b\x57\x50\x95\x78\x87\x7f\x41\x37\x90\xc4\x13\x5f\x96\x68\x5f\x89\x4d\xce\x42\xfc\xec\x9f\xff\x65\x34\xf3\xaa\x4c\x98\xdc\x8e\x0f\x4a\xd7\x07\x9a\x77\x71\x7d\x7d\x75\x4d\x61\x78\x53\x15\xa1\x04\x4a\x3e\x07\x1e\xda\x0b\x4e\xfe\x06\x8f\xbe\xbe\xf3\x25\xee\x63\xdb\xf6\x3a\x34\x7f\x86\x95\x9b\x10\x34\x0c\x48\xe6\xf5\x62\x58\x8e\x79\x7f\xfd\xe6\xf2\xff\x9a\x3b\xda\xfe\xe3\xcc\x3d\x84\xa4\x65\xd8\x69\x12\x6a\xa5\x6f\x01\x4e\xea\xd5\xd6\xf8\xb0\x3d\xa3\x66\x9c\xd3\xcb\x9e\x56\xda\x15\x37\x78\x67\x38\x88\x75\x5d\x89\x5c\xa0\xb2\x0d\x85\x35\x5f\x6d\xcd\xc7\xe4\x83\x8a\xfc\x7e\x7e\xf5\xeb\xc5\xf5\xfb\xab\x4b\xbc\x4c\xe1\x36\xfd\xeb\x44\xfa\x14\xae\x1b\xf9\x49\x02\x37\x7f\xbf\x3c\x7b\x08\xc1\x9f\x59\x8f\xd2\xc4\x1b\x4b\xb5\xd1\xb7\xbe\x88\x8a\x33\xee\x77\xc1\x87\x68\xc3\x7d\xb9\x98\x62\xc9\xe0\xbd\xba\xe2\xf0\x17\xa7\x10\xc7\xad\x13\xdb\xd3\x8d\xd9\xe5\x8b\x2b\xca\x05\x58\xf1\xa9\xd8\xb3\xd4\x6a\xed\x6d\x7f\x9f\x3a\xf2\x58\x30\xcb\xbc\x7e\x0f\xdb\x9f\xc3\xa9\xd4\xff\x7b\xa0\x8f\xd4\xf5\xf8\xa8\x03\x8a\x81\x5f\xc7\x16\x6e\x9d\x7a\x85\xdc\x8b\xa7\xdb\x5b\x76\xc7\x34\xd4\x0b\x03\x41\x86\x2f\x5d\x69\xe3\x81\x8e\x23\x41\x7e\x5c\x2f\xcc\xe7\xf5\x64\x5d\xeb\xf8\xcf\x42\x3a\x74\xad\xde\xb3\x96\xaa\xa1\xee\xa2\x13\xb7\x23\xd9\x2f\x1e\x60\x36\xf7\xa8\x20\x5b\x8d\x02\xaf\xb8\x4c\xea\x85\x3b\x78\x43\x6a\xe5\x8b\xe6\xeb\xae\x9e\x89\xdf\x7f\xe6\x96\xa6\xb8\xf2\xc8\x68\x24\x87\x6e\xe4\x85\x56\xeb\x57\x2e\x01\x4b\xd6\xe3\xa3\xe6\xe2\xbc\x75\xff\x4b\x65\x9d\xb3\xf3\x2c\x53\x45\xaa\xe0\x5e\x09\x64\x36\x3b\x4f\xc6\x7d\xd7\xe5\x6a\xda\x6e\x98\x1a\x8e\xaf\x55\x42\x77\x07\x47\x3c\x22\x1f\xf7\x3a\xfe\xdb\x88\x65\xe4\x2f\xd9\x2b\xae\x97\x3c\x91\x98\xe0\xb9\xee\x6d\xbf\x00\xd7\x76\xad\x8a\x06\x2d\x04\xd5\x00\x28\x57\xc8\x19\x26\xc0\x0c\x2a\x66\xb9\x06\xd4\xa2\x46\xbb\x7a\xb0\xbb\x39\xa7\x40\x49\x4e\x91\xd0\xaf\x29\xc8\xf1\xde\x03\x0d\x77\x8d\xc2\x63\xb0\x36\x18\x7d\xb2\x77\x20\xad\x8f\xc7\xcc\x9e\x32\x90\xb6\x86\xc6\x2a\x54\xd7\xad\xab\xa5\xb9\x27\x0e\x54\xae\x6f\xf5\xc4\x05\x94\x7b\x1e\xe0\xe7\xd6\x1a\xa0\xd8\xb3\xa5\x52\xcb\x8a\xb3\x5a\x18\x7a\xe1\x3c\x9b\xdf\x3d\xcb\xf0\x2f\x8c\xef\x2f\xec\x8a\x6b\xc9\xed\x64\x86\xa8\x4c\x78\x28\x3d\xab\x27\xb3\x3a\x1e\x2a\xaf\xc0\x39\xae\x28\x66\xb3\x59\xf7\xa0\x2e\x1a\x8d\x24\xb7\x1b\xa5\x6f\xdb\x8f\xf3\x4b\x6e\xef\x77\x61\x8d\xf1\xe8\xf6\xd6\xd1\x0b\xba\xcf\xbc\xb2\x98\xa0\xb8\xcc\xb9\x13\xa1\xf1\xaa\xc2\xb3\x0b\xad\x95\x76\x4a\xb2\xeb\xb4\xb7\xd7\xb7\x71\x20\x1c\x7d\x16\xc0\x88\x0c\xc3\x0a\x87\xe2\x10\xc6\xf1\x6a\xff\xfb\x14\x58\x47\x96\xb5\x95\xfd\x3a\x05\xe9\x63\x8e\xb6\x45\x78\x36\x3b\xbf\x4e\xd8\xbe\x0a\xe3\x3e\xa2\xce\x5e\xab\x67\x41\x8b\x29\xe8\x9a\x8f\x7b\x65\x60\x0a\xd9\x85\x21\xf7\xd6\x4b\x5e\xdc\x6a\x3c\x80\x53\x70\x4d\x95\x56\xe8\xa7\xf0\x95\x1c\xd4\x64\x9d\x64\x69\xbe\x8b\xc6\x4f\x5b\x33\x7d\xdc\x04\x95\x82\x4c\x86\xdf\x8e\xae\xa3\xa8\x5b\x83\xdc\x2b\x45\x7d\xd2\xfa\x34\xc6\x19\x7b\x4f\xca\x9f\x52\x07\x05\x09\xd4\x0b\x0a\xf3\x44\x7d\x44\x15\xdf\x9f\x79\xff\xc0\x8b\x4e\xc7\x10\xf7\x85\x5d\x4d\xfd\x9a\x30\xd7\x49\x6d\xe6\xf6\xe9\xb6\xf0\x2f\xc3\x58\x3e\x05\x70\x2b\x6c\xf6\xea\xf9\xd9\xfd\x7f\x32\x5d\x6c\x98\xe6\x2e\x9e\x74\xf3\xfb\x63\x3b\xbf\xd0\x36\x53\xff\x3e\xf6\xdb\x6f\x12\x37\xed\xd5\xeb\x37\xfe\xe9\x15\xfd\x3d\xab\xa7\x3d\xf8\x1e\x46\xed\x9e\x13\xfa\x0d\x67\xf3\xfb\xd9\xdc\x47\xad\xee\xc4\x3d\xf9\x9b\x66\x21\xb9\x9d\x0e\xe6\xb9\x6b\x93\xf8\x33\xcd\x5e\x31\x73\xeb\x17\xec\x42\x60\x3b\x08\x15\xfe\xc9\xcb\x7d\x24\x30\xa8\x17\x21\x1a\x70\xa9\x8c\x8f\x07\x5c\x32\x84\xd7\x58\x94\xf0\xc5\x61\x44\x1f\x26\xb7\x26\xd0\x0f\xa4\x5d\xee\xde\x57\x9b\x5d\x3f\x93\x75\x19\x6c\x34\xba\xed\x3b\x11\x37\x48\x66\x3d\x85\x96\x58\xa5\x96\xce\xc8\xa1\xa3\x22\x2b\x3b\x86\xbf\xc1\x13\x82\x70\x9b\x9d\xd9\x0f\xd9\xcd\xf9\x05\xa5\xbe\x82\x55\x67\xe5\xb2\xc3\x73\xec\x6b\xea\xfc\x9e\x7b\xd6\xbb\x8b\x0e\x29\x60\x7e\x34\x88\x86\x7c\x98\x45\xb3\xaf\x79\xc5\x59\xbf\x2e\xc6\x36\xe0\xf3\x1d\x6f\x95\x31\x49\xc3\x2b\x65\x55\x45\xc6\xab\xff\x02\x67\x4f\x86\x8f\x1f\xc3\x17\xdd\xdb\x1b\xc7\xce\xcd\x9a\x67\x48\x33\x19\xf7\x9e\xfc\x0c\x1e\xa9\xfb\x10\x2c\x74\xf9\xef\x49\x35\xa4\x4d\x81\x6b\x8d\xe2\x74\xff\xd7\x51\x3b\x21\xf1\x65\xfa\xc1\x30\x46\x51\xdb\x60\x82\xb5\xfe\x78\x98\x7f\x76\x3d\x7b\x3d\x3b\x7b\xfe\x12\xa3\x8b\xd6\x2a\x1b\x2e\x0b\x30\xc5\x7b\xe9\xdf\xd9\xba\x07\x39\x54\x2e\x09\xce\x15\x15\x07\xb1\x3d\x40\xd6\x37\x83\x7a\x75\x53\x2a\xd6\x69\xfe\x8f\x86\x1b\xcb\x8b\x14\x16\x8d\x75\x02\xf0\x65\xee\xd0\xd9\x69\xbb\x3a\xf1\x78\xd0\x83\x7a\x38\xf5\x37\x4d\x9e\x73\x63\xca\xa6\xda\x02\x81\x6a\x37\x25\x1f\x1b\xef\xbf\xb4\xda\x30\x61\xd1\x0e\xf2\x3b\xae\x5d\x63\xdf\x09\x1a\x6f\x0e\xdc\xfb\xa6\xd1\xff\x06\x00\x00\xff\xff\xca\xe2\xbc\x3d\xb6\x36\x00\x00")

func appMainGoTplBytes() ([]byte, error) {
	return bindataRead(
		_appMainGoTpl,
		"app/main.go.tpl",
	)
}

func appMainGoTpl() (*asset, error) {
	bytes, err := appMainGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/main.go.tpl", size: 14006, mode: os.FileMode(420), modTime: time.Unix(1618513105, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appPprofGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4d\x6b\xdc\x30\x10\x86\xcf\x9a\x5f\xf1\x56\xb0\x20\x95\x45\xee\xd9\x90\x43\x49\x7a\x08\x2d\x8d\x21\x4b\xaf\xc5\x5d\x8f\x5d\xb1\xce\xc8\xc8\x93\x40\x31\xfa\xef\x45\xde\x7e\x9e\x72\x92\xde\x61\x1e\xe6\xd1\xa8\x69\x70\x9b\x06\xc6\xc4\xc2\xb9\x57\x1e\xf0\xed\x07\x2e\xb9\xbf\xb0\x60\xdb\x10\x3e\xee\xd7\xf0\x85\xf3\x1a\x93\xa0\x94\x80\xbb\x07\x7c\x7e\x38\xe1\xc3\xdd\xfd\x89\x68\xe9\xcf\x97\x7e\x62\x3c\xf5\x51\x88\x9a\x66\xdb\xe2\x88\xd0\x2d\x39\x8d\xa5\x50\x7c\x5a\x52\x56\x38\x32\x76\x4e\x93\x25\x63\x85\xf5\xd7\xd1\x7c\x57\x5d\x2c\x99\xaf\xf8\x93\x9a\xa5\x72\x96\x3c\xd1\xf8\x2c\x67\x44\x89\xea\x3c\x36\x32\x53\x42\xad\x5c\x83\x99\xe3\xaa\xd5\xf7\x08\x46\x7b\x03\x61\x0d\x9f\xf6\x92\xb3\x7a\x5e\xec\x11\xb6\x7d\x67\x3d\x19\x13\x47\x30\xde\xdc\x40\xe2\xbc\x83\x66\x4e\x53\xe8\x72\x14\x1d\x9d\x1d\xfb\x38\xf3\x00\x4d\x58\xb5\xcf\x8a\x7d\x78\x8b\xc3\x8b\x3d\x82\x2b\x6d\x32\xeb\x73\x16\x32\xa6\xd0\xff\xe8\xde\x8a\xab\x46\x94\x09\x49\x50\x1f\xda\xe2\xb0\xb6\x87\xc1\x1e\xf1\xdb\x30\xbc\x1f\x86\xec\x7c\x70\x6f\xab\xe4\xe9\xb6\xab\xd9\x87\xfb\x2e\x3c\x6a\x8e\x32\x39\xff\x6a\x6f\x97\xb2\xfa\x7f\xe7\xcf\xe2\xea\xb2\xc2\x23\xe7\x17\x76\x7f\x77\x21\x71\xf6\x9e\x4c\x71\x9e\xca\xf5\x2b\x58\x86\x52\xe8\x67\x00\x00\x00\xff\xff\xbe\x78\x03\x39\xe3\x01\x00\x00")

func appPprofGoTplBytes() ([]byte, error) {
	return bindataRead(
		_appPprofGoTpl,
		"app/pprof.go.tpl",
	)
}

func appPprofGoTpl() (*asset, error) {
	bytes, err := appPprofGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app/pprof.go.tpl", size: 483, mode: os.FileMode(420), modTime: time.Unix(1618513114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app/includes.go.tpl": appIncludesGoTpl,
	"app/main.go.tpl":     appMainGoTpl,
	"app/pprof.go.tpl":    appPprofGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"app": &bintree{nil, map[string]*bintree{
		"includes.go.tpl": &bintree{appIncludesGoTpl, map[string]*bintree{}},
		"main.go.tpl":     &bintree{appMainGoTpl, map[string]*bintree{}},
		"pprof.go.tpl":    &bintree{appPprofGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
